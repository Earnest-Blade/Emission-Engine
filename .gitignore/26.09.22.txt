-- Event System
public static void RegisterEvent(byte flags, Action ptr)
        {
            if (EventDispatcher.Instance == null) throw new EmissionException("Event Not Initialize Exception", ""); 
            EventDispatcher.Instance.Add(new EventStruct()
            {
                Flags = flags,
                IsHandle = false,
                Name = nameof(flags),
                Pointer = ptr
            });
        }

        public static void HandleEvent(byte flags, bool value)
        {
            if (EventDispatcher.Instance == null) throw new EmissionException("Event Not Initialize Exception", "");
            EventDispatcher.Instance.Find(flags, out var eventStruct);
            if (eventStruct.Flags == 0x0) return;
            
            /* Set flags as handle */
            if (value)
            {
                EventDispatcher.Instance.Current = flags;
                eventStruct.IsHandle = true;
                eventStruct.Pointer.Invoke();
                return;
            }
            
            /* Remove flags */
            EventDispatcher.Instance.Current = 0x0;
            eventStruct.IsHandle = false;
        }

        public static bool IsEventHandle(byte flags)
        {
            if (EventDispatcher.Instance == null) throw new EmissionException("Event Not Initialize Exception", "");
            return EventDispatcher.Instance.Current == flags;
        }

        public static void RemoveEvent(byte flag)
        {
            if(EventDispatcher.Instance == null) throw new EmissionException("Event Not Initialize Exception", "");
            EventDispatcher.Instance.Remove(EventDispatcher.Instance.Find(flag));
        }
        
        public static void DestroyDispatcher()
        {
            if (EventDispatcher.Instance == null) throw new EmissionException("Event Not Initialize Exception", "");
            EventDispatcher.Instance.Dispose();
        }
        
        public static void CreateDispatcher()
        {
            new EventDispatcher();
        }
        
        /* Contains registered events and current flag */
        private class EventDispatcher : IDisposable
        {
            private static EventDispatcher _instance;

            public byte Current
            {
                get => _currentFlags;
                set => _currentFlags = value;
            }

            private byte _currentFlags;
            private List<EventStruct> _events;

            public EventDispatcher()
            {
                _events = new List<EventStruct>();
                _currentFlags = 0x0;

                _instance = this;
            }

            public void Add(EventStruct @struct)
            {
                _events.Add(@struct);
            }

            public void Remove(EventStruct @struct)
            {
                _events.Remove(@struct);
            }

            public EventStruct Find(byte flags)
            {
                Find(flags, out var eventStruct);
                return eventStruct;
            }

            public void Find(byte flags, out EventStruct eventStruct)
            {
                try
                {
                    eventStruct = _events.Single(s => s.Flags == flags);
                }
                catch (InvalidOperationException)
                {
                    eventStruct = new EventStruct(){Flags = 0x0};
                }
            }

            public void Dispose()
            {
                _events.Clear();
                _currentFlags = 0x0;
                _instance = null;
            }

            public static EventDispatcher Instance => _instance;
        }
        
        /* Contain an event type */
        private struct EventStruct
        {
            public string Name;
            public byte Flags;
        
            public bool IsHandle;
            public Action Pointer;
        }