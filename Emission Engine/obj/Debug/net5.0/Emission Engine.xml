<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emission Engine</name>
    </assembly>
    <members>
        <member name="F:Emission.IO.Icon.Width">
            <summary>
            The height, in pixels, of this image.
            </summary>
        </member>
        <member name="F:Emission.IO.Icon.Height">
            <summary>
            The width, in pixels, of this image.
            </summary>
        </member>
        <member name="F:Emission.IO.Icon.Pixels">
            <summary>
            Pointer to the RGBA pixel data of this image, arranged left-to-right, top-to-bottom.
            </summary>
        </member>
        <member name="F:Emission.IO.Icon.Data">
            <summary>
            Array of byte that represent the RGBA image.
            </summary>
        </member>
        <member name="F:Emission.IO.Sprite.Width">
            <summary>
            The height, in pixels, of this image.
            </summary>
        </member>
        <member name="F:Emission.IO.Sprite.Height">
            <summary>
            The width, in pixels, of this image.
            </summary>
        </member>
        <member name="P:Emission.IO.Sprite.Size">
            <summary>
            Create a rectangle from <see cref="F:Emission.IO.Sprite.Width"/> and <see cref="F:Emission.IO.Sprite.Height"/> of the sprite.
            </summary>
        </member>
        <member name="P:Emission.IO.Sprite.Path">
            <summary>
            Path use to load the sprite.
            </summary>
        </member>
        <member name="P:Emission.IO.Sprite.Bytes">
            <summary>
            Byte array in RGBA that define the sprite.
            </summary>
        </member>
        <member name="F:Emission.Mathematics.MathHelper.Pi">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.
            </summary>
        </member>
        <member name="F:Emission.Mathematics.MathHelper.Epsilon">
            <summary>
            Represents the smallest positive value that is greater than zero.
            </summary>
        </member>
        <member name="F:Emission.Mathematics.MathHelper.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.Invert(Emission.Mathematics.Matrix4)">
            <summary>
            Calculate the inverse of a matrix4.
            If the matrix cannot be inverted, then it will throw a new <see cref="T:System.InvalidOperationException"/> error.
            </summary>
            <param name="matrix4">Matrix4 to invert</param>
            <returns>An inverted matrix4</returns>
            <exception cref="T:System.InvalidOperationException">If the matrix cannot be inverted</exception>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.FromQuaternion(Emission.Mathematics.Quaternion)">
            <summary>
            Create a new Matrix 4 from a Quaternion.
            </summary>
            <param name="quaternion">Quaternion use to create the matrix</param>
            <returns>A new Matrix4</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.Scale(System.Single)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.Scale(Emission.Mathematics.Vector3)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.Translation(Emission.Mathematics.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">X, Y and Z coordinates as a <see cref="T:Emission.Mathematics.Vector3"/> offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>When the method completes, contains the created rotation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>When the method completes, contains the created rotation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>When the method completes, contains the created rotation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.RotationQuaternion(Emission.Mathematics.Quaternion)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="quaternion">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.RotationAxis(Emission.Mathematics.Vector3@,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>When the method completes, contains the created rotation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.PerspectiveProjection(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="nearPlane">Minimum z-value of the viewing volume.</param>
            <param name="farPlane">Maximum z-value of the viewing volume.</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.PerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a customized perpective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume</param>
            <param name="right">Maximum x-value of the viewing volume</param>
            <param name="bottom">Minimum y-value of the viewing volume</param>
            <param name="top">Maximum y-value of the viewing volume</param>
            <param name="nearPlane">Minimum z-value of the viewing volume</param>
            <param name="farPlane">Maximum z-value of the viewing volume</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.OrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates an orthographic projection matrix.</summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="depthNear">The near edge of the projection volume.</param>
            <param name="depthFar">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.LookAt(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Build a world space to camera space matrix </summary>
            <param name="eyeX">Eye X (camera) position in world space.</param>
            <param name="eyeY">Eye Y (camera) position in world space.</param>
            <param name="eyeZ">Eye Z (camera) position in world space.</param>
            <param name="targetX">Target X position in world space.</param>
            <param name="targetY">Target Y position in world space.</param>
            <param name="targetZ">Target Z position in world space.</param> 
            <param name="upX">Up X vector in world space</param>
            <param name="upY">Up Y vector in world space</param>
            <param name="upZ">Up Z vector in world space</param>
            <returns>A Matrix4 that transforms world space to camera space.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.LookAt(Emission.Mathematics.Vector3,Emission.Mathematics.Vector3,Emission.Mathematics.Vector3)">
            <summary>Build a world space to camera space matrix.</summary>
            <param name="eye">Eye (camera) position in world space.</param>
            <param name="target">Target position in world space.</param>
            <param name="yUnit">Up vector in world space (should not be parallel to the camera direction, that is target - eye).</param>
            <returns>A Matrix4 that transforms world space to camera space.</returns>
        </member>
        <member name="T:Emission.Graphics.GL.GetProcAddressHandler">
            <summary>
                Returns a function pointer for the OpenGL function with the specified name. 
            </summary>
            <param name="funcName">The name of the function to lookup.</param>
        </member>
        <member name="T:Emission.Graphics.GL.GL">
            <summary>
                Provides bindings for OpenGL 3.3 Core Profile.
            </summary>
        </member>
        <member name="F:Emission.Graphics.GL.GL.NULL">
            <summary>
                The unsafe NULL pointer.
                <para>Analog of IntPtr.Zero.</para>
            </summary>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCullFace(System.Int32)">
            <summary>
                Specify whether front- or back-facing facets can be culled.
            </summary>
            <param name="mode">
                Specifies whether front- or back-facing facets are candidates for culling.
                <para>GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. The initial value is GL_BACK.</para>
            </param>
            <remarks>If mode is GL_FRONT_AND_BACK, no facets are drawn, but other primitives such as points and lines are drawn.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFrontFace(System.Int32)">
            <summary>
                Define front- and back-facing polygons.
            </summary>
            <param name="mode">
                Specifies the orientation of front-facing polygons.
                <para>GL_CW and GL_CCW are accepted. The initial value is GL_CCW.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glHint(System.Int32,System.Int32)">
            <summary>
                Specify implementation-specific hints.
            </summary>
            <param name="target">
                Specifies a symbolic constant indicating the behavior to be controlled.
                <para>
                    GL_LINE_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT, and
                    GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted.
                </para>
            </param>
            <param name="mode">Specifies a symbolic constant indicating the desired behavior.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glLineWidth(System.Single)">
            <summary>
                Specify the width of rasterized lines.
            </summary>
            <param name="width">Specifies the width of rasterized lines.<para>The initial value is <c>1.0f</c></para>.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPointSize(System.Single)">
            <summary>
                Specify the diameter of rasterized points.
            </summary>
            <param name="size">Specifies the diameter of rasterized points.<para>The initial value is <c>1.0f</c>.</para></param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPolygonMode(System.Int32,System.Int32)">
            <summary>
                Select a polygon rasterization mode
            </summary>
            <param name="face">
                Specifies the polygons that mode applies to. Must be GL_FRONT_AND_BACK for front- and back-facing
                polygons
            </param>
            <param name="mode">
                Specifies how polygons will be rasterized.
                <para>Accepted values are GL_POINT, GL_LINE, and GL_FILL.</para>
                The initial value is GL_FILL for both front- and back-facing polygons.
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Define the scissor box.
            </summary>
            <param name="x">
                Specify the lower left corner of the scissor box on the x-axis
                <para>Initially <c>0</c>.</para>
            </param>
            <param name="y">
                Specify the lower left corner of the scissor box on the y-axis
                <para>Initially <c>0</c>.</para>
            </param>
            <param name="width">Specify the width of the scissor box.</param>
            <param name="height">Specify the height of the scissor box.</param>
            <remarks>When a GL context is first attached to a window, width and height are set to the dimensions of that window.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClearColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Specify clear values for the color buffers.
            </summary>
            <param name="red">The red component value, a value between <c>0.0f</c> and <c>1.0f</c>.</param>
            <param name="green">The green component value, a value between <c>0.0f</c> and <c>1.0f</c>.</param>
            <param name="blue">The blue component value, a value between <c>0.0f</c> and <c>1.0f</c>.</param>
            <param name="alpha">The alpha component value, a value between <c>0.0f</c> and <c>1.0f</c>.</param>
            <remarks>Initial values are (0, 0, 0, 0)</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClear(System.UInt32)">
            <summary>
                Clear buffers to preset values.
                <para>The value to which each buffer is cleared depends on the setting of the clear value for that buffer.</para>
            </summary>
            <param name="mask">
                Bitwise OR of masks that indicate the buffers to be cleared.
                <para>The three masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT,, and GL_STENCIL_BUFFER_BIT.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFinish">
            <summary>
                Block until all GL execution is complete.
                <para>
                    Does not return until the effects of all previously called GL commands are complete. Such effects include all
                    changes to GL state, all changes to connection state, and all changes to the frame buffer contents.
                </para>
            </summary>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFlush">
            <summary>
                Force execution of GL commands in finite time.
            </summary>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glEnable(System.Int32)">
            <summary>
                Enable server-side GL capabilities.
            </summary>
            <param name="cap">Specifies a symbolic constant indicating a GL capability.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDisable(System.Int32)">
            <summary>
                Disable server-side GL capabilities.
            </summary>
            <param name="cap">Specifies a symbolic constant indicating a GL capability.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClearStencil(System.Int32)">
            <summary>
                Specify the clear value for the stencil buffer.
            </summary>
            <param name="index">
                Specifies the index used when the stencil buffer is cleared.
                <para>The initial value is 0.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClearDepth(System.Double)">
            <summary>
                Specify the clear value for the depth buffer.
            </summary>
            <param name="depth">
                Specifies the depth value used when the depth buffer is cleared.
                <para>he initial value is <c>1.0</c>.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glStencilMask(System.UInt32)">
            <summary>
                Control the front and back writing of individual bits in the stencil planes.
            </summary>
            <param name="mask">
                Specifies a bit mask to enable and disable writing of individual bits in the stencil planes.
                <para>Initially, the mask is all 1's</para>
                .
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glColorMask(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Enable and disable writing of frame buffer color components
            </summary>
            <param name="red">Specify whether red will be written into the frame buffer.</param>
            <param name="green">Specify whether green will be written into the frame buffer.</param>
            <param name="blue">Specify whether blue will be written into the frame buffer.</param>
            <param name="alpha">Specify whether alpha will be written into the frame buffer.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glColorMaski(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Enable and disable writing of frame buffer color components
            </summary>
            <param name="index">Specifies the index of the draw buffer whose color mask to set.</param>
            <param name="red">Specify whether red will be written into the frame buffer.</param>
            <param name="green">Specify whether green will be written into the frame buffer.</param>
            <param name="blue">Specify whether blue will be written into the frame buffer.</param>
            <param name="alpha">Specify whether alpha will be written into the frame buffer.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDepthMask(System.Boolean)">
            <summary>
                Enable or disable writing into the depth buffer.
            </summary>
            <param name="enabled">Specifies whether the depth buffer is enabled for writing.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBlendColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Set the blend color.
            </summary>
            <param name="red">Specify the red component of the color to blend.</param>
            <param name="green">Specify the green component of the color to blend.</param>
            <param name="blue">Specify the blue component of the color to blend.</param>
            <param name="alpha">Specify the alpha component of the color to blend.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBlendFunc(System.Int32,System.Int32)">
            <summary>
                Specify pixel arithmetic.
            </summary>
            <param name="srcFactor">
                Specifies how the red, green, blue, and alpha source blending factors are computed.
                <para>The initial value is GL_ONE.</para>
            </param>
            <param name="dstFactor">
                Specifies how the red, green, blue, and alpha destination blending factors are computed.
                <para>The initial value is GL_ZERO.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBlendEquation(System.Int32)">
            <summary>
                Specify the equation used for both the RGB blend equation and the Alpha blend equation.
            </summary>
            <param name="mode">Specifies how source and destination colors are combined.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Set the viewport.
            </summary>
            <param name="x">The lower left corner of the viewport rectangle on the x-axis, in pixels.</param>
            <param name="y">The lower left corner of the viewport rectangle on the y-axis, in pixels.</param>
            <param name="width">The width of the viewport, in pixels.</param>
            <param name="height">The height of the viewport.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsEnabled(System.Int32)">
            <summary>
                Test whether a capability is enabled.
            </summary>
            <param name="cap">Specifies a symbolic constant indicating a GL capability.</param>
            <returns><c>true</c> if capability is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawArrays(System.Int32,System.Int32,System.Int32)">
            <summary>
                Render primitives from array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="first">Specifies the starting index in the enabled arrays.</param>
            <param name="count">Specifies the number of indices to be rendered.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawBuffer(System.Int32)">
            <summary>
                Specify which color buffers are to be drawn into.
            </summary>
            <param name="buffer">Specifies the color buffer to be drawn into.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glReadBuffer(System.Int32)">
            <summary>
                Select a color buffer source for pixels.
            </summary>
            <param name="buffer">Specifies a color buffer.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glLogicOp(System.Int32)">
            <summary>
                Specify a logical pixel operation for rendering.
            </summary>
            <param name="opcode"></param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glStencilFunc(System.Int32,System.Int32,System.UInt32)">
            <summary>
                Set front and back function and reference value for stencil testing.
            </summary>
            <param name="func">Specifies the test function.</param>
            <param name="reference">Specifies the reference value for the stencil test.</param>
            <param name="mask">
                Specifies a mask that is ANDed with both the reference value and the stored stencil value when the
                test is done.
                <para>The initial value is all 1's.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glStencilOp(System.Int32,System.Int32,System.Int32)">
            <summary>
                Set front and back stencil test actions.
            </summary>
            <param name="fail">Specifies the action to take when the stencil test fail.</param>
            <param name="zfail">Specifies the stencil action when the stencil test passes, but the depth test fails.</param>
            <param name="zpass">
                Specifies the stencil action when both the stencil test and the depth test pass, or when the
                stencil test passes and either there is no depth buffer or depth testing is not enabled
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDepthFunc(System.Int32)">
            <summary>
                Specify the value used for depth buffer comparisons.
            </summary>
            <param name="func">Specifies the depth comparison function.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBeginConditionalRender(System.UInt32,System.Int32)">
            <summary>
                Start conditional rendering.
            </summary>
            <param name="id">
                Specifies the name of an occlusion query object whose results are used to determine if the rendering
                commands are discarded.
            </param>
            <param name="mode">Specifies how the results of the occlusion query is interpreted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glEndConditionalRender">
            <summary>
                Ends conditional rendering.
            </summary>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClampColor(System.Boolean)">
            <summary>
                Specify whether data read via ReadPixels should be clamped.
            </summary>
            <param name="clamp">Specifies whether to apply color clamping.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetString(System.Int32)">
            <summary>
                Return a string describing the current GL connection.
            </summary>
            <param name="name">
                Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or
                GL_SHADING_LANGUAGE_VERSION
            </param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetStringi(System.Int32,System.UInt32)">
            <summary>
                Return a string describing the current GL connection.
            </summary>
            <param name="name">
                Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, GL_SHADING_LANGUAGE_VERSION, or GL_EXTENSIONS.
            </param>
            <param name="index">The index of the string to return.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPixelStorei(System.Int32,System.Int32)">
            <summary>
                Set pixel storage modes.
            </summary>
            <param name="paramName">
                Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data
                into memory: GL_PACK_ALIGNMENT. The other affects the unpacking of pixel data from memory: GL_UNPACK_ALIGNMENT.
            </param>
            <param name="param">Specifies the value that <paramref name="paramName" /> is set to. Valid values are 1, 2, 4, or 8.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPixelStoref(System.Int32,System.Single)">
            <summary>
                Set pixel storage modes.
            </summary>
            <param name="paramName">Specifies the symbolic name of the parameter to be set.</param>
            <param name="param">Specifies the value that <paramref name="paramName" /> is set to.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBufferData(System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
                Creates and initializes a buffer object's data store.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="size">Specifies the size in bytes of the buffer object's new data store.</param>
            <param name="data">
                Specifies a pointer to data that will be copied into the data store for initialization, or NULL if
                no data is to be copied.
            </param>
            <param name="usage">
                Specifies the expected usage pattern of the data store.
                <para>
                    Must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY,
                    GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
                </para>
                .
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBufferData(System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
                Creates and initializes a buffer object's data store.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="size">Specifies the size in bytes of the buffer object's new data store.</param>
            <param name="data">
                Specifies a pointer to data that will be copied into the data store for initialization, or NULL if
                no data is to be copied.
            </param>
            <param name="usage">
                Specifies the expected usage pattern of the data store.
                <para>
                    Must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY,
                    GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
                </para>
                .
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.GetError">
            <summary>
                Gets the stored error code information.
            </summary>
            <returns>An OpenGL error code.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexParameterf(System.Int32,System.Int32,System.Single)">
            <summary>
                Set texture parameters.
            </summary>
            <param name="target">
                Specifies the target texture of the active texture unit, which must be either GL_TEXTURE_2D or
                GL_TEXTURE_CUBE_MAP.
            </param>
            <param name="paramName">
                Specifies the symbolic name of a single-valued texture parameter. <paramref name="paramName" /> can be
                one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_WRAP_S, or GL_TEXTURE_WRAP_T.
            </param>
            <param name="param">Specifies the value of <paramref name="paramName" />.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexParameteri(System.Int32,System.Int32,System.Int32)">
            <summary>
                Set texture parameters.
            </summary>
            <param name="target">
                Specifies the target texture of the active texture unit, which must be either GL_TEXTURE_2D or
                GL_TEXTURE_CUBE_MAP.
            </param>
            <param name="paramName">
                Specifies the symbolic name of a single-valued texture parameter. <paramref name="paramName" /> can be
                one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_WRAP_S, or GL_TEXTURE_WRAP_T.
            </param>
            <param name="param">Specifies the value of <paramref name="paramName" />.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexParameterfv(System.Int32,System.Int32,System.Single*)">
            <summary>
                Set texture parameters.
            </summary>
            <param name="target">
                Specifies the target texture of the active texture unit, which must be either GL_TEXTURE_2D or
                GL_TEXTURE_CUBE_MAP.
            </param>
            <param name="paramName">
                Specifies the symbolic name of a single-valued texture parameter. <paramref name="paramName" /> can be
                one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_WRAP_S, or GL_TEXTURE_WRAP_T.
            </param>
            <param name="param">Specifies the value of <paramref name="paramName" />.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexParameteriv(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Set texture parameters.
            </summary>
            <param name="target">
                Specifies the target texture of the active texture unit, which must be either GL_TEXTURE_2D or
                GL_TEXTURE_CUBE_MAP.
            </param>
            <param name="paramName">
                Specifies the symbolic name of a single-valued texture parameter. <paramref name="paramName" /> can be
                one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_WRAP_S, or GL_TEXTURE_WRAP_T.
            </param>
            <param name="param">Specifies the value of <paramref name="paramName" />.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexParameterfv(System.Int32,System.Int32,System.Single[])">
            <summary>
                Set texture parameters.
            </summary>
            <param name="target">
                Specifies the target texture of the active texture unit, which must be either GL_TEXTURE_2D or
                GL_TEXTURE_CUBE_MAP.
            </param>
            <param name="paramName">
                Specifies the symbolic name of a single-valued texture parameter. <paramref name="paramName" /> can be
                one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_WRAP_S, or GL_TEXTURE_WRAP_T.
            </param>
            <param name="param">Specifies the value of <paramref name="paramName" />.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexParameteriv(System.Int32,System.Int32,System.Int32[])">
            <summary>
                Set texture parameters.
            </summary>
            <param name="target">
                Specifies the target texture of the active texture unit, which must be either GL_TEXTURE_2D or
                GL_TEXTURE_CUBE_MAP.
            </param>
            <param name="paramName">
                Specifies the symbolic name of a single-valued texture parameter. <paramref name="paramName" /> can be
                one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_WRAP_S, or GL_TEXTURE_WRAP_T.
            </param>
            <param name="param">Specifies the value of <paramref name="paramName" />.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDepthRange(System.Double,System.Double)">
            <summary>
                Specify mapping of depth values from normalized device coordinates to window coordinates.
            </summary>
            <param name="near">
                Specifies the mapping of the near clipping plane to window coordinates.
                <c>The initial value is 0.</c>
            </param>
            <param name="far">
                Specifies the mapping of the far clipping plane to window coordinates.<c>The initial value is 1.</c>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElements(System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Render primitives from array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="type">
                Specifies the type of the values in indices.
                <para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para>
            </param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElements(System.Int32,System.Byte[])">
            <summary>
                Render primitives from array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="indices">An array containing the indices.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElements(System.Int32,System.UInt16[])">
            <summary>
                Render primitives from array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="indices">An array containing the indices.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElements(System.Int32,System.UInt32[])">
            <summary>
                Render primitives from array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="indices">An array containing the indices.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Return a texture image.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="format">Specifies a pixel format for the returned data. </param>
            <param name="type">Specifies a pixel type for the returned data.</param>
            <param name="pixels">Returns the texture image. Should be a pointer to an array of the type specified by type.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexImage(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Return a texture image.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="format">Specifies a pixel format for the returned data. </param>
            <param name="type">Specifies a pixel type for the returned data.</param>
            <param name="pixels">Returns the texture image. Should be a pointer to an array of the type specified by type.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glReadPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Read a block of pixels from the frame buffer.
            </summary>
            <param name="x">Specify the window coordinates of the first pixel that is read from the frame buffer on the x-axis.<para>This location is the lower left corner of a rectangular block of pixels.</para></param>
            <param name="y">Specify the window coordinates of the first pixel that is read from the frame buffer on the y-axis.<para>This location is the lower left corner of a rectangular block of pixels.</para></param>
            <param name="width">Specify the width of the pixel rectangle, in pixels.</param>
            <param name="height">Specify the height of the pixel rectangle, in pixels.</param>
            <param name="format">Specifies the format of the pixel data.<para>The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.</para></param>
            <param name="type">Specifies the data type of the pixel data.</param>
            <param name="pixels">A pointer where the pixel data will be written.<para>Must have enough memory allocated for the desired dimensions and pixel format.</para></param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glReadPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Read a block of pixels from the frame buffer.
            </summary>
            <param name="x">Specify the window coordinates of the first pixel that is read from the frame buffer on the x-axis.<para>This location is the lower left corner of a rectangular block of pixels.</para></param>
            <param name="y">Specify the window coordinates of the first pixel that is read from the frame buffer on the y-axis.<para>This location is the lower left corner of a rectangular block of pixels.</para></param>
            <param name="width">Specify the width of the pixel rectangle, in pixels.</param>
            <param name="height">Specify the height of the pixel rectangle, in pixels.</param>
            <param name="format">Specifies the format of the pixel data.</param>
            <param name="type">Specifies the data type of the pixel data.</param>
            <param name="pixels">A pointer where the pixel data will be written.<para>Must have enough memory allocated for the desired dimensions and pixel format.</para></param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glReadPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
                Read a block of pixels from the frame buffer.
            </summary>
            <param name="x">Specify the window coordinates of the first pixel that is read from the frame buffer on the x-axis.<para>This location is the lower left corner of a rectangular block of pixels.</para></param>
            <param name="y">Specify the window coordinates of the first pixel that is read from the frame buffer on the y-axis.<para>This location is the lower left corner of a rectangular block of pixels.</para></param>
            <param name="width">Specify the width of the pixel rectangle, in pixels.</param>
            <param name="height">Specify the height of the pixel rectangle, in pixels.</param>
            <param name="format">Specifies the format of the pixel data.</param>
            <param name="type">Specifies the data type of the pixel data.</param>
            <param name="pixels">A buffer where the pixel data will be written.<para>Must have enough memory allocated for the desired dimensions and pixel format.</para></param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawBuffers(System.Int32,System.Int32*)">
            <summary>
                Specifies a list of color buffers to be drawn into.
            </summary>
            <param name="n">Specifies the number of buffers.</param>
            <param name="buffers">Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawBuffers(System.Int32[])">
            <summary>
                Specifies a list of color buffers to be drawn into.
            </summary>
            <param name="buffers">PAn array of symbolic constants specifying the buffers into which fragment colors or data values will be written.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexImage1D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Specify a one-dimensional texture image.
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="level">
                Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap
                reduction image.
            </param>
            <param name="internalFormat">Specifies the number of color components in the texture. </param>
            <param name="width">
                Specifies the width of the texture image.
                <para>All implementations support texture images that are at least 1024 texels wide.</para>
            </param>
            <param name="border">This value must be 0.</param>
            <param name="format">
                Specifies the format of the pixel data.
            </param>
            <param name="type">
                Specifies the data type of the pixel data.
            </param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexImage1D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Specify a one-dimensional texture image.
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="level">
                Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap
                reduction image.
            </param>
            <param name="internalFormat">Specifies the number of color components in the texture. </param>
            <param name="width">
                Specifies the width of the texture image.
                <para>All implementations support texture images that are at least 1024 texels wide.</para>
            </param>
            <param name="border">This value must be 0.</param>
            <param name="format">
                Specifies the format of the pixel data.
            </param>
            <param name="type">
                Specifies the data type of the pixel data.
            </param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexImage2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Specify a two-dimensional texture image.
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="level">
                Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap
                reduction image.
            </param>
            <param name="internalFormat">Specifies the number of color components in the texture. </param>
            <param name="width">
                Specifies the width of the texture image.
                <para>All implementations support texture images that are at least 1024 texels wide.</para>
            </param>
            <param name="height">
                Specifies the height of the texture image, or the number of layers in a texture array.
                <para>
                    All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are
                    at least 256 layers deep.
                </para>
            </param>
            <param name="border">This value must be 0.</param>
            <param name="format">
                Specifies the format of the pixel data.
            </param>
            <param name="type">
                Specifies the data type of the pixel data.
            </param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexImage2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Specify a two-dimensional texture image.
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="level">
                Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap
                reduction image.
            </param>
            <param name="internalFormat">Specifies the number of color components in the texture. </param>
            <param name="width">
                Specifies the width of the texture image.
                <para>All implementations support texture images that are at least 1024 texels wide.</para>
            </param>
            <param name="height">
                Specifies the height of the texture image, or the number of layers in a texture array.
                <para>
                    All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are
                    at least 256 layers deep.
                </para>
            </param>
            <param name="border">This value must be 0.</param>
            <param name="format">
                Specifies the format of the pixel data.
            </param>
            <param name="type">
                Specifies the data type of the pixel data.
            </param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexImage3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Specify a three-dimensional texture image.
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="level">
                Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap
                reduction image.
            </param>
            <param name="internalFormat">Specifies the number of color components in the texture. </param>
            <param name="width">
                Specifies the width of the texture image.
                <para>All implementations support texture images that are at least 1024 texels wide.</para>
            </param>
            <param name="height">
                Specifies the height of the texture image, or the number of layers in a texture array.
                <para>
                    All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are
                    at least 256 layers deep.
                </para>
            </param>
            <param name="depth">Specifies the depth of the texture image, or the number of layers in a texture array.<para>All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.</para></param>
            <param name="border">This value must be 0.</param>
            <param name="format">
                Specifies the format of the pixel data.
            </param>
            <param name="type">
                Specifies the data type of the pixel data.
            </param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexImage3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Specify a three-dimensional texture image.
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="level">
                Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap
                reduction image.
            </param>
            <param name="internalFormat">Specifies the number of color components in the texture. </param>
            <param name="width">
                Specifies the width of the texture image.
                <para>All implementations support texture images that are at least 1024 texels wide.</para>
            </param>
            <param name="height">
                Specifies the height of the texture image, or the number of layers in a texture array.
                <para>
                    All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are
                    at least 256 layers deep.
                </para>
            </param>
            <param name="depth">Specifies the depth of the texture image, or the number of layers in a texture array.<para>All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.</para></param>
            <param name="border">This value must be 0.</param>
            <param name="format">
                Specifies the format of the pixel data.
            </param>
            <param name="type">
                Specifies the data type of the pixel data.
            </param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindTexture(System.Int32,System.UInt32)">
            <summary>
                Bind a named texture to a texturing target.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="texture">Specifies the name of a texture.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glActiveTexture(System.Int32)">
            <summary>
                Select active texture unit.
            </summary>
            <param name="texture">Specifies which texture unit to make active.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteTextures(System.Int32,System.UInt32*)">
            <summary>
                Delete named textures.
            </summary>
            <param name="n">Specifies the number of textures to be deleted.</param>
            <param name="textures">Specifies an array of textures to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteTextures(System.UInt32[])">
            <summary>
                Delete named textures.
            </summary>
            <param name="textures">Specifies an array of textures to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteTexture(System.UInt32)">
            <summary>
                Deletes a single texture object.
            </summary>
            <param name="texture">A texture to delete.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsTexture(System.UInt32)">
            <summary>
                Determine if a name corresponds to a texture
            </summary>
            <param name="texture">Specifies a value that may be the name of a texture.</param>
            <returns><c>true</c> if object is a texture, otherwise false.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenTextures(System.Int32,System.UInt32*)">
            <summary>
                Generate texture names.
            </summary>
            <param name="n">Specifies the number of texture names to be generated.</param>
            <param name="textures">Specifies an array in which the generated texture names are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenTextures(System.Int32)">
            <summary>
                Generate texture names.
            </summary>
            <param name="n">Specifies the number of texture names to be generated.</param>
            <returns>Generated texture names.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenTexture">
            <summary>
                Generates a single texture name.
            </summary>
            <returns>The generated texture name.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenQuery">
            <summary>
                Generate a single query object name.
            </summary>
            <returns>The query object name.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenQueries(System.Int32,System.UInt32*)">
            <summary>
                Generate query object names.
            </summary>
            <param name="n">Specifies the number of query object names to be generated.</param>
            <param name="ids">Specifies an array in which the generated query object names are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenQueries(System.Int32)">
            <summary>
                Generate query object names.
            </summary>
            <param name="n">Specifies the number of query object names to be generated.</param>
            <returns>An array of generated query object names.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPolygonOffset(System.Single,System.Single)">
            <summary>
                Set the scale and units used to calculate depth values.
            </summary>
            <param name="factor">
                Specifies a scale factor that is used to create a variable depth offset for each polygon.
                <para>The initial value is 0.</para>
            </param>
            <param name="units">
                Is multiplied by an implementation-specific value to create a constant depth offset.
                <para>The initial value is 0.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glProvokingVertex(System.Int32)">
            <summary>
            Specify the vertex to be used as the source of data for flat shaded varyings.
            </summary>
            <param name="mode">Specifies the vertex to be used as the source of data for flat shaded varyings.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetCompressedTexImage(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Returns a compressed texture image.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">
                Specifies the level-of-detail number of the desired image.
                <para>Level 0 is the base image level. Level n is the n-th mipmap reduction image.</para>
            </param>
            <param name="pixels">
                A pointer where the pixel data will be written.
                <para>Enough memory must be allocated at this location for the data to written.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetCompressedTexImage(System.Int32,System.Int32,System.Void*)">
            <summary>
                Returns a compressed texture image.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">
                Specifies the level-of-detail number of the desired image.
                <para>Level 0 is the base image level. Level n is the n-th mipmap reduction image.</para>
            </param>
            <param name="pixels">
                A pointer where the pixel data will be written.
                <para>Enough memory must be allocated at this location for the data to written.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSampleCoverage(System.Single,System.Boolean)">
            <summary>
                Specify multisample coverage parameters.
            </summary>
            <param name="value">
                Specify a single floating-point sample coverage value.
                <para>The value is clamped to the range 0 and 1. The initial value is 1.0.</para>
            </param>
            <param name="invert">
                Specify a single boolean value representing if the coverage masks should be inverted.
                <para>The initial value is <c>false</c>.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBeginQuery(System.Int32,System.UInt32)">
            <summary>
                Delimit the boundaries of a query object.
            </summary>
            <param name="target">
                Specifies the target type of query object established between <see cref="M:Emission.Graphics.GL.GL.glBeginQuery(System.Int32,System.UInt32)" /> and the subsequent
                <see cref="M:Emission.Graphics.GL.GL.glEndQuery(System.Int32)" />.
                <para>
                    Must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE,
                    GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
                </para>
            </param>
            <param name="id">Specifies the name of a query object.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glEndQuery(System.Int32)">
            <summary>
                Delimit the boundaries of a query object.
            </summary>
            <param name="target">
                Specifies the target type of query object to be concluded.
                <para>
                    Must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE,
                    GL_PRIMITIVES_GENERATED, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED.
                </para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsQuery(System.UInt32)">
            <summary>
                Determine if a name corresponds to a query object.
            </summary>
            <param name="id">Specifies a value that may be the name of a query object.</param>
            <returns><c>true</c> if object is a query object object, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteQueries(System.Int32,System.UInt32*)">
            <summary>
                Delete named query objects.
            </summary>
            <param name="n">Specifies the number of query objects to be deleted.</param>
            <param name="ids">Specifies an array of query objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteQueries(System.UInt32[])">
            <summary>
                Delete named query objects.
            </summary>
            <param name="ids">An array of query objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteQuery(System.UInt32)">
            <summary>
                Deletes a single query object.
            </summary>
            <param name="id">The query to delete.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBlendEquationSeparate(System.Int32,System.Int32)">
            <summary>
                Set the RGB blend equation and the alpha blend equation separately.
            </summary>
            <param name="modeRGB">
                Specifies the RGB blend equation, how the red, green, and blue components of the source and
                destination colors are combined.
                <para>Must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.</para>
            </param>
            <param name="modeAlpha">
                Specifies the alpha blend equation, how the alpha component of the source and destination
                colors are combined.
                <para>Must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glStencilFuncSeparate(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
                Set front and/or back function and reference value for stencil testing
            </summary>
            <param name="face">
                Specifies whether front and/or back stencil state is updated.
                <para>Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.</para>
            </param>
            <param name="func">
                Specifies the test function.
                <para>
                    Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL,
                    GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS
                </para>
                .
            </param>
            <param name="reference">
                Specifies the reference value for the stencil test.
                <para>
                    Clamped to the range [0, 2n - 1], where n is the number of bitplanes in the stencil buffer. The initial value
                    is 0.
                </para>
            </param>
            <param name="mask">
                Specifies a mask that is ANDed with both the reference value and the stored stencil value when the
                test is done.
                <para>The initial value is all 1's.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glStencilOpSeparate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Set front and/or back stencil test actions.
            </summary>
            <param name="face">
                Specifies whether front and/or back stencil state is updated.
                <para>Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.</para>
            </param>
            <param name="sfail">
                Specifies the action to take when the stencil test fails.
                <para>
                    Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR,
                    GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.
                </para>
            </param>
            <param name="dpfail">
                Specifies the stencil action when the stencil test passes, but the depth test fails.
                <paramref name="dpfail" /> accepts the same symbolic constants as <paramref name="sfail" />.
                <para>The initial value is GL_KEEP.</para>
            </param>
            <param name="dppass">
                Specifies the stencil action when both the stencil test and the depth test pass, or when the
                stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass​ accepts the same
                symbolic constants as <paramref name="sfail"/>​.
                <para>The initial value is GL_KEEP.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glStencilMaskSeparate(System.Int32,System.UInt32)">
            <summary>
                Control the front and/or back writing of individual bits in the stencil planes.
            </summary>
            <param name="face">
                Specifies whether the front and/or back stencil writemask is updated.
                <para>Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK.</para>
            </param>
            <param name="mask">
                Specifies a bit mask to enable and disable writing of individual bits in the stencil planes.
                Initially, the mask is all 1's.
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glWaitSync(System.IntPtr,System.UInt32,System.UInt64)">
            <summary>
                Instruct the GL server to block until the specified sync object becomes signaled.
            </summary>
            <param name="sync">Specifies the sync object whose status to wait on.</param>
            <param name="flags">A bitfield controlling the command flushing behavior.
                <para>May be zero.</para>
            </param>
            <param name="timeout">
                Specifies the timeout that the server should wait before continuing.
                <para>Must be GL_TIMEOUT_IGNORED.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFenceSync(System.Int32,System.UInt32)">
            <summary>
                Create a new sync object and insert it into the GL command stream.
            </summary>
            <param name="condition">Specifies the condition that must be met to set the sync object's state to signaled.
                <para>Must be GL_SYNC_GPU_COMMANDS_COMPLETE.</para>
            </param>
            <param name="flags">Specifies a bitwise combination of flags controlling the behavior of the sync object.
                <para>No flags are presently defined for this operation and flags must be zero.</para>
            </param>
            <returns>The sync object reference.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteSync(System.IntPtr)">
            <summary>
                Delete a sync object
            </summary>
            <param name="sync">The sync object to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsSync(System.IntPtr)">
            <summary>
                Determines if a name corresponds to a sync object.
            </summary>
            <param name="sync">Specifies a value that may be the name of a sync object.</param>
            <returns><c>true</c> if sync is currently the name of a sync object, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClientWaitSync(System.IntPtr,System.UInt32,System.UInt64)">
            <summary>
                Block and wait for a sync object to become signaled.
            </summary>
            <param name="sync">The sync object whose status to wait on.</param>
            <param name="flags">A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT.</param>
            <param name="timeout">
                The timeout, specified in nanoseconds, for which the implementation should wait for sync to
                become signaled.
            </param>
            <returns>The status, which will be GL_ALREADY_SIGNALED, GL_TIMEOUT_EXPIRED, GL_CONDITION_SATISFIED, or GL_WAIT_FAILED.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBooleanv(System.Int32,System.Boolean*)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <param name="data">Returns the value or values of the specified parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBoolean(System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBooleanv(System.Int32,System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <param name="count">The number of values to get.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetDoublev(System.Int32,System.Double*)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <param name="data">Returns the value or values of the specified parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetDouble(System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetDoublev(System.Int32,System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <param name="count">The number of values to get.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetFloatv(System.Int32,System.Single*)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <param name="data">Returns the value or values of the specified parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetFloat(System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetFloatv(System.Int32,System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <param name="count">The number of values to get.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetIntegerv(System.Int32,System.Int32*)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <param name="data">Returns the value or values of the specified parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetInteger(System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetIntegerv(System.Int32,System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <param name="count">The number of values to get.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetInteger64v(System.Int32,System.Int64*)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <param name="data">Returns the value or values of the specified parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetInteger64(System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetInteger64v(System.Int32,System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="paramName">Specifies the parameter value to be returned.</param>
            <param name="count">The number of values to get.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexParameterfv(System.Int32,System.Int32,System.Int32)">
            <summary>
                Return texture parameter values.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <param name="count">The number of values to get.</param>
            <remarks>Array must have enough space allocated to contain the requested value(s).</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexParameteriv(System.Int32,System.Int32,System.Int32)">
            <summary>
                Return texture parameter values.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <param name="count">The number of values to get.</param>
            <remarks>Array must have enough space allocated to contain the requested value(s).</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexParameterfv(System.Int32,System.Int32,System.Single*)">
            <summary>
                Return texture parameter values.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <param name="args">An pointer to an array where the texture parameters will be stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexParameteriv(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Return texture parameter values.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <param name="args">An pointer to an array where the texture parameters will be stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexParameterf(System.Int32,System.Int32)">
            <summary>
                Return a single texture parameter value.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <returns>The value of the parameter.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexParameteri(System.Int32,System.Int32)">
            <summary>
                Return a single texture parameter value.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <returns>The value of the parameter.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexLevelParameterfv(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Return texture parameter values for a specific level of detail.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">
                Specifies the level-of-detail number of the desired image.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <param name="count">The number of values to get.</param>
            <remarks>Array must have enough space allocated to contain the requested value(s).</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexLevelParameteriv(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Return texture parameter values for a specific level of detail.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">
                Specifies the level-of-detail number of the desired image.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <param name="count">The number of values to get.</param>
            <remarks>Array must have enough space allocated to contain the requested value(s).</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexLevelParameterfv(System.Int32,System.Int32,System.Int32,System.Single*)">
            <summary>
                Return texture parameter values for a specific level of detail.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">
                Specifies the level-of-detail number of the desired image.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <param name="args">An pointer to an array where the texture parameters will be stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexLevelParameteriv(System.Int32,System.Int32,System.Int32,System.Int32*)">
            <summary>
                Return texture parameter values for a specific level of detail.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">
                Specifies the level-of-detail number of the desired image.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <param name="args">An pointer to an array where the texture parameters will be stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexLevelParameterf(System.Int32,System.Int32,System.Int32)">
            <summary>
                Return a single texture parameter value for a specific level of detail.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">
                Specifies the level-of-detail number of the desired image.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <returns>The value of the parameter.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexLevelParameteri(System.Int32,System.Int32,System.Int32)">
            <summary>
                Return a single texture parameter value for a specific level of detail.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">
                Specifies the level-of-detail number of the desired image.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="paramName">Specifies the symbolic name of a texture parameter.</param>
            <returns>The value of the parameter.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCopyTexImage1D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a 1D texture image.
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_1D.</para></param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="internalFormat">Specifies the internal format of the texture.</param>
            <param name="x">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="y">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="width">Specifies the width of the texture image. Must be 0 or 2 n + 2 ⁡ border for some integer n. The height of the texture image is 1.</param>
            <param name="border">Specifies the width of the border. Must be either 0 or 1.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCopyTexImage2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy pixels into a 2D texture image.
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.</para></param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="internalFormat">Specifies the internal format of the texture.</param>
            <param name="x">Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.</param>
            <param name="y">Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.</param>
            <param name="width">Specifies the width of the texture image. Must be 0 or 2 n + 2 ⁡ border for some integer n.</param>
            <param name="height">Specifies the height of the texture image. Must be 0 or 2 n + 2 ⁡ border for some integer n.</param>
            <param name="border">Specifies the width of the border. Must be either 0 or 1.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCopyTexSubImage1D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Copy a one-dimensional texture sub-image
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_1D.</para></param>
            <param name="level">Specifies the level-of-detail number.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xOffset">Specifies the texel offset within the texture array.</param>
            <param name="x">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="y">Specify the window coordinates of the left corner of the row of pixels to be copied.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCopyTexSubImage2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Copy a two-dimensional texture sub-image
            </summary>
            <param name="target">
                Specifies the target to which the texture object is bound.
                <para>
                    Must be GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
                    GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
                    GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_TEXTURE_RECTANGLE.
                </para>
            </param>
            <param name="level">
                Specifies the level-of-detail number.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="x">
                Specify the window coordinates of the lower left corner on the x-axis of the rectangular region of
                pixels to be copied.
            </param>
            <param name="y">
                Specify the window coordinates of the lower left corner on the y-axis of the rectangular region of
                pixels to be copied.
            </param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="height">Specifies the height of the texture sub-image.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexSubImage1D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Specify a one-dimensional texture sub-image.
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_1D.</para></param>
            <param name="level">Specifies the level-of-detail number.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="format">Specifies the format of the pixel data.
                <para>Must be GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, or GL_STENCIL_INDEX.</para>
            </param>
            <param name="type">Specifies the data type of the pixel data.</param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexSubImage2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Specify a two-dimensional texture sub-image.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">Specifies the level-of-detail number.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="height">Specifies the height of the texture sub-image.</param>
            <param name="format">Specifies the format of the pixel data.
                <para>Must be GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, or GL_STENCIL_INDEX.</para>
            </param>
            <param name="type">Specifies the data type of the pixel data.</param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexSubImage3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Specify a three-dimensional texture sub-image.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.
                <para>Must be GL_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_TEXTURE_CUBE_MAP_ARRAY.</para>
            </param>
            <param name="level">Specifies the level-of-detail number.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="zOffset">Specifies a texel offset in the z direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="height">Specifies the height of the texture sub-image.</param>
            <param name="depth">Specifies the depth of the texture sub-image.</param>
            <param name="format">Specifies the format of the pixel data.
                <para>Must be GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, or GL_STENCIL_INDEX.</para>
            </param>
            <param name="type">Specifies the data type of the pixel data.</param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexSubImage1D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Specify a one-dimensional texture sub-image.
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_1D.</para></param>
            <param name="level">Specifies the level-of-detail number.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="format">Specifies the format of the pixel data.
                <para>Must be GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, or GL_STENCIL_INDEX.</para>
            </param>
            <param name="type">Specifies the data type of the pixel data.</param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexSubImage2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Specify a two-dimensional texture sub-image.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">Specifies the level-of-detail number.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="height">Specifies the height of the texture sub-image.</param>
            <param name="format">Specifies the format of the pixel data.
                <para>Must be GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, or GL_STENCIL_INDEX.</para>
            </param>
            <param name="type">Specifies the data type of the pixel data.</param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexSubImage3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Specify a three-dimensional texture sub-image.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.
                <para>Must be GL_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_TEXTURE_CUBE_MAP_ARRAY.</para>
            </param>
            <param name="level">Specifies the level-of-detail number.
                <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="zOffset">Specifies a texel offset in the z direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="height">Specifies the height of the texture sub-image.</param>
            <param name="depth">Specifies the depth of the texture sub-image.</param>
            <param name="format">Specifies the format of the pixel data.
                <para>Must be GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, or GL_STENCIL_INDEX.</para>
            </param>
            <param name="type">Specifies the data type of the pixel data.</param>
            <param name="pixels">Specifies a pointer to the image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawRangeElements(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Byte[])">
            <summary>
                Render primitives from array data.
            </summary>
            <param name="mode">
                Specifies what kind of primitives to render.
                <para>
                    GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY,
                    GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and
                    GL_PATCHES are accepted.
                </para>
            </param>
            <param name="start">Specifies the minimum array index contained in <paramref name="indices" />.</param>
            <param name="end">Specifies the maximum array index contained in <paramref name="indices" />.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The source indices.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawRangeElements(System.Int32,System.UInt32,System.UInt32,System.Int32,System.UInt16[])">
            <summary>
                Render primitives from array data.
            </summary>
            <param name="mode">
                Specifies what kind of primitives to render.
                <para>
                    GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY,
                    GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and
                    GL_PATCHES are accepted.
                </para>
            </param>
            <param name="start">Specifies the minimum array index contained in <paramref name="indices" />.</param>
            <param name="end">Specifies the maximum array index contained in <paramref name="indices" />.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The source indices.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawRangeElements(System.Int32,System.UInt32,System.UInt32,System.Int32,System.UInt32[])">
            <summary>
                Render primitives from array data.
            </summary>
            <param name="mode">
                Specifies what kind of primitives to render.
                <para>
                    GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY,
                    GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and
                    GL_PATCHES are accepted.
                </para>
            </param>
            <param name="start">Specifies the minimum array index contained in <paramref name="indices" />.</param>
            <param name="end">Specifies the maximum array index contained in <paramref name="indices" />.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The source indices.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawRangeElements(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Render primitives from array data.
            </summary>
            <param name="mode">
                Specifies what kind of primitives to render.
                <para>
                    GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY,
                    GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and
                    GL_PATCHES are accepted.
                </para>
            </param>
            <param name="start">Specifies the minimum array index contained in <paramref name="indices" />.</param>
            <param name="end">Specifies the maximum array index contained in <paramref name="indices" />.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="type">
                Specifies the type of the values in indices.
                <para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para>
            </param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMapBuffer(System.Int32,System.Int32)">
            <summary>
                Map all of a buffer object's data store into the client's address space.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="access">
                Specifies the access policy, indicating whether it will be possible to read from, write to, or
                both read from and write to the buffer object's mapped data store.
                <para>The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE.</para>
            </param>
            <returns>A pointer to the beginning of the mapped range.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUnmapBuffer(System.Int32)">
            <summary>
                Release the mapping of a buffer object's data store into the client's address space.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <returns><c>true</c> unless the data store contents have become corrupt during the time the data store was mapped.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCopyTexSubImage3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Copy a three-dimensional texture sub-image.
            </summary>
            <param name="target">
                Specifies the target to which the texture object is bound.
                <para>Must be GL_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_TEXTURE_CUBE_MAP_ARRAY.</para>
            </param>
            <param name="level">
                Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap
                reduction image.
            </param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="zOffset">Specifies a texel offset in the z direction within the texture array.</param>
            <param name="x">
                Specify the window coordinates of the lower left corner of the rectangular region of pixels to be
                copied.
            </param>
            <param name="y">
                Specify the window coordinates of the lower left corner of the rectangular region of pixels to be
                copied.
            </param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="height">Specifies the height of the texture sub-image.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexImage3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture image in a compressed format.
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.</para></param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="internalFormat">Specifies the format of the compressed image data stored at address data.</param>
            <param name="width">Specifies the width of the texture image.<para>All implementations support 3D texture images that are at least 16 texels wide.</para></param>
            <param name="height">Specifies the height of the texture image.<para>All implementations support 3D texture images that are at least 16 texels high.</para></param>
            <param name="depth">Specifies the depth of the texture image.<para>All implementations support 3D texture images that are at least 16 texels deep.</para></param>
            <param name="border">This value must be 0.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexImage2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="internalFormat">Specifies the format of the compressed image data stored at address data.</param>
            <param name="width">Specifies the width of the texture image.<para>All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.</para></param>
            <param name="height">Specifies the height of the texture image.<para>All implementations support 2D texture and cube map texture images that are at least 16384 texels high.</para></param>
            <param name="border">This value must be 0.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexImage1D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a one-dimensional texture image in a compressed format.
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.</para></param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="internalFormat">Specifies the format of the compressed image data stored at address data.</param>
            <param name="width">Specifies the width of the texture image.<para>All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.</para></param>
            <param name="border">This value must be 0.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexImage3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
            Specify a three-dimensional texture image in a compressed format.
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_3D, GL_PROXY_TEXTURE_3D, GL_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_2D_ARRAY.</para></param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="internalFormat">Specifies the format of the compressed image data stored at address data.</param>
            <param name="width">Specifies the width of the texture image.<para>All implementations support 3D texture images that are at least 16 texels wide.</para></param>
            <param name="height">Specifies the height of the texture image.<para>All implementations support 3D texture images that are at least 16 texels high.</para></param>
            <param name="depth">Specifies the depth of the texture image.<para>All implementations support 3D texture images that are at least 16 texels deep.</para></param>
            <param name="border">This value must be 0.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexImage2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
            Specify a two-dimensional texture image in a compressed format
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="internalFormat">Specifies the format of the compressed image data stored at address data.</param>
            <param name="width">Specifies the width of the texture image.<para>All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.</para></param>
            <param name="height">Specifies the height of the texture image.<para>All implementations support 2D texture and cube map texture images that are at least 16384 texels high.</para></param>
            <param name="border">This value must be 0.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexImage1D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
            Specify a one-dimensional texture image in a compressed format.
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.</para></param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="internalFormat">Specifies the format of the compressed image data stored at address data.</param>
            <param name="width">Specifies the width of the texture image.<para>All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.</para></param>
            <param name="border">This value must be 0.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexSubImage3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a three-dimensional texture sub-image in a compressed format.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.<para>Must be GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP_ARRAY.</para></param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="zOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="height">Specifies the height of the texture sub-image.</param>
            <param name="depth">Specifies the depth of the texture sub-image.</param>
            <param name="format">Specifies the format of the compressed image data stored at address <paramref name="data"/>.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexSubImage2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a two-dimensional texture sub-image in a compressed format.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="height">Specifies the height of the texture sub-image.</param>
            <param name="format">Specifies the format of the compressed image data stored at address <paramref name="data"/>.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexSubImage1D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Specify a one-dimensional texture sub-image in a compressed format.
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.</para></param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="format">Specifies the format of the compressed image data stored at address <paramref name="data"/>.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexSubImage3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
            Specify a three-dimensional texture sub-image in a compressed format.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.<para>Must be GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP_ARRAY.</para></param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="zOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="height">Specifies the height of the texture sub-image.</param>
            <param name="depth">Specifies the depth of the texture sub-image.</param>
            <param name="format">Specifies the format of the compressed image data stored at address <paramref name="data"/>.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexSubImage2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
            Specify a two-dimensional texture sub-image in a compressed format.
            </summary>
            <param name="target">Specifies the target to which the texture is bound.</param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="yOffset">Specifies a texel offset in the y direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="height">Specifies the height of the texture sub-image.</param>
            <param name="format">Specifies the format of the compressed image data stored at address <paramref name="data"/>.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompressedTexSubImage1D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
            Specify a one-dimensional texture sub-image in a compressed format.
            </summary>
            <param name="target">Specifies the target texture.<para>Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D.</para></param>
            <param name="level">Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.</param>
            <param name="xOffset">Specifies a texel offset in the x direction within the texture array.</param>
            <param name="width">Specifies the width of the texture sub-image.</param>
            <param name="format">Specifies the format of the compressed image data stored at address <paramref name="data"/>.</param>
            <param name="imageSize">Specifies the number of unsigned bytes of image data starting at the address specified by <paramref name="data"/>.</param>
            <param name="data">Specifies a pointer to the compressed image data in memory.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBlendFuncSeparate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Specify pixel arithmetic for RGB and alpha components separately.
            </summary>
            <param name="sFactorRgb">
                Specifies how the red, green, and blue blending factors are computed.
                <para>The initial value is GL_ONE.</para>
            </param>
            <param name="dFactorRgb">
                Specifies how the red, green, and blue destination blending factors are computed.
                <para>The initial value is GL_ZERO.</para>
            </param>
            <param name="sFactorAlpha">
                Specified how the alpha source blending factor is computed.
                <para>The initial value is GL_ONE.</para>
            </param>
            <param name="dFactorAlpha">
                Specified how the alpha destination blending factor is computed.
                <para>The initial value is GL_ZERO.</para>
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteFramebuffers(System.Int32,System.UInt32*)">
            <summary>
                Delete named framebuffer objects.
            </summary>
            <param name="n">Specifies the number of framebuffer objects to be deleted.</param>
            <param name="buffers">Specifies an array of framebuffer objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteFramebuffers(System.UInt32[])">
            <summary>
                Delete named framebuffer objects.
            </summary>
            <param name="buffers">Specifies an array of framebuffer objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteFramebuffer(System.UInt32)">
            <summary>
                Deletes a single framebuffer object.
            </summary>
            <param name="buffer">A framebuffer to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindBuffer(System.Int32,System.UInt32)">
            <summary>
                Bind a named buffer object.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="buffer">Specifies the name of a buffer object.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindFramebuffer(System.UInt32)">
            <summary>
            Bind a named framebuffer object.
            </summary>
            <param name="framebuffer">Specifies the name of a framebuffer object.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindRenderbuffer(System.UInt32)">
            <summary>
            Bind a named renderbuffer object.
            </summary>
            <param name="renderbuffer">Specifies the name of a renderbuffer object.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteBuffer(System.UInt32)">
            <summary>
                Deletes a single buffer object.
            </summary>
            <param name="buffer">A buffer to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteRenderbuffer(System.UInt32)">
            <summary>
                Deletes a single renderbuffer object.
            </summary>
            <param name="renderbuffer">A renderbuffer to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteRenderbuffers(System.Int32,System.UInt32*)">
            <summary>
                Delete named renderbuffer objects.
            </summary>
            <param name="n">Specifies the number of renderbuffer objects to be deleted.</param>
            <param name="buffers">Specifies an array of renderbuffer objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteRenderbuffers(System.UInt32[])">
            <summary>
                Delete named renderbuffer objects.
            </summary>
            <param name="buffers">Specifies an array of renderbuffer objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteBuffers(System.Int32,System.UInt32*)">
            <summary>
                Delete named buffer objects.
            </summary>
            <param name="n">Specifies the number of buffer objects to be deleted.</param>
            <param name="buffers">Specifies an array of buffer objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteBuffers(System.UInt32[])">
            <summary>
                Delete named buffer objects.
            </summary>
            <param name="buffers">Specifies an array of buffer objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenFramebuffers(System.Int32,System.UInt32*)">
            <summary>
                Generate framebuffer object names.
            </summary>
            <param name="n">Specifies the number of framebuffer object names to be generated.</param>
            <param name="buffers">Specifies an array in which the generated framebuffer object names are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenFramebuffer">
            <summary>
                Generate a single framebuffer object name.
            </summary>
            <returns>The framebuffer object name.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenFramebuffers(System.Int32)">
            <summary>
                Generate framebuffer object names.
            </summary>
            <param name="n">Specifies the number of framebuffer object names to be generated.</param>
            <returns>An array of generated framebuffer object names.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenRenderbuffers(System.Int32,System.UInt32*)">
            <summary>
                Generate renderbuffer object names.
            </summary>
            <param name="n">Specifies the number of renderbuffer object names to be generated.</param>
            <param name="buffers">Specifies an array in which the generated renderbuffer object names are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenRenderbuffer">
            <summary>
                Generate a single renderbuffer object name.
            </summary>
            <returns>The renderbuffer object name.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenRenderbuffers(System.Int32)">
            <summary>
                Generate renderbuffer object names.
            </summary>
            <param name="n">Specifies the number of renderbuffer object names to be generated.</param>
            <returns>An array of generated renderbuffer object names.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenBuffers(System.Int32,System.UInt32*)">
            <summary>
                Generate buffer object names.
            </summary>
            <param name="n">Specifies the number of buffer object names to be generated.</param>
            <param name="buffers">Specifies an array in which the generated buffer object names are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenBuffer">
            <summary>
                Generate a single buffer object name.
            </summary>
            <returns>The buffer object name.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenBuffers(System.Int32)">
            <summary>
                Generate buffer object names.
            </summary>
            <param name="n">Specifies the number of buffer object names to be generated.</param>
            <returns>An array of generated buffer object names.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsBuffer(System.UInt32)">
            <summary>
            Determine if a name corresponds to a buffer object.
            </summary>
            <param name="buffer">Specifies a value that may be the name of a buffer object.</param>
            <returns><c>true</c> if object is a buffer, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsFramebuffer(System.UInt32)">
            <summary>
            Determine if a name corresponds to a framebuffer object.
            </summary>
            <param name="framebuffer">Specifies a value that may be the name of a framebuffer object.</param>
            <returns><c>true</c> if value is a framebuffer object, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsRenderbuffer(System.UInt32)">
            <summary>
            Determine if a name corresponds to a renderbuffer object.
            </summary>
            <param name="renderbuffer">Specifies a value that may be the name of a renderbuffer object.</param>
            <returns><c>true</c> if object is a renderbuffer, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenSamplers(System.Int32,System.UInt32*)">
            <summary>
                Generate sampler object names.
            </summary>
            <param name="count">Specifies the number of sampler object names to generate.</param>
            <param name="samplers">Specifies an array in which the generated sampler object names are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenSamplers(System.Int32)">
            <summary>
                Generate sampler object names.
            </summary>
            <param name="count">Specifies the number of sampler object names to generate.</param>
            <returns>An array containing the generated sampler object names.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenSampler">
            <summary>
                Generate a single sampler object name.
            </summary>
            <returns>The generated sampler object name.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsSampler(System.UInt32)">
            <summary>
                Determine if a name corresponds to a sampler object.
            </summary>
            <param name="sampler">Specifies a value that may be the name of a sampler object.</param>
            <returns><c>true</c> if object is a sampler object, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteSamplers(System.UInt32[])">
            <summary>
                Delete named sampler objects.
            </summary>
            <param name="samplers">Specifies an array of sampler objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteSamplers(System.Int32,System.UInt32*)">
            <summary>
                Delete named sampler objects.
            </summary>
            <param name="count">Specifies the number of sampler objects to be deleted.</param>
            <param name="samplers">Specifies an array of sampler objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteSampler(System.UInt32)">
            <summary>
                Delete a single named sampler object.
            </summary>
            <param name="sampler">Sampler object to delete.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindSampler(System.UInt32,System.UInt32)">
            <summary>
                Bind a named sampler to a texturing target.
            </summary>
            <param name="unit">Specifies the index of the texture unit to which the sampler is bound.</param>
            <param name="sampler">Specifies the name of a sampler.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFramebufferTexture1D(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">Specifies the target to which the framebuffer is bound.</param>
            <param name="attachment">Specifies the attachment point of the framebuffer.</param>
            <param name="texTarget">Specifies what type of texture is expected in the texture parameter, or for cube map textures, which face is to be attached.</param>
            <param name="texture">Specifies the name of an existing texture object to attach.</param>
            <param name="level">Specifies the mipmap level of the texture object to attach.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFramebufferTexture2D(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">Specifies the target to which the framebuffer is bound.</param>
            <param name="attachment">Specifies the attachment point of the framebuffer.</param>
            <param name="texTarget">Specifies what type of texture is expected in the texture parameter, or for cube map textures, which face is to be attached.</param>
            <param name="texture">Specifies the name of an existing texture object to attach.</param>
            <param name="level">Specifies the mipmap level of the texture object to attach.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFramebufferTexture3D(System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">Specifies the target to which the framebuffer is bound.</param>
            <param name="attachment">Specifies the attachment point of the framebuffer.</param>
            <param name="texTarget">Specifies what type of texture is expected in the texture parameter, or for cube map textures, which face is to be attached.</param>
            <param name="texture">Specifies the name of an existing texture object to attach.</param>
            <param name="level">Specifies the mipmap level of the texture object to attach.</param>
            <param name="zOffset">The offset on the z-axis.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCheckFramebufferStatus(System.Int32)">
            <summary>
                Check the completeness status of a framebuffer.
            </summary>
            <param name="target">Specify the target to which the framebuffer is bound to check.</param>
            <returns></returns> 
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClearBufferiv(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">Specify the buffer to clear.</param>
            <param name="drawbuffer">Specify a particular draw buffer to clear.</param>
            <param name="value">The value or values to clear the buffer to.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClearBufferuiv(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">Specify the buffer to clear.</param>
            <param name="drawbuffer">Specify a particular draw buffer to clear.</param>
            <param name="value">The value or values to clear the buffer to.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClearBufferfv(System.Int32,System.Int32,System.Single[])">
            <summary>
            Clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">Specify the buffer to clear.</param>
            <param name="drawbuffer">Specify a particular draw buffer to clear.</param>
            <param name="value">The value or values to clear the buffer to.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClearBufferiv(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">Specify the buffer to clear.</param>
            <param name="drawbuffer">Specify a particular draw buffer to clear.</param>
            <param name="value">A pointer to the value or values to clear the buffer to.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClearBufferuiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">Specify the buffer to clear.</param>
            <param name="drawbuffer">Specify a particular draw buffer to clear.</param>
            <param name="value">A pointer to the value or values to clear the buffer to.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClearBufferfv(System.Int32,System.Int32,System.Single*)">
            <summary>
            Clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">Specify the buffer to clear.</param>
            <param name="drawbuffer">Specify a particular draw buffer to clear.</param>
            <param name="value">A pointer to the value or values to clear the buffer to.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glClearBufferfi(System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            Clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">Specify the buffer to clear.</param>
            <param name="drawbuffer">Specify a particular draw buffer to clear.</param>
            <param name="depth">The value to clear the depth buffer to.</param>
            <param name="stencil">The value to clear the stencil buffer to.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glAttachShader(System.UInt32,System.UInt32)">
            <summary>
            Attaches a shader object to a program object.
            </summary>
            <param name="program">Specifies the program object to which a shader object will be attached.</param>
            <param name="shader">Specifies the shader object that is to be attached.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindBufferBase(System.Int32,System.UInt32,System.UInt32)">
            <summary>
                Bind a buffer object to an indexed buffer target.
            </summary>
            <param name="target">
                Specify the target of the bind operation
                <para>
                    Must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or
                    GL_SHADER_STORAGE_BUFFER.
                </para>
            </param>
            <param name="index">Specify the index of the binding point within the array specified by target.</param>
            <param name="buffer">The name of a buffer object to bind to the specified binding point.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glQueryCounter(System.UInt32,System.Int32)">
            <summary>
                Record the GL time into a query object after all previous commands have reached the GL server but have not yet
                necessarily executed.
            </summary>
            <param name="id">Specify the name of a query object into which to record the GL time.</param>
            <param name="target">Specify the counter to query. must be GL_TIMESTAMP.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSampleMaski(System.UInt32,System.UInt32)">
            <summary>
                Set the value of a sub-word of the sample mask.
            </summary>
            <param name="maskNumber">Specifies which 32-bit sub-word of the sample mask to update.</param>
            <param name="mask">Specifies the new value of the mask sub-word.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetFragDataIndex(System.UInt32,System.String)">
            <summary>
                Query the bindings of color indices to user-defined varying out variables.
            </summary>
            <param name="program">The name of the program containing varying out variable whose binding to query.</param>
            <param name="name">The name of the user-defined varying out variable whose index to query.</param>
            <returns>
                The index of the fragment color to which the variable name was bound when the program object program was last
                linked, ot <c>-1</c> if an error occured.
            </returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBeginTransformFeedback(System.Int32)">
            <summary>
            Start transform feedback operation.
            </summary>
            <param name="primitiveMode">Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glEndTransformFeedback">
            <summary>
            End transform feedback operation.
            </summary>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glEnablei(System.Int32,System.UInt32)">
            <summary>
            Enable or disable server-side GL capabilities.
            </summary>
            <param name="target">Specifies a symbolic constant indicating a GL capability.</param>
            <param name="index">Specifies the index of the switch to enable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDisablei(System.Int32,System.UInt32)">
            <summary>
            Disable server-side GL capabilities
            </summary>
            <param name="target">Specifies a symbolic constant indicating a GL capability.</param>
            <param name="index">Specifies the index of the switch to disable</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsEnabledi(System.Int32,System.UInt32)">
            <summary>
            Test whether a capability is enabled.
            </summary>
            <param name="target">Specifies a symbolic constant indicating a GL capability.</param>
            <param name="index">Specifies the index of the capability.</param>
            <returns><c>true</c> if capability is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCompileShader(System.UInt32)">
            <summary>
                Compiles a shader object.
            </summary>
            <param name="shader">Specifies the shader object to be compiled.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCreateProgram">
            <summary>
                Creates a shader program object.
            </summary>
            <returns>An empty program object, a non-zero value by which it can be referenced.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCreateShader(System.Int32)">
            <summary>
                Creates a shader object.
            </summary>
            <param name="type">Specifies the type of shader to be created.<para>Must be one of GL_VERTEX_SHADER, GL_GEOMETRY_SHADER, or GL_FRAGMENT_SHADER.</para></param>
            <returns>An empty shader object, a non-zero value by which it can be referenced.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsProgram(System.UInt32)">
            <summary>
                Determines if a name corresponds to a program object.
            </summary>
            <param name="program">The potential program object to check.</param>
            <returns><c>true</c> if object is a program, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsShader(System.UInt32)">
            <summary>
                Determines if a name corresponds to a shader object.
            </summary>
            <param name="shader">The potential program object to check.</param>
            <returns><c>true</c> if object is a shader, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteProgram(System.UInt32)">
            <summary>
                Deletes a program object.
            </summary>
            <param name="program">Specifies the program object to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteShader(System.UInt32)">
            <summary>
                Deletes a shader object.
            </summary>
            <param name="shader">Specifies the shader object to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDetachShader(System.UInt32,System.UInt32)">
            <summary>
                Detaches a shader object from a program object to which it is attached.
            </summary>
            <param name="program">Specifies the program object from which to detach the shader object.</param>
            <param name="shader">Specifies the shader object to be detached.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUseProgram(System.UInt32)">
            <summary>
                Installs a program object as part of current rendering state.
            </summary>
            <param name="program">Specifies the handle of the program object whose executables are to be used as part of current rendering state.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glLinkProgram(System.UInt32)">
            <summary>
                Links a program object.
            </summary>
            <param name="program">Specifies the handle of the program object to be linked.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glShaderSource(System.UInt32,System.Int32,System.Byte**,System.Int32*)">
            <summary>
                 Replaces the source code in a shader object.
            </summary>
            <param name="shader">Specifies the handle of the shader object whose source code is to be replaced.</param>
            <param name="count">Specifies the number of elements in the string and length arrays.</param>
            <param name="str">Specifies an array of pointers to strings containing the source code to be loaded into the shader.</param>
            <param name="length">Specifies an array of string lengths.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glShaderSource(System.UInt32,System.String)">
            <summary>
                 Replaces the source code in a shader object.
            </summary>
            <param name="shader">Specifies the handle of the shader object whose source code is to be replaced.</param>
            <param name="source">The source code to be loaded into the shader.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformLocation(System.UInt32,System.Byte*)">
            <summary>
                 Returns the location of a uniform variable.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="name">Points to a null terminated string containing the name of the uniform variable whose location is to be queried.</param>
            <returns>An integer that represents the location of a specific uniform variable within a program object.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformLocation(System.UInt32,System.Byte[])">
            <summary>
                 Returns the location of a uniform variable.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="name">A array of bytes containing the name of the uniform variable whose location is to be queried.</param>
            <returns>An integer that represents the location of a specific uniform variable within a program object.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformLocation(System.UInt32,System.String)">
            <summary>
                 Returns the location of a uniform variable.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="name">A string containing the name of the uniform variable whose location is to be queried.</param>
            <returns>An integer that represents the location of a specific uniform variable within a program object.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetShaderSource(System.UInt32,System.Int32)">
            <summary>
                Returns the source code string from a shader object.
            </summary>
            <param name="shader">Specifies the shader object to be queried.</param>
            <param name="bufSize">Specifies the size of the character buffer for storing the returned source code string.</param>
            <returns>The shader source, or <c>null</c> if an error occured.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetProgramInfoLog(System.UInt32,System.Int32)">
            <summary>
                Returns the information log for a program object.
            </summary>
            <param name="program">Specifies the program object whose information log is to be queried.</param>
            <param name="bufSize">Specifies the size of the character buffer for storing the returned information log.</param>
            <returns>The info log, or <c>null</c> if an error occured.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetShaderInfoLog(System.UInt32,System.Int32)">
            <summary>
                Returns the information log for a shader object.
            </summary>
            <param name="shader">Specifies the shader object whose information log is to be queried.</param>
            <param name="bufSize">Specifies the size of the character buffer for storing the returned information log.</param>
            <returns>The info log, or <c>null</c> if an error occured.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glValidateProgram(System.UInt32)">
            <summary>
                Validates a program object.
            </summary>
            <param name="program">Specifies the handle of the program object to be validated.</param>
            <seealso cref="M:Emission.Graphics.GL.GL.glGetProgramInfoLog(System.UInt32,System.Int32)"/>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiDrawElements(System.Int32,System.Int32*,System.Int32,System.Void**,System.Int32)">
            <summary>
                Render multiple sets of primitives by specifying indices of array data elements.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Points to an array of the elements counts.</param>
            <param name="type">
                Specifies the type of the values in indices.
                <para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para>
            </param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
            <param name="drawCount">Specifies the size of the count and indices arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiDrawElements(System.Int32,System.Int32[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
                Render multiple sets of primitives by specifying indices of array data elements.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Points to an array of the elements counts.</param>
            <param name="type">
                Specifies the type of the values in indices.
                <para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para>
            </param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
            <param name="drawCount">Specifies the size of the count and indices arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiDrawArrays(System.Int32,System.Int32*,System.Int32*,System.Int32)">
            <summary>
                Render multiple sets of primitives from array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="first">Points to an array of starting indices in the enabled arrays.</param>
            <param name="count">Points to an array of the number of indices to be rendered.</param>
            <param name="drawCount">Specifies the size of the first and count.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiDrawArrays(System.Int32,System.Int32[],System.Int32[],System.Int32)">
            <summary>
                Render multiple sets of primitives from array data.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="first">An array of starting indices in the enabled arrays.</param>
            <param name="count">An array of the number of indices to be rendered.</param>
            <param name="drawCount">Specifies the size of the first and count.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFramebufferTexture(System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
                Attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">Specifies the target to which the framebuffer is bound.</param>
            <param name="attachment">Specifies the attachment point of the framebuffer.</param>
            <param name="texture">Specifies the name of an existing texture object to attach.</param>
            <param name="level">Specifies the mipmap level of the texture object to attach.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFramebufferRenderbuffer(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
                Attach a renderbuffer object to a framebuffer object.
            </summary>
            <param name="target">Specifies the framebuffer target. The symbolic constant must be GL_FRAMEBUFFER.</param>
            <param name="attachment">
                Specifies the attachment point to which renderbuffer should be attached.
                <para>
                    Must be one of the following symbolic constants: GL_COLOR_ATTACHMENT0, GL_DEPTH_ATTACHMENT, or
                    GL_STENCIL_ATTACHMENT.
                </para>
            </param>
            <param name="renderbufferTarget">Specifies the renderbuffer target. The symbolic constant must be GL_RENDERBUFFER.</param>
            <param name="renderbuffer">Specifies the renderbuffer object that is to be attached.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFramebufferRenderbuffer(System.Int32,System.UInt32)">
            <summary>
                Attach a renderbuffer object to a framebuffer object.
            </summary>
            <param name="attachment">
                Specifies the attachment point to which renderbuffer should be attached.
                <para>
                    Must be one of the following symbolic constants: GL_COLOR_ATTACHMENT0, GL_DEPTH_ATTACHMENT, or
                    GL_STENCIL_ATTACHMENT.
                </para>
            </param>
            <param name="renderbuffer">Specifies the renderbuffer object that is to be attached.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBufferSubData(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Returns a subset of a buffer object's data store.
            </summary>
            <param name="target">SSpecifies the target to which the buffer object is bound.</param>
            <param name="offset">
                Specifies the offset into the buffer object's data store from which data will be returned,
                measured in bytes.
            </param>
            <param name="size">Specifies the size in bytes of the data store region being returned.</param>
            <param name="data">Specifies a pointer to the location where buffer object data is returned.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBufferSubData(System.Int32,System.Int64,System.Int64,System.IntPtr)">
            <summary>
                Returns a subset of a buffer object's data store.
            </summary>
            <param name="target">SSpecifies the target to which the buffer object is bound.</param>
            <param name="offset">
                Specifies the offset into the buffer object's data store from which data will be returned,
                measured in bytes.
            </param>
            <param name="size">Specifies the size in bytes of the data store region being returned.</param>
            <param name="data">Specifies a pointer to the location where buffer object data is returned.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBufferSubData(System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Returns a subset of a buffer object's data store.
            </summary>
            <param name="target">SSpecifies the target to which the buffer object is bound.</param>
            <param name="offset">
                Specifies the offset into the buffer object's data store from which data will be returned,
                measured in bytes.
            </param>
            <param name="size">Specifies the size in bytes of the data store region being returned.</param>
            <param name="data">Specifies a pointer to the location where buffer object data is returned.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBufferSubData(System.Int32,System.Int64,System.Int64,System.Void*)">
            <summary>
                Returns a subset of a buffer object's data store.
            </summary>
            <param name="target">SSpecifies the target to which the buffer object is bound.</param>
            <param name="offset">
                Specifies the offset into the buffer object's data store from which data will be returned,
                measured in bytes.
            </param>
            <param name="size">Specifies the size in bytes of the data store region being returned.</param>
            <param name="data">Specifies a pointer to the location where buffer object data is returned.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMapBufferRange(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
                Map all or part of a buffer object's data store into the client's address space.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="offset">Specifies the starting offset within the buffer of the range to be mapped.</param>
            <param name="length">Specifies the length of the range to be mapped.</param>
            <param name="access">Specifies a combination of access flags indicating the desired access to the mapped range.</param>
            <returns>A pointer to the beginning of the mapped range.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMapBufferRange(System.Int32,System.Int64,System.Int64,System.UInt32)">
            <summary>
                Map all or part of a buffer object's data store into the client's address space.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="offset">Specifies the starting offset within the buffer of the range to be mapped.</param>
            <param name="length">Specifies the length of the range to be mapped.</param>
            <param name="access">Specifies a combination of access flags indicating the desired access to the mapped range.</param>
            <returns>A pointer to the beginning of the mapped range.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFlushMappedBufferRange(System.Int32,System.Int32,System.Int32)">
            <summary>
                Indicate modifications to a range of a mapped buffer.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="offset">Specifies the start of the buffer subrange, in basic machine units.</param>
            <param name="length">Specifies the length of the buffer subrange, in basic machine units.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFlushMappedBufferRange(System.Int32,System.Int64,System.Int64)">
            <summary>
                Indicate modifications to a range of a mapped buffer.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="offset">Specifies the start of the buffer subrange, in basic machine units.</param>
            <param name="length">Specifies the length of the buffer subrange, in basic machine units.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glFramebufferTextureLayer(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
                Attach a single layer of a texture to a framebuffer.
            </summary>
            <param name="target">
                Specifies the framebuffer target.
                <para>
                    Must be GL_DRAW_FRAMEBUFFER, GL_READ_FRAMEBUFFER, or GL_FRAMEBUFFER. GL_FRAMEBUFFER is equivalent to
                    GL_DRAW_FRAMEBUFFER.
                </para>
            </param>
            <param name="attachment">
                Specifies the attachment point of the framebuffer.
                <para>Must be GL_COLOR_ATTACHMENTi, GL_DEPTH_ATTACHMENT, GL_STENCIL_ATTACHMENT or GL_DEPTH_STENCIL_ATTACHMENT.</para>
            </param>
            <param name="texture">
                Specifies the texture object to attach to the framebuffer attachment point named by
                <paramref name="attachment" />.
            </param>
            <param name="level">Specifies the mipmap level of texture to attach.</param>
            <param name="layer">Specifies the layer of texture to attach.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindBufferRange(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
                Bind a range within a buffer object to an indexed buffer target.
            </summary>
            <param name="target">
                Specify the target of the bind operation
                <para>
                    Must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or
                    GL_SHADER_STORAGE_BUFFER.
                </para>
            </param>
            <param name="index">Specify the index of the binding point within the array specified by target.</param>
            <param name="buffer">The name of a buffer object to bind to the specified binding point.</param>
            <param name="offset">The starting offset in basic machine units into the buffer object buffer.</param>
            <param name="size">
                The amount of data in machine units that can be read from the buffer object while used as an indexed
                target.
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindBufferRange(System.Int32,System.UInt32,System.UInt32,System.Int64,System.Int64)">
            <summary>
                Bind a range within a buffer object to an indexed buffer target.
            </summary>
            <param name="target">
                Specify the target of the bind operation
                <para>
                    Must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or
                    GL_SHADER_STORAGE_BUFFER.
                </para>
            </param>
            <param name="index">Specify the index of the binding point within the array specified by target.</param>
            <param name="buffer">The name of a buffer object to bind to the specified binding point.</param>
            <param name="offset">The starting offset in basic machine units into the buffer object buffer.</param>
            <param name="size">
                The amount of data in machine units that can be read from the buffer object while used as an indexed
                target.
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBlitFramebuffer(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
                Copy a block of pixels from one framebuffer object to another.
            </summary>
            <param name="srcX0">The lower left corner of the read buffer on the x-axis.</param>
            <param name="srcY0">The lower left corner of the read buffer on the y-axis.</param>
            <param name="srcX1">The upper right corner of the read buffer on the x-axis.</param>
            <param name="srcY1">The upper right corner of the read buffer on the y-axis.</param>
            <param name="dstX0">The lower left corner of the write buffer on the x-axis.</param>
            <param name="dstY0">The lower left corner of the write buffer on the y-axis.</param>
            <param name="dstX1">The upper right corner of the write buffer on the x-axis.</param>
            <param name="dstY1">The upper right corner of the write buffer on the y-axis.</param>
            <param name="mask">The bitwise OR of the flags indicating which buffers are to be copied.<para>The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT.</para></param>
            <param name="filter">Specifies the interpolation to be applied if the image is stretched.<para>Must be GL_NEAREST or GL_LINEAR.</para></param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glRenderbufferStorage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Establish data storage, format and dimensions of a renderbuffer object's image.
            </summary>
            <param name="target">Specify the target of the bind operation.<para>Must be GL_RENDERBUFFER.</para></param>
            <param name="internalFormat">Specifies the internal format to use for the renderbuffer object's image.</param>
            <param name="width">Specifies the width of the renderbuffer, in pixels.</param>
            <param name="height">Specifies the height of the renderbuffer, in pixels.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glColorP3ui(System.Int32,System.UInt32)">
            <summary>
                Set the current color as a packed value.
            </summary>
            <param name="type">Specifies the data type of each color components.</param>
            <param name="color">The packed color value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glColorP3uiv(System.Int32,System.UInt32*)">
            <summary>
                Set the current color as a packed value.
            </summary>
            <param name="type">Specifies the data type of each color components.</param>
            <param name="color">The packed color value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glColorP4ui(System.Int32,System.UInt32)">
            <summary>
                Set the current color as a packed value.
            </summary>
            <param name="type">Specifies the data type of each color components.</param>
            <param name="color">The packed color value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glColorP4uiv(System.Int32,System.UInt32*)">
            <summary>
                Set the current color as a packed value.
            </summary>
            <param name="type">Specifies the data type of each color components.</param>
            <param name="color">The packed color value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glColorP3uiv(System.Int32,System.UInt32[])">
            <summary>
                Set the current color as a packed value.
            </summary>
            <param name="type">Specifies the data type of each color components.</param>
            <param name="color">The packed color value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glColorP4uiv(System.Int32,System.UInt32[])">
            <summary>
                Set the current color as a packed value.
            </summary>
            <param name="type">Specifies the data type of each color components.</param>
            <param name="color">The packed color value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSecondaryColorP3ui(System.Int32,System.UInt32)">
            <summary>
                Set the current color as a packed value.
            </summary>
            <param name="type">Specifies the data type of each color components.</param>
            <param name="color">The packed color value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSecondaryColorP3uiv(System.Int32,System.UInt32[])">
            <summary>
                Set the current color as a packed value.
            </summary>
            <param name="type">Specifies the data type of each color components.</param>
            <param name="color">The packed color value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSecondaryColorP3uiv(System.Int32,System.UInt32*)">
            <summary>
                Set the current color as a packed value.
            </summary>
            <param name="type">Specifies the data type of each color components.</param>
            <param name="color">The packed color value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBufferSubData(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Updates a subset of a buffer object's data store.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="offset">
                Specifies the offset into the buffer object's data store where data replacement will begin,
                measured in bytes.
            </param>
            <param name="size">Specifies the size in bytes of the data store region being replaced.</param>
            <param name="data">Specifies a pointer to the new data that will be copied into the data store.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBufferSubData(System.Int32,System.Int64,System.Int64,System.IntPtr)">
            <summary>
                Updates a subset of a buffer object's data store.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="offset">
                Specifies the offset into the buffer object's data store where data replacement will begin,
                measured in bytes.
            </param>
            <param name="size">Specifies the size in bytes of the data store region being replaced.</param>
            <param name="data">Specifies a pointer to the new data that will be copied into the data store.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBufferSubData(System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
                Updates a subset of a buffer object's data store.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="offset">
                Specifies the offset into the buffer object's data store where data replacement will begin,
                measured in bytes.
            </param>
            <param name="size">Specifies the size in bytes of the data store region being replaced.</param>
            <param name="data">Specifies a pointer to the new data that will be copied into the data store.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBufferSubData(System.Int32,System.Int64,System.Int64,System.Void*)">
            <summary>
                Updates a subset of a buffer object's data store.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="offset">
                Specifies the offset into the buffer object's data store where data replacement will begin,
                measured in bytes.
            </param>
            <param name="size">Specifies the size in bytes of the data store region being replaced.</param>
            <param name="data">Specifies a pointer to the new data that will be copied into the data store.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glNormalP3ui(System.Int32,System.UInt32)">
            <summary>
                Set the current normal vector.
            </summary>
            <param name="type">The type.</param>
            <param name="coords">The coords.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glNormalP3uiv(System.Int32,System.UInt32*)">
            <summary>
                Set the current normal vector.
            </summary>
            <param name="type">The type.</param>
            <param name="coords">The coords.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glNormalP3uiv(System.Int32,System.UInt32[])">
            <summary>
                Set the current normal vector.
            </summary>
            <param name="type">The type.</param>
            <param name="coords">The coords.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindFragDataLocation(System.UInt32,System.UInt32,System.String)">
            <summary>
            Bind a user-defined varying out variable to a fragment shader color number.
            </summary>
            <param name="program">The name of the program containing varying out variable whose binding to modify.</param>
            <param name="color">The color number to bind the user-defined varying out variable to.</param>
            <param name="name">The name of the user-defined varying out variable whose binding to modify.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetFragDataLocation(System.UInt32,System.String)">
            <summary>
            Query the bindings of color numbers to user-defined varying out variables.
            </summary>
            <param name="program">The name of the program containing varying out variable whose binding to query.</param>
            <param name="name">The name of the user-defined varying out variable whose binding to query.</param>
            <returns>The requested location, or <c>-1</c> if error occured.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetAttribLocation(System.UInt32,System.String)">
            <summary>
            Returns the location of an attribute variable.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="name">A string containing the name of the attribute variable whose location is to be queried.</param>
            <returns>The location of the attribute, or <c>-1</c> if an error occured.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetAttachedShaders(System.UInt32,System.Int32,System.Int32*,System.UInt32*)">
            <summary>
            Returns the handles of the shader objects attached to a program object.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="maxCount">Specifies the size of the array for storing the returned object names.</param>
            <param name="count">Returns the number of names actually returned in shaders.</param>
            <param name="shaders">Specifies an array that is used to return the names of attached shader objects.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetAttachedShaders(System.UInt32,System.Int32)">
            <summary>
            Returns the handles of the shader objects attached to a program object.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="maxCount">Specifies the size of the array for storing the returned object names.</param>
            <returns>An array containing the attached shaders of the specified program.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindAttribLocation(System.UInt32,System.UInt32,System.String)">
            <summary>
            Associates a generic vertex attribute index with a named attribute variable.
            </summary>
            <param name="program">Specifies the handle of the program object in which the association is to be made.</param>
            <param name="index">Specifies the index of the generic vertex attribute to be bound.</param>
            <param name="name">Specifies a string containing the name of the vertex shader attribute variable to which index is to be bound.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetActiveAttrib(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Returns information about an active attribute variable for the specified program object.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="index">Specifies the index of the attribute variable to be queried.</param>
            <param name="bufSize">Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.</param>
            <param name="length">Returns the number of characters actually written by OpenGL in the string.</param>
            <param name="size">Returns the size of the attribute variable.</param>
            <param name="type">Returns the data type of the attribute variable.</param>
            <param name="name">The name of the attribute variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetActiveUniform(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Returns information about an active uniform variable for the specified program object.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="index">Specifies the index of the uniform variable to be queried.</param>
            <param name="bufSize">Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.</param>
            <param name="length">Returns the number of characters actually written by OpenGL in the string.</param>
            <param name="size">Returns the size of the uniform variable.</param>
            <param name="type">Returns the data type of the uniform variable.</param>
            <param name="name">Returns a string containing the name of the uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenerateMipmap(System.Int32)">
            <summary>
            Generate mipmaps for a specified texture object.
            </summary>
            <param name="target">Specifies the target to which the texture object is bound.<para>Must be one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_MAP, or GL_TEXTURE_CUBE_MAP_ARRAY.</para></param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBooleani_v(System.Int32,System.UInt32,System.Boolean*)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="target">Specifies the parameter value to be returned.</param>
            <param name="index">Specifies the index of the particular element being queried.</param>
            <param name="data">Returns the value or values of the specified parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetIntegeri_v(System.Int32,System.UInt32,System.Int32*)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="target">Specifies the parameter value to be returned.</param>
            <param name="index">Specifies the index of the particular element being queried.</param>
            <param name="data">Returns the value or values of the specified parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetInteger64i_v(System.Int32,System.UInt32,System.Int64*)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="target">Specifies the parameter value to be returned.</param>
            <param name="index">Specifies the index of the particular element being queried.</param>
            <param name="data">Returns the value or values of the specified parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBooleani(System.Int32,System.UInt32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="target">Specifies the parameter value to be returned.</param>
            <param name="index">Specifies the index of the particular element being queried.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetIntegeri(System.Int32,System.UInt32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="target">Specifies the parameter value to be returned.</param>
            <param name="index">Specifies the index of the particular element being queried.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetInteger64i(System.Int32,System.UInt32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="target">Specifies the parameter value to be returned.</param>
            <param name="index">Specifies the index of the particular element being queried.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBooleani_v(System.Int32,System.UInt32,System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="target">Specifies the parameter value to be returned.</param>
            <param name="index">Specifies the index of the particular element being queried.</param>
            <param name="count">The number of values to get.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetIntegeri_v(System.Int32,System.UInt32,System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="target">Specifies the parameter value to be returned.</param>
            <param name="index">Specifies the index of the particular element being queried.</param>
            <param name="count">The number of values to get.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetInteger64i_v(System.Int32,System.UInt32,System.Int32)">
            <summary>
            Return the value or values of a selected parameter.
            </summary>
            <param name="target">Specifies the parameter value to be returned.</param>
            <param name="index">Specifies the index of the particular element being queried.</param>
            <param name="count">The number of values to get.</param>
            <returns>The request parameter value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glIsVertexArray(System.UInt32)">
            <summary>
                Determine if a name corresponds to a vertex array object.
            </summary>
            <param name="array">Specifies a value that may be the name of a vertex array object.</param>
            <returns><c>true</c> if value is a vertex array, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenVertexArrays(System.Int32,System.UInt32*)">
            <summary>
                Generate vertex array object names.
            </summary>
            <param name="n">Specifies the number of vertex array object names to generate.</param>
            <param name="arrays">Specifies an array in which the generated vertex array object names are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenVertexArrays(System.Int32)">
            <summary>
                Generate vertex array object names.
            </summary>
            <param name="n">Specifies the number of vertex array object names to generate.</param>
            <returns>An array of generated vertex array object names.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGenVertexArray">
            <summary>
                Generates a single vertex array object name.
            </summary>
            <returns>A generated vertex array name.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindVertexArray(System.UInt32)">
            <summary>
                Bind a vertex array object.
            </summary>
            <param name="array">Specifies the name of the vertex array to bind.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteVertexArrays(System.Int32,System.UInt32*)">
            <summary>
                Delete vertex array objects.
            </summary>
            <param name="n">Specifies the number of vertex array objects to be deleted.</param>
            <param name="arrays">Specifies the address of an array containing the n names of the objects to be deleted.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteVertexArrays(System.UInt32[])">
            <summary>
                Delete vertex array objects.
            </summary>
            <param name="arrays">An array of vertex array objects to delete.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDeleteVertexArray(System.UInt32)">
            <summary>
                Deletes a single vertex array object.
            </summary>
            <param name="array">The array to delete.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPointParameterf(System.Int32,System.Single)">
            <summary>
            Specify point parameters.
            </summary>
            <param name="paramName">Specifies a single-valued point parameter.<para>GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.</para></param>
            <param name="param">Specifies the value that paramName will be set to.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPointParameteri(System.Int32,System.Int32)">
            <summary>
            Specify point parameters.
            </summary>
            <param name="paramName">Specifies a single-valued point parameter.<para>GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.</para></param>
            <param name="param">Specifies the value that paramName will be set to.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPointParameterfv(System.Int32,System.Single*)">
            <summary>
            Specify point parameters.
            </summary>
            <param name="paramName">Specifies a single-valued point parameter.<para>GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.</para></param>
            <param name="args">A pointer to an array where the value or values to be assigned to paramName are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPointParameteriv(System.Int32,System.Int32*)">
            <summary>
            Specify point parameters.
            </summary>
            <param name="paramName">Specifies a single-valued point parameter.<para>GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.</para></param>
            <param name="args">A pointer to an array where the value or values to be assigned to paramName are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPointParameterfv(System.Int32,System.Single[])">
            <summary>
            Specify point parameters.
            </summary>
            <param name="paramName">Specifies a single-valued point parameter.<para>GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.</para></param>
            <param name="args">An array of the values to be assigned.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPointParameteriv(System.Int32,System.Int32[])">
            <summary>
            Specify point parameters.
            </summary>
            <param name="paramName">Specifies a single-valued point parameter.<para>GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted.</para></param>
            <param name="args">An array of the values to be assigned.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSamplerParameteri(System.UInt32,System.Int32,System.Int32)">
            <summary>
                Set sampler parameters.
            </summary>
            <param name="sampler">Specifies the sampler object whose parameter to modify.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="param">The value to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSamplerParameterf(System.UInt32,System.Int32,System.Single)">
            <summary>
                Set sampler parameters.
            </summary>
            <param name="sampler">Specifies the sampler object whose parameter to modify.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="param">The value to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSamplerParameteriv(System.UInt32,System.Int32,System.Int32[])">
            <summary>
                Set sampler parameters.
            </summary>
            <param name="sampler">Specifies the sampler object whose parameter to modify.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="param">The value to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSamplerParameterfv(System.UInt32,System.Int32,System.Single[])">
            <summary>
                Set sampler parameters.
            </summary>
            <param name="sampler">Specifies the sampler object whose parameter to modify.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="param">The value to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSamplerParameteriv(System.UInt32,System.Int32,System.Int32*)">
            <summary>
                Set sampler parameters.
            </summary>
            <param name="sampler">Specifies the sampler object whose parameter to modify.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="param">The value to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSamplerParameterfv(System.UInt32,System.Int32,System.Single*)">
            <summary>
                Set sampler parameters.
            </summary>
            <param name="sampler">Specifies the sampler object whose parameter to modify.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="param">The value to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSamplerParameterIiv(System.UInt32,System.Int32,System.Int32*)">
            <summary>
                Set sampler parameters.
            </summary>
            <param name="sampler">Specifies the sampler object whose parameter to modify.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="param">The value to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSamplerParameterIuiv(System.UInt32,System.Int32,System.UInt32*)">
            <summary>
                Set sampler parameters.
            </summary>
            <param name="sampler">Specifies the sampler object whose parameter to modify.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="param">The value to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSamplerParameterIiv(System.UInt32,System.Int32,System.Int32[])">
            <summary>
                Set sampler parameters.
            </summary>
            <param name="sampler">Specifies the sampler object whose parameter to modify.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="param">The value to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glSamplerParameterIuiv(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
                Set sampler parameters.
            </summary>
            <param name="sampler">Specifies the sampler object whose parameter to modify.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="param">The value to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform1f(System.Int32,System.Single)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform2f(System.Int32,System.Single,System.Single)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
            <param name="v1">The second value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform3f(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
            <param name="v1">The second value.</param>
            <param name="v2">The third value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform4f(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
            <param name="v1">The second value.</param>
            <param name="v2">The third value.</param>
            <param name="v3">The fourth value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform1ui(System.Int32,System.UInt32)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform2ui(System.Int32,System.UInt32,System.UInt32)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
            <param name="v1">The second value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform3ui(System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
            <param name="v1">The second value.</param>
            <param name="v2">The third value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform4ui(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
            <param name="v1">The second value.</param>
            <param name="v2">The third value.</param>
            <param name="v3">The fourth value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform1i(System.Int32,System.Int32)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform2i(System.Int32,System.Int32,System.Int32)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
            <param name="v1">The second value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform3i(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
            <param name="v1">The second value.</param>
            <param name="v2">The third value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform4i(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="v0">The first value.</param>
            <param name="v1">The second value.</param>
            <param name="v2">The third value.</param>
            <param name="v3">The fourth value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform1fv(System.Int32,System.Int32,System.Single*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform2fv(System.Int32,System.Int32,System.Single*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform3fv(System.Int32,System.Int32,System.Single*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform4fv(System.Int32,System.Int32,System.Single*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform1fv(System.Int32,System.Int32,System.Single[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform2fv(System.Int32,System.Int32,System.Single[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform3fv(System.Int32,System.Int32,System.Single[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform4fv(System.Int32,System.Int32,System.Single[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform1iv(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform2iv(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform3iv(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform4iv(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform1iv(System.Int32,System.Int32,System.Int32[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform2iv(System.Int32,System.Int32,System.Int32[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform3iv(System.Int32,System.Int32,System.Int32[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform4iv(System.Int32,System.Int32,System.Int32[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform1uiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform2uiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform3uiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform4uiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform1uiv(System.Int32,System.Int32,System.UInt32[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform2uiv(System.Int32,System.Int32,System.UInt32[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform3uiv(System.Int32,System.Int32,System.UInt32[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniform4uiv(System.Int32,System.Int32,System.UInt32[])">
            <summary>
                Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform value to be modified.</param>
            <param name="count">Specifies the number of elements that are to be modified.</param>
            <param name="value">The values to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP1ui(System.Int32,System.Int32,System.UInt32)">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP2ui(System.Int32,System.Int32,System.UInt32)">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP3ui(System.Int32,System.Int32,System.UInt32)">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP4ui(System.Int32,System.Int32,System.UInt32)">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP1uiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP2uiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP3uiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP4uiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP1uiv(System.Int32,System.Int32,System.UInt32[])">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP2uiv(System.Int32,System.Int32,System.UInt32[])">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP3uiv(System.Int32,System.Int32,System.UInt32[])">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiTexCoordP4uiv(System.Int32,System.Int32,System.UInt32[])">
            <summary>
                Set the current texture coordinates.
            </summary>
            <param name="texture">
                Specifies the texture unit whose coordinates should be modified.
                <para>
                    The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be
                    one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent
                    value.
                </para>
            </param>
            <param name="type">The data type.</param>
            <param name="coords">The value of the coordinates to set.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP1ui(System.Int32,System.UInt32)">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">A packed value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP1uiv(System.Int32,System.UInt32*)">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">Specifies a pointer to an array of packed elements.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP1uiv(System.Int32,System.UInt32[])">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">An array of packed elements.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP2ui(System.Int32,System.UInt32)">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">A packed value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP2uiv(System.Int32,System.UInt32*)">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">An array of packed elements.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP2uiv(System.Int32,System.UInt32[])">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">An array of packed elements.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP3ui(System.Int32,System.UInt32)">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">A packed value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP3uiv(System.Int32,System.UInt32*)">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">An array of packed elements.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP3uiv(System.Int32,System.UInt32[])">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">An array of packed elements.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP4ui(System.Int32,System.UInt32)">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">A packed value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP4uiv(System.Int32,System.UInt32*)">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">An array of packed elements.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexCoordP4uiv(System.Int32,System.UInt32[])">
            <summary>
            Set the current texture coordinates.
            </summary>
            <param name="type">Specifies the texture unit whose coordinates should be modified.<para>The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.</para></param>
            <param name="coords">An array of packed elements.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib1d(System.UInt32,System.Double)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib1f(System.UInt32,System.Single)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib1s(System.UInt32,System.Int16)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib2d(System.UInt32,System.Double,System.Double)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib2f(System.UInt32,System.Single,System.Single)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib2s(System.UInt32,System.Int16,System.Int16)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib3d(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib3f(System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib3s(System.UInt32,System.Int16,System.Int16,System.Int16)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nub(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
            <param name="w">The fourth value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4d(System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
            <param name="w">The fourth value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4f(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
            <param name="w">The fourth value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4s(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
            <param name="w">The fourth value.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDisableVertexAttribArray(System.UInt32)">
            <summary>
                Disable a generic vertex attribute array.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be disabled.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glEnableVertexAttribArray(System.UInt32)">
            <summary>
                Enable a generic vertex attribute array.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be disabled.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glPrimitiveRestartIndex(System.UInt32)">
            <summary>
                Specify the primitive restart index.
            </summary>
            <param name="index">Specifies the value to be interpreted as the primitive restart index.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib1dv(System.UInt32,System.Double*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib1fv(System.UInt32,System.Single*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib1sv(System.UInt32,System.Int16*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib2dv(System.UInt32,System.Double*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib2fv(System.UInt32,System.Single*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib2sv(System.UInt32,System.Int16*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib3dv(System.UInt32,System.Double*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib3fv(System.UInt32,System.Single*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib3sv(System.UInt32,System.Int16*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4bv(System.UInt32,System.SByte*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4dv(System.UInt32,System.Double*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4fv(System.UInt32,System.Single*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4iv(System.UInt32,System.Int32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4sv(System.UInt32,System.Int16*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4ubv(System.UInt32,System.Byte*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4uiv(System.UInt32,System.UInt32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4usv(System.UInt32,System.UInt16*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib1dv(System.UInt32,System.Double[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib1fv(System.UInt32,System.Single[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib1sv(System.UInt32,System.Int16[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib2dv(System.UInt32,System.Double[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib2fv(System.UInt32,System.Single[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib2sv(System.UInt32,System.Int16[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib3dv(System.UInt32,System.Double[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib3fv(System.UInt32,System.Single[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib3sv(System.UInt32,System.Int16[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4bv(System.UInt32,System.SByte[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4dv(System.UInt32,System.Double[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4fv(System.UInt32,System.Single[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4iv(System.UInt32,System.Int32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4sv(System.UInt32,System.Int16[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4ubv(System.UInt32,System.Byte[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4uiv(System.UInt32,System.UInt32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4usv(System.UInt32,System.UInt16[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nbv(System.UInt32,System.SByte*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Niv(System.UInt32,System.Int32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nsv(System.UInt32,System.Int16*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nubv(System.UInt32,System.Byte*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nuiv(System.UInt32,System.UInt32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nusv(System.UInt32,System.UInt16*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nbv(System.UInt32,System.SByte[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Niv(System.UInt32,System.Int32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nsv(System.UInt32,System.Int16[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nubv(System.UInt32,System.Byte[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nuiv(System.UInt32,System.UInt32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttrib4Nusv(System.UInt32,System.UInt16[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be scaled to normalized values.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribPointer(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Void*)">
            <summary>
                Define an array of generic vertex attribute data
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="size">
                Specifies the number of components per generic vertex attribute.
                <para>Must be 1, 2, 3, 4, or <see cref="F:Emission.Graphics.GL.GL.GL_BGRA" />.</para>
            </param>
            <param name="type">Specifies the data type of each component in the array.</param>
            <param name="normalized">
                Specifies whether fixed-point data values should be normalized (true) or converted directly as
                fixed-point values (false) when they are accessed.
            </param>
            <param name="stride">
                Specifies the byte offset between consecutive generic vertex attributes.
                <para>If stride is 0, the generic vertex attributes are understood to be tightly packed in the array.</para>
            </param>
            <param name="pointer">
                Specifies a offset of the first component of the first generic vertex attribute in the array in
                the data store of the buffer currently bound to the GL_ARRAY_BUFFER target.
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribPointer(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Int32,System.IntPtr)">
            <summary>
                Define an array of generic vertex attribute data
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="size">
                Specifies the number of components per generic vertex attribute.
                <para>Must be 1, 2, 3, 4, or <see cref="F:Emission.Graphics.GL.GL.GL_BGRA" />.</para>
            </param>
            <param name="type">Specifies the data type of each component in the array.</param>
            <param name="normalized">
                Specifies whether fixed-point data values should be normalized (true) or converted directly as
                fixed-point values (false) when they are accessed.
            </param>
            <param name="stride">
                Specifies the byte offset between consecutive generic vertex attributes.
                <para>If stride is 0, the generic vertex attributes are understood to be tightly packed in the array.</para>
            </param>
            <param name="pointer">
                Specifies a offset of the first component of the first generic vertex attribute in the array in
                the data store of the buffer currently bound to the GL_ARRAY_BUFFER target.
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSamplerParameteriv(System.UInt32,System.Int32,System.Int32)">
            <summary>
                Return sampler parameter value(s).
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="count">The number of elements in the sampler parameters.</param>
            <returns>An array of the sampler parameter values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSamplerParameterIiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
                Return sampler parameter value(s).
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="count">The number of elements in the sampler parameters.</param>
            <returns>An array of the sampler parameter values.</returns>
            <remarks>Values are interpreted as fully signed or unsigned.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSamplerParameterfv(System.UInt32,System.Int32,System.Int32)">
            <summary>
                Return sampler parameter value(s).
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="count">The number of elements in the sampler parameters.</param>
            <returns>An array of the sampler parameter values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.GetSamplerParameterIuiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
                Return sampler parameter value(s).
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="count">The number of elements in the sampler parameters.</param>
            <returns>An array of the sampler parameter values.</returns>
            <remarks>Values are interpreted as fully signed or unsigned.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSamplerParameteriv(System.UInt32,System.Int32)">
            <summary>
                Return a single sampler parameter value.
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <returns>An single sampler parameter values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSamplerParameterIiv(System.UInt32,System.Int32)">
            <summary>
                Return a single sampler parameter value.
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <returns>An single sampler parameter values.</returns>
            <remarks>Values are interpreted as fully signed or unsigned.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSamplerParameterfv(System.UInt32,System.Int32)">
            <summary>
                Return a single sampler parameter value.
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <returns>An single sampler parameter values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.GetSamplerParameterIui(System.UInt32,System.Int32)">
            <summary>
                Return a single sampler parameter value.
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <returns>An single sampler parameter values.</returns>
            <remarks>Values are interpreted as fully signed or unsigned.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSamplerParameteriv(System.UInt32,System.Int32,System.Int32*)">
            <summary>
                Return sampler parameter value(s).
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="args">Returns the sampler parameters.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSamplerParameterIiv(System.UInt32,System.Int32,System.Int32*)">
            <summary>
                Return sampler parameter value(s).
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="args">Returns the sampler parameters.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSamplerParameterfv(System.UInt32,System.Int32,System.Single*)">
            <summary>
                Return sampler parameter value(s).
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="args">Returns the sampler parameters.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSamplerParameterIuiv(System.UInt32,System.Int32,System.UInt32*)">
            <summary>
                Return sampler parameter value(s).
            </summary>
            <param name="sampler">Specifies name of the sampler object from which to retrieve parameters.</param>
            <param name="paramName">Specifies the symbolic name of a sampler parameter.</param>
            <param name="args">Returns the sampler parameters.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI1i(System.UInt32,System.Int32)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI1ui(System.UInt32,System.UInt32)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI2i(System.UInt32,System.Int32,System.Int32)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI2ui(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI3i(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI3ui(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4i(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
            <param name="w">The fourth value.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4ui(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <param name="z">The third value.</param>
            <param name="w">The fourth value.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI1iv(System.UInt32,System.Int32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI1uiv(System.UInt32,System.UInt32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI2iv(System.UInt32,System.Int32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI2uiv(System.UInt32,System.UInt32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI3iv(System.UInt32,System.Int32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI3uiv(System.UInt32,System.UInt32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4iv(System.UInt32,System.Int32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4uiv(System.UInt32,System.UInt32*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4bv(System.UInt32,System.SByte*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4sv(System.UInt32,System.Int16*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4ubv(System.UInt32,System.Byte*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4usv(System.UInt32,System.UInt16*)">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="v">A pointer to the vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI1iv(System.UInt32,System.Int32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI1uiv(System.UInt32,System.UInt32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI2iv(System.UInt32,System.Int32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI2uiv(System.UInt32,System.UInt32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI3iv(System.UInt32,System.Int32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI3uiv(System.UInt32,System.UInt32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4iv(System.UInt32,System.Int32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4uiv(System.UInt32,System.UInt32[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4bv(System.UInt32,System.SByte[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4sv(System.UInt32,System.Int16[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4ubv(System.UInt32,System.Byte[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribI4usv(System.UInt32,System.UInt16[])">
            <summary>
                Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="value">The vertex data.</param>
            <remarks>Values will be extended to fully signed or unsigned integers.</remarks>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribDivisor(System.UInt32,System.UInt32)">
            <summary>
                Modify the rate at which generic vertex attributes advance during instanced rendering.
            </summary>
            <param name="index">Specify the index of the generic vertex attribute.</param>
            <param name="divisor">
                Specify the number of instances that will pass between updates of the generic attribute at slot
                <paramref name="index" />.
            </param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexP2uiv(System.Int32,System.UInt32*)">
            <summary>
                Specified a packed vertex.
            </summary>
            <param name="type">Specify the vertex data type.</param>
            <param name="value">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexP3uiv(System.Int32,System.UInt32*)">
            <summary>
                Specified a packed vertex.
            </summary>
            <param name="type">Specify the vertex data type.</param>
            <param name="value">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexP4uiv(System.Int32,System.UInt32*)">
            <summary>
                Specified a packed vertex.
            </summary>
            <param name="type">Specify the vertex data type.</param>
            <param name="value">A pointer to the vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexP2uiv(System.Int32,System.UInt32[])">
            <summary>
                Specified a packed vertex.
            </summary>
            <param name="type">Specify the vertex data type.</param>
            <param name="value">A array of vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexP3uiv(System.Int32,System.UInt32[])">
            <summary>
                Specified a packed vertex.
            </summary>
            <param name="type">Specify the vertex data type.</param>
            <param name="value">A array of vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexP4uiv(System.Int32,System.UInt32[])">
            <summary>
                Specified a packed vertex.
            </summary>
            <param name="type">Specify the vertex data type.</param>
            <param name="value">A array of vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexP2ui(System.Int32,System.UInt32)">
            <summary>
                Specified a packed vertex.
            </summary>
            <param name="type">Specify the vertex data type.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexP3ui(System.Int32,System.UInt32)">
            <summary>
                Specified a packed vertex.
            </summary>
            <param name="type">Specify the vertex data type.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexP4ui(System.Int32,System.UInt32)">
            <summary>
                Specified a packed vertex.
            </summary>
            <param name="type">Specify the vertex data type.</param>
            <param name="value">The vertex data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP1uiv(System.UInt32,System.Int32,System.Boolean,System.UInt32*)">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">A pointer to the new packed values to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP2uiv(System.UInt32,System.Int32,System.Boolean,System.UInt32*)">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">A pointer to the new packed values to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP3uiv(System.UInt32,System.Int32,System.Boolean,System.UInt32*)">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">A pointer to the new packed values to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP4uiv(System.UInt32,System.Int32,System.Boolean,System.UInt32*)">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">A pointer to the new packed values to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP1uiv(System.UInt32,System.Int32,System.Boolean,System.UInt32[])">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">The new packed values to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP2uiv(System.UInt32,System.Int32,System.Boolean,System.UInt32[])">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">The new packed values to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP3uiv(System.UInt32,System.Int32,System.Boolean,System.UInt32[])">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">The new packed values to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP4uiv(System.UInt32,System.Int32,System.Boolean,System.UInt32[])">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">The new packed values to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP1ui(System.UInt32,System.Int32,System.Boolean,System.UInt32)">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">Specifies the new packed value to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP2ui(System.UInt32,System.Int32,System.Boolean,System.UInt32)">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">Specifies the new packed value to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP3ui(System.UInt32,System.Int32,System.Boolean,System.UInt32)">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">Specifies the new packed value to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribP4ui(System.UInt32,System.Int32,System.Boolean,System.UInt32)">
            <summary>
                Specifies the value of a generic packed vertex attribute.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="type">Specifies the type of packing used on the data.</param>
            <param name="normalized">
                <c>true</c>  values are to be converted to floating point values by normalizing.
                <para>
                    Otherwise, they are converted directly to floating-point values. If type indicates a floating-point format,
                    then normalized value must be <c>false</c>.
                </para>
            </param>
            <param name="value">Specifies the new packed value to be used for the specified vertex attribute.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexBuffer(System.Int32,System.Int32,System.UInt32)">
            <summary>
                Attach a buffer object's data store to a buffer texture object
            </summary>
            <param name="target">Specifies the target to which the texture is bound.<para>Must be GL_TEXTURE_BUFFER.</para></param>
            <param name="internalFormat">Specifies the internal format of the data in the store belonging to buffer.</param>
            <param name="buffer">Specifies the name of the buffer object whose storage to attach to the active buffer texture.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetActiveUniformBlockiv(System.UInt32,System.UInt32,System.Int32,System.Int32*)">
            <summary>
            Query information about an active uniform block.
            </summary>
            <param name="program">Specifies the name of a program containing the uniform block.</param>
            <param name="uniformBlockIndex">Specifies the index of the uniform block within program.</param>
            <param name="pname">Specifies the name of the parameter to query.</param>
            <param name="args">Specifies the address of a variable to receive the result of the query.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetActiveUniformBlockiv(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Query information about an active uniform block.
            </summary>
            <param name="program">Specifies the name of a program containing the uniform block.</param>
            <param name="uniformBlockIndex">Specifies the index of the uniform block within program.</param>
            <param name="pname">Specifies the name of the parameter to query.</param>
            <param name="count">Specifies the number of values to receive.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetActiveUniformBlockName(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Retrieve the name of an active uniform block.
            </summary>
            <param name="program">Specifies the name of a program containing the uniform block.</param>
            <param name="uniformBlockIndex">Specifies the index of the uniform block within program.</param>
            <param name="bufSize">Specifies the size of the buffer addressed by uniformBlockName.</param>
            <returns>The name of the uniform block.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindFragDataLocationIndexed(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Bind a user-defined varying out variable to a fragment shader color number and index.
            </summary>
            <param name="program">The name of the program containing varying out variable whose binding to modify.</param>
            <param name="colorNumber">The color number to bind the user-defined varying out variable to.</param>
            <param name="index">The index of the color input to bind the user-defined varying out variable to.</param>
            <param name="name">The name of the user-defined varying out variable whose binding to modify.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetQueryObjectiv(System.UInt32,System.Int32,System.Int32*)">
            <summary>
            Return parameters of a query object.
            </summary>
            <param name="id">Specifies the name of a query object.</param>
            <param name="pname">Specifies the symbolic name of a query object parameter.<para>Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.</para></param>
            <param name="args">Returns the requested data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetQueryObjectuiv(System.UInt32,System.Int32,System.UInt32*)">
            <summary>
            Return parameters of a query object.
            </summary>
            <param name="id">Specifies the name of a query object.</param>
            <param name="pname">Specifies the symbolic name of a query object parameter.<para>Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.</para></param>
            <param name="args">Returns the requested data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetQueryObjecti64v(System.UInt32,System.Int32,System.Int64*)">
            <summary>
            Return parameters of a query object.
            </summary>
            <param name="id">Specifies the name of a query object.</param>
            <param name="pname">Specifies the symbolic name of a query object parameter.<para>Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.</para></param>
            <param name="args">Returns the requested data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetQueryObjectui64v(System.UInt32,System.Int32,System.UInt64*)">
            <summary>
            Return parameters of a query object.
            </summary>
            <param name="id">Specifies the name of a query object.</param>
            <param name="pname">Specifies the symbolic name of a query object parameter.<para>Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.</para></param>
            <param name="args">Returns the requested data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetQueryObjectui64v(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return parameters of a query object.
            </summary>
            <param name="id">Specifies the name of a query object.</param>
            <param name="pname">Specifies the symbolic name of a query object parameter.<para>Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.</para></param>
            <param name="count">The number of values to receive.</param>
            <returns>The retrieved values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetQueryObjecti64v(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return parameters of a query object.
            </summary>
            <param name="id">Specifies the name of a query object.</param>
            <param name="pname">Specifies the symbolic name of a query object parameter.<para>Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.</para></param>
            <param name="count">The number of values to receive.</param>
            <returns>The retrieved values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetQueryObjectuiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return parameters of a query object.
            </summary>
            <param name="id">Specifies the name of a query object.</param>
            <param name="pname">Specifies the symbolic name of a query object parameter.<para>Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.</para></param>
            <param name="count">The number of values to receive.</param>
            <returns>The retrieved values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetQueryObjectiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return parameters of a query object.
            </summary>
            <param name="id">Specifies the name of a query object.</param>
            <param name="pname">Specifies the symbolic name of a query object parameter.<para>Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.</para></param>
            <param name="count">The number of values to receive.</param>
            <returns>The retrieved values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetActiveUniformName(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Query the name of an active uniform.
            </summary>
            <param name="program">Specifies the program containing the active uniform index <paramref name="uniformIndex"/>.</param>
            <param name="uniformIndex">Specifies the index of the active uniform whose name to query.</param>
            <param name="bufSize">Specifies the size of the buffer for the string.</param>
            <returns>The name of the active uniform.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glBindFramebuffer(System.Int32,System.UInt32)">
            <summary>
            Bind a framebuffer to a framebuffer target.
            </summary>
            <param name="target">Specifies the framebuffer target of the binding operation.</param>
            <param name="framebuffer">Specifies the name of the framebuffer object to bind.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformBlockBinding(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Assign a binding point to an active uniform block.
            </summary>
            <param name="program">The name of a program object containing the active uniform block whose binding to assign.</param>
            <param name="uniformBlockIndex">The index of the active uniform block within program whose binding to assign.</param>
            <param name="uniformBlockBinding">Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetProgramiv(System.UInt32,System.Int32,System.Int32*)">
            <summary>
            Return a parameter from a program object.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="pname">Specifies the object parameter.</param>
            <param name="args">Returns the requested object parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetProgramiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return a parameter from a program object.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="pname">Specifies the object parameter.</param>
            <param name="count">The number of parameters to return..</param>
            <returns>The requested parameters.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetShaderiv(System.UInt32,System.Int32,System.Int32*)">
            <summary>
            Return a parameter from a shader object.
            </summary>
            <param name="shader">Specifies the shader object to be queried.</param>
            <param name="pname">Specifies the object parameter.<para>Must be GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, or GL_SHADER_SOURCE_LENGTH.</para></param>
            <param name="args">Returns the requested object parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetShaderiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return a parameter from a shader object.
            </summary>
            <param name="shader">Specifies the shader object to be queried.</param>
            <param name="pname">Specifies the object parameter.<para>Must be GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS, GL_INFO_LOG_LENGTH, or GL_SHADER_SOURCE_LENGTH.</para></param>
            <param name="count">The number of parameters to return..</param>
            <returns>The requested parameters.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetQueryiv(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Return parameters of a query object target.
            </summary>
            <param name="target">Specifies a query object target.</param>
            <param name="pname">Specifies the symbolic name of a query object target parameter.<para>Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.</para></param>
            <param name="args">Returns the requested data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetQueryiv(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return parameters of a query object target.
            </summary>
            <param name="target">Specifies a query object target.</param>
            <param name="pname">Specifies the symbolic name of a query object target parameter.<para>Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS.</para></param>
            <param name="count">The number of parameters to return..</param>
            <returns>The requested parameters.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformfv(System.UInt32,System.Int32,System.Single*)">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="location">Specifies the location of the uniform variable to be queried.</param>
            <param name="args">Returns the value of the specified uniform variable</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformfv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="location">Specifies the location of the uniform variable to be queried.</param>
            <param name="count">The number of values to retrieve.</param>
            <returns>The requested values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformuiv(System.UInt32,System.Int32,System.UInt32*)">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="location">Specifies the location of the uniform variable to be queried.</param>
            <param name="args">Returns the value of the specified uniform variable</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformuiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="location">Specifies the location of the uniform variable to be queried.</param>
            <param name="count">The number of values to retrieve.</param>
            <returns>The requested values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformiv(System.UInt32,System.Int32,System.Int32*)">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="location">Specifies the location of the uniform variable to be queried.</param>
            <param name="args">Returns the value of the specified uniform variable</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="location">Specifies the location of the uniform variable to be queried.</param>
            <param name="count">The number of values to retrieve.</param>
            <returns>The requested values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCopyBufferSubData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy all or part of the data store of a buffer object to the data store of another buffer object.
            </summary>
            <param name="readTarget">Specifies the target to which the source buffer object is bound.</param>
            <param name="writeTarget">Specifies the target to which the destination buffer object is bound.</param>
            <param name="readOffset">Specifies the offset, in basic machine units, within the data store of the source buffer object at which data will be read.</param>
            <param name="writeOffset">Specifies the offset, in basic machine units, within the data store of the destination buffer object at which data will be written.</param>
            <param name="size">Specifies the size, in basic machine units, of the data to be copied from the source buffer object to the destination buffer object.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glCopyBufferSubData(System.Int32,System.Int32,System.Int64,System.Int64,System.Int64)">
            <summary>
            Copy all or part of the data store of a buffer object to the data store of another buffer object.
            </summary>
            <param name="readTarget">Specifies the target to which the source buffer object is bound.</param>
            <param name="writeTarget">Specifies the target to which the destination buffer object is bound.</param>
            <param name="readOffset">Specifies the offset, in basic machine units, within the data store of the source buffer object at which data will be read.</param>
            <param name="writeOffset">Specifies the offset, in basic machine units, within the data store of the destination buffer object at which data will be written.</param>
            <param name="size">Specifies the size, in basic machine units, of the data to be copied from the source buffer object to the destination buffer object.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribdv(System.UInt32,System.Int32,System.Double*)">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be queried.</param>
            <param name="pname">Specifies the symbolic name of the vertex attribute parameter to be queried. </param>
            <param name="args">Returns the requested data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribfv(System.UInt32,System.Int32,System.Single*)">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be queried.</param>
            <param name="pname">Specifies the symbolic name of the vertex attribute parameter to be queried. </param>
            <param name="args">Returns the requested data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribiv(System.UInt32,System.Int32,System.Int32*)">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be queried.</param>
            <param name="pname">Specifies the symbolic name of the vertex attribute parameter to be queried. </param>
            <param name="args">Returns the requested data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribIiv(System.UInt32,System.Int32,System.Int32*)">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be queried.</param>
            <param name="pname">Specifies the symbolic name of the vertex attribute parameter to be queried. </param>
            <param name="args">Returns the requested data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribIuiv(System.UInt32,System.Int32,System.UInt32*)">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be queried.</param>
            <param name="pname">Specifies the symbolic name of the vertex attribute parameter to be queried. </param>
            <param name="args">Returns the requested data.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribdv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be queried.</param>
            <param name="pname">Specifies the symbolic name of the vertex attribute parameter to be queried. </param>
            <param name="count">The number of values to retrieve.</param>
            <returns>The requested values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribfv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be queried.</param>
            <param name="pname">Specifies the symbolic name of the vertex attribute parameter to be queried. </param>
            <param name="count">The number of values to retrieve.</param>
            <returns>The requested values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be queried.</param>
            <param name="pname">Specifies the symbolic name of the vertex attribute parameter to be queried. </param>
            <param name="count">The number of values to retrieve.</param>
            <returns>The requested values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribIiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be queried.</param>
            <param name="pname">Specifies the symbolic name of the vertex attribute parameter to be queried. </param>
            <param name="count">The number of values to retrieve.</param>
            <returns>The requested values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribIuiv(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be queried.</param>
            <param name="pname">Specifies the symbolic name of the vertex attribute parameter to be queried. </param>
            <param name="count">The number of values to retrieve.</param>
            <returns>The requested values.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribIPointer(System.UInt32,System.Int32,System.Int32,System.Int32,System.Void*)">
            <summary>
            Define an array of generic vertex attribute data.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="size">Specifies the number of components per generic vertex attribute.<para>Must be 1, 2, 3, 4 or GL_BGRA.</para></param>
            <param name="type">Specifies the data type of each component in the array.</param>
            <param name="stride">Specifies the byte offset between consecutive generic vertex attributes.<para>If stride is 0, the generic vertex attributes are understood to be tightly packed in the array.</para>The initial value is 0.</param>
            <param name="pointer">Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target.<para>The initial value is 0.</para></param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glVertexAttribIPointer(System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Define an array of generic vertex attribute data.
            </summary>
            <param name="index">Specifies the index of the generic vertex attribute to be modified.</param>
            <param name="size">Specifies the number of components per generic vertex attribute.<para>Must be 1, 2, 3, 4 or GL_BGRA.</para></param>
            <param name="type">Specifies the data type of each component in the array.</param>
            <param name="stride">Specifies the byte offset between consecutive generic vertex attributes.<para>If stride is 0, the generic vertex attributes are understood to be tightly packed in the array.</para>The initial value is 0.</param>
            <param name="pointer">Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target.<para>The initial value is 0.</para></param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexImage2DMultisample(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Establish the data storage, format, dimensions, and number of samples of a multisample texture's image
            </summary>
            <param name="target">Specifies the target of the operation.<para>Must be GL_TEXTURE_2D_MULTISAMPLE or GL_PROXY_TEXTURE_2D_MULTISAMPLE.</para></param>
            <param name="samples">The number of samples in the multisample texture's image.</param>
            <param name="internalformat">The internal format to be used to store the multisample texture's image.<para>Must specify a color-renderable, depth-renderable, or stencil-renderable format.</para></param>
            <param name="width">The width of the multisample texture's image, in texels.</param>
            <param name="height">The height of the multisample texture's image, in texels.</param>
            <param name="fixedsamplelocations">Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexImage3DMultisample(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Establish the data storage, format, dimensions, and number of samples of a multisample texture's image
            </summary>
            <param name="target">Specifies the target of the operation.<para>Must be GL_TEXTURE_2D_MULTISAMPLE_ARRAY or GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY.</para></param>
            <param name="samples">The number of samples in the multisample texture's image.</param>
            <param name="internalformat">The internal format to be used to store the multisample texture's image.<para>Must specify a color-renderable, depth-renderable, or stencil-renderable format.</para></param>
            <param name="width">The width of the multisample texture's image, in texels.</param>
            <param name="height">The height of the multisample texture's image, in texels.</param>
            <param name="depth">The depth of the multisample texture's image, in texels.</param>
            <param name="fixedsamplelocations">Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix2fv(System.Int32,System.Int32,System.Boolean,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="value">Specifies a pointer to an array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix3fv(System.Int32,System.Int32,System.Boolean,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="value">Specifies a pointer to an array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix4fv(System.Int32,System.Int32,System.Boolean,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="value">Specifies a pointer to an array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix2x3fv(System.Int32,System.Int32,System.Boolean,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="value">Specifies a pointer to an array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix3x2fv(System.Int32,System.Int32,System.Boolean,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="value">Specifies a pointer to an array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix2x4fv(System.Int32,System.Int32,System.Boolean,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="value">Specifies a pointer to an array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix4x2fv(System.Int32,System.Int32,System.Boolean,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="value">Specifies a pointer to an array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix3x4fv(System.Int32,System.Int32,System.Boolean,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="value">Specifies a pointer to an array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix4x3fv(System.Int32,System.Int32,System.Boolean,System.Single*)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="value">Specifies a pointer to an array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix2fv(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="values">An array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix3fv(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="values">An array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix4fv(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="values">An array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix2x3fv(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="values">An array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix3x2fv(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="values">An array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix2x4fv(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="values">An array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix4x2fv(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="values">An array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix3x4fv(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="values">An array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glUniformMatrix4x3fv(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">Specifies the location of the uniform variable to be modified.</param>
            <param name="count">Specifies the number of matrices that are to be modified.</param>
            <param name="transpose">Specifies whether to transpose the matrix as the values are loaded into the uniform variable.</param>
            <param name="values">An array of count values that will be used to update the specified uniform variable.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexParameterIiv(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Set texture parameters.
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="pname">Specifies the symbolic name of a single-valued texture parameter.</param>
            <param name="args">Specifies the value of the parameters..</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexParameterIuiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Set texture parameters.
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="pname">Specifies the symbolic name of a single-valued texture parameter.</param>
            <param name="args">Specifies the value of the parameters..</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexParameterIiv(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Set texture parameters.
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="pname">Specifies the symbolic name of a single-valued texture parameter.</param>
            <param name="args">Specifies the value of the parameters..</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTexParameterIuiv(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Set texture parameters.
            </summary>
            <param name="target">Specifies the target texture.</param>
            <param name="pname">Specifies the symbolic name of a single-valued texture parameter.</param>
            <param name="args">Specifies the value of the parameters..</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glRenderbufferStorageMultisample(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Establish data storage, format, dimensions and sample count of a renderbuffer object's image.
            </summary>
            <param name="target">Specifies a binding target of the allocation.<para>Must be GL_RENDERBUFFER.</para></param>
            <param name="samples">Specifies the number of samples to be used for the renderbuffer object's storage.</param>
            <param name="internalformat">Specifies the internal format to use for the renderbuffer object's image.</param>
            <param name="width">Specifies the width of the renderbuffer, in pixels.</param>
            <param name="height">Specifies the height of the renderbuffer, in pixels.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawArraysInstanced(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw multiple instances of a range of elements.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="first">Specifies the starting index in the enabled arrays.</param>
            <param name="count">Specifies the number of indices to be rendered.</param>
            <param name="instanceCount">Specifies the number of instances of the specified range of indices to be rendered.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetVertexAttribPointerv(System.UInt32,System.Int32)">
            <summary>
            Return the address of the specified generic vertex attribute pointer.
            </summary>
            <param name="index">Specifies the generic vertex attribute parameter to be returned.</param>
            <param name="pname">Specifies the symbolic name of the generic vertex attribute parameter to be returned.<para>Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.</para></param>
            <returns>The pointer value.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBufferPointerv(System.Int32,System.Int32)">
            <summary>
            Return the pointer to a mapped buffer object's data store
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="pname">Specifies the name of the pointer to be returned.<para>Must be GL_BUFFER_MAP_POINTER.</para></param>
            <returns>Returns the pointer value specified by pname.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexParameterIiv(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Return texture parameter values.
            </summary>
            <param name="target">Specifies the symbolic name of the target texture.</param>
            <param name="pname">Specifies the symbolic name of a texture parameter.</param>
            <param name="args">Returns the texture parameters.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexParameterIuiv(System.Int32,System.Int32,System.UInt32*)">
            <summary>
            Return texture parameter values.
            </summary>
            <param name="target">Specifies the symbolic name of the target texture.</param>
            <param name="pname">Specifies the symbolic name of a texture parameter.</param>
            <param name="args">Returns the texture parameters.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexParameterIiv(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return texture parameter values.
            </summary>
            <param name="target">Specifies the symbolic name of the target texture.</param>
            <param name="pname">Specifies the symbolic name of a texture parameter.</param>
            <param name="count">The number of values to retrieve.</param>
            <returns>The texture parameters.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTexParameterIuiv(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return texture parameter values.
            </summary>
            <param name="target">Specifies the symbolic name of the target texture.</param>
            <param name="pname">Specifies the symbolic name of a texture parameter.</param>
            <param name="count">The number of values to retrieve.</param>
            <returns>The texture parameters.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformBlockIndex(System.UInt32,System.String)">
            <summary>
            Retrieve the index of a named uniform block.
            </summary>
            <param name="program">Specifies the name of a program containing the uniform block.</param>
            <param name="uniformBlockName">The name of the uniform block whose index to retrieve.</param>
            <returns>The index of a uniform block within program.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetActiveUniformsiv(System.UInt32,System.Int32,System.UInt32*,System.Int32,System.Int32*)">
            <summary>
            Returns information about several active uniform variables for the specified program object.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="uniformCount">Specifies both the number of elements in the array of indices <paramref name="uniformIndices"/> and the number of parameters written to params upon successful return.</param>
            <param name="uniformIndices">Specifies the address of an array of <paramref name="uniformCount"/> integers containing the indices of uniforms within program whose parameter <paramref name="pname"/> should be queried.</param>
            <param name="pname">Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of <paramref name="args"/>.</param>
            <param name="args">Specifies the address of an array of <paramref name="uniformCount"/> integers which are to receive the value of <paramref name="pname"/> for each uniform in <paramref name="uniformIndices"/>.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetActiveUniformsiv(System.UInt32,System.Int32,System.UInt32[],System.Int32,System.Int32[])">
            <summary>
            Returns information about several active uniform variables for the specified program object.
            </summary>
            <param name="program">Specifies the program object to be queried.</param>
            <param name="uniformCount">Specifies both the number of elements in the array of indices <paramref name="uniformIndices"/> and the number of parameters written to params upon successful return.</param>
            <param name="uniformIndices">Specifies an array of <paramref name="uniformCount"/> integers containing the indices of uniforms within program whose parameter <paramref name="pname"/> should be queried.</param>
            <param name="pname">Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of <paramref name="args"/>.</param>
            <param name="args">Specifies an array of <paramref name="uniformCount"/> integers which are to receive the value of <paramref name="pname"/> for each uniform in <paramref name="uniformIndices"/>.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBufferParameteriv(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Return parameters of a buffer object.
            </summary>
            <param name="target">Specifies the target buffer object.<para>Must be GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER.</para></param>
            <param name="pname">Specifies the symbolic name of a buffer object parameter.<para>Must be GL_BUFFER_SIZE or GL_BUFFER_USAGE.</para></param>
            <param name="args">Returns the requested parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBufferParameteriv(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return parameters of a buffer object.
            </summary>
            <param name="target">Specifies the target buffer object.<para>Must be GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER.</para></param>
            <param name="pname">Specifies the symbolic name of a buffer object parameter.<para>Must be GL_BUFFER_SIZE or GL_BUFFER_USAGE.</para></param>
            <param name="count">The number of values to return.</param>
            <returns>The requested parameter.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSynciv(System.IntPtr,System.Int32,System.Int32,System.Int32*,System.Int32*)">
            <summary>
            Query the properties of a sync object.
            </summary>
            <param name="sync">Specifies the sync object whose properties to query.</param>
            <param name="pname">Specifies the parameter whose value to retrieve from the sync object specified in <paramref name="sync"/>.</param>
            <param name="bufSize">Specifies the size of the buffer whose address is given in <paramref name="values"/>.</param>
            <param name="length">Specifies the address of an variable to receive the number of integers placed in <paramref name="values"/>.</param>
            <param name="values">Specifies the address of an array to receive the values of the queried parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetSynciv(System.IntPtr,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Query the properties of a sync object.
            </summary>
            <param name="sync">Specifies the sync object whose properties to query.</param>
            <param name="pname">Specifies the parameter whose value to retrieve from the sync object specified in <paramref name="sync"/>.</param>
            <param name="count">The number of properties to retrieve.</param>
            <param name="length">Specifies the number of integers placed in the return value.</param>
            <returns>The specified properties.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetRenderbufferParameteriv(System.Int32,System.Int32,System.Int32*)">
            <summary>
            Return parameters of a renderbuffer object.
            </summary>
            <param name="target">Specifies the target renderbuffer object.<para>Must be GL_RENDERBUFFER.</para></param>
            <param name="pname">Specifies the symbolic name of a renderbuffer object parameter.</param>
            <param name="args">Returns the requested parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetRenderbufferParameteriv(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Return parameters of a renderbuffer object.
            </summary>
            <param name="target">Specifies the target renderbuffer object.<para>Must be GL_RENDERBUFFER.</para></param>
            <param name="pname">Specifies the symbolic name of a renderbuffer object parameter.</param>
            <param name="args">An array to write the requested parameter(s).</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetMultisamplefv(System.Int32,System.UInt32,System.Single*)">
            <summary>
            Retrieve the location of a sample.
            </summary>
            <param name="pname">Specifies the sample parameter name.<para>Must be GL_SAMPLE_POSITION.</para></param>
            <param name="index">Specifies the index of the sample whose position to query.</param>
            <param name="val">Specifies the address of an array to receive the position of the sample.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetMultisamplefv(System.Int32,System.UInt32,System.Int32)">
            <summary>
            Retrieve the location of a sample.
            </summary>
            <param name="pname">Specifies the sample parameter name.<para>Must be GL_SAMPLE_POSITION.</para></param>
            <param name="index">Specifies the index of the sample whose position to query.</param>
            <param name="count">The number of values to recieve.</param>
            <returns>The position of the sample.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsInstanced(System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
            Draw multiple instances of a set of elements.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="type">Specifies the type of the values in indices.<para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para></param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
            <param name="instanceCount">Specifies the number of instances of the specified range of indices to be rendered.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsInstanced(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Draw multiple instances of a set of elements.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The indices.</param>
            <param name="instanceCount">Specifies the number of instances of the specified range of indices to be rendered.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsInstanced(System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            Draw multiple instances of a set of elements.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The indices.</param>
            <param name="instanceCount">Specifies the number of instances of the specified range of indices to be rendered.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsInstanced(System.Int32,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Draw multiple instances of a set of elements.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The indices.</param>
            <param name="instanceCount">Specifies the number of instances of the specified range of indices to be rendered.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsBaseVertex(System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
            Render primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render. </param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="type">Specifies the type of the values in indices.<para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para></param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsBaseVertex(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Render primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render. </param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsBaseVertex(System.Int32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            Render primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render. </param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsBaseVertex(System.Int32,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Render primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render. </param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawRangeElementsBaseVertex(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Void*,System.Int32)">
            <summary>
            Render primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="start">Specifies the minimum array index contained in <paramref name="indices"/>.</param>
            <param name="end">Specifies the maximum array index contained in <paramref name="indices"/>.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="type">Specifies the type of the values in indices.<para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para></param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawRangeElementsBaseVertex(System.Int32,System.UInt32,System.UInt32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Render primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="start">Specifies the minimum array index contained in <paramref name="indices"/>.</param>
            <param name="end">Specifies the maximum array index contained in <paramref name="indices"/>.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The indices.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawRangeElementsBaseVertex(System.Int32,System.UInt32,System.UInt32,System.Int32,System.UInt16[],System.Int32)">
            <summary>
            Render primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="start">Specifies the minimum array index contained in <paramref name="indices"/>.</param>
            <param name="end">Specifies the maximum array index contained in <paramref name="indices"/>.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The indices.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawRangeElementsBaseVertex(System.Int32,System.UInt32,System.UInt32,System.Int32,System.UInt32[],System.Int32)">
            <summary>
            Render primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="start">Specifies the minimum array index contained in <paramref name="indices"/>.</param>
            <param name="end">Specifies the maximum array index contained in <paramref name="indices"/>.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The indices.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsInstancedBaseVertex(System.Int32,System.Int32,System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
            Render multiple instances of a set of primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="type">Specifies the type of the values in indices.<para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para></param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
            <param name="instanceCount">Specifies the number of instances of the indexed geometry that should be drawn.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsInstancedBaseVertex(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Render multiple instances of a set of primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The indices.</param>
            <param name="instanceCount">Specifies the number of instances of the indexed geometry that should be drawn.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsInstancedBaseVertex(System.Int32,System.Int32,System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Render multiple instances of a set of primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The indices.</param>
            <param name="instanceCount">Specifies the number of instances of the indexed geometry that should be drawn.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glDrawElementsInstancedBaseVertex(System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Render multiple instances of a set of primitives from array data with a per-element offset.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Specifies the number of elements to be rendered.</param>
            <param name="indices">The indices.</param>
            <param name="instanceCount">Specifies the number of instances of the indexed geometry that should be drawn.</param>
            <param name="baseVertex">Specifies a constant that should be added to each element of indices when choosing elements from the enabled vertex arrays.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetUniformIndex(System.UInt32,System.String)">
            <summary>
            Retrieve the index of a named uniform block.
            </summary>
            <param name="program">Specifies the name of a program containing uniforms whose indices to query.</param>
            <param name="uniformName">The names of the uniform to query.</param>
            <returns>The index of the uniform.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBufferParameteri64v(System.Int32,System.Int32,System.Int64*)">
            <summary>
            Return parameters of a buffer object.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="pname">Specifies the symbolic name of a buffer object parameter.</param>
            <param name="args">Returns the requested parameter.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetBufferParameteri64v(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return parameters of a buffer object.
            </summary>
            <param name="target">Specifies the target to which the buffer object is bound.</param>
            <param name="pname">Specifies the symbolic name of a buffer object parameter.</param>
            <param name="count">The number of parameters to retrieve.</param>
            <returns>The requested parameters.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetTransformFeedbackVarying(System.UInt32,System.UInt32,System.Int32@,System.Int32@,System.String@,System.Int32)">
            <summary>
            
            </summary>
            <param name="program">The name of the target program object.</param>
            <param name="index">The index of the varying variable whose information to retrieve.</param>
            <param name="size">The size of the varying.</param>
            <param name="type">The type of the varying.</param>
            <param name="name">The name of the varying.</param>
            <param name="bufSize">The maximum number of characters, including the null terminator, that may be written into name.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetFramebufferAttachmentParameteriv(System.Int32,System.Int32,System.Int32,System.Int32*)">
            <summary>
            Retrieve information about attachments of a framebuffer object.
            </summary>
            <param name="target">Specifies the target to which the framebuffer object is bound.</param>
            <param name="attachment">Specifies the attachment of the framebuffer object to query.</param>
            <param name="pname">Specifies the parameter of attachment to query.</param>
            <param name="args">Returns the value of parameter pname for attachment.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glGetFramebufferAttachmentParameteriv(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieve information about attachments of a framebuffer object.
            </summary>
            <param name="target">Specifies the target to which the framebuffer object is bound.</param>
            <param name="attachment">Specifies the attachment of the framebuffer object to query.</param>
            <param name="pname">Specifies the parameter of attachment to query.</param>
            <param name="count">The number of parameters to retrieve.</param>
            <returns>Returns the value of parameter pname for attachment.</returns>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glMultiDrawElementsBaseVertex(System.Int32,System.Int32*,System.Int32,System.Void**,System.Int32,System.Int32*)">
            <summary>
            Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index.
            </summary>
            <param name="mode">Specifies what kind of primitives to render.</param>
            <param name="count">Points to an array of the elements counts.</param>
            <param name="type">Specifies the type of the values in indices.<para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para></param>
            <param name="indices">Specifies a pointer to the location where the indices are stored.</param>
            <param name="drawCount">Specifies the size of the count, indices and <paramref name="baseVertex"/> arrays.</param>
            <param name="baseVertex">Specifies a pointer to the location where the base vertices are stored.</param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.glTransformFeedbackVaryings(System.UInt32,System.Int32,System.Byte**,System.Int32)">
            <summary>
            Specify values to record in transform feedback buffers.
            </summary>
            <param name="program">The name of the target program object.</param>
            <param name="count">The number of varying variables used for transform feedback.</param>
            <param name="varyings">An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.</param>
            <param name="bufferMode">Identifies the mode used to capture the varying variables when transform feedback is active.<para>ust be GL_INTERLEAVED_ATTRIBS or GL_SEPARATE_ATTRIBS.</para></param>
        </member>
        <member name="M:Emission.Graphics.GL.GL.Import(Emission.Graphics.GL.GetProcAddressHandler)">
            <summary>
                Imports all OpenGL functions using the specified loader.
            </summary>
            <param name="loader">A loader to retrieve a fuction pointer.</param>
        </member>
        <member name="F:Emission.Graphics.Renderer.SHADER_TEXTURE_COORDS_LOCATION">
            <summary>
            Constant integer that represent texture coords location in shader layout.
            </summary>
        </member>
        <member name="F:Emission.Graphics.Renderer.STRIDE">
            <summary>
            Number of value in each vertex array.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.HasInstance">
            <summary>
            Check if a current instance of a Renderer already exists.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.VertexArray">
            <summary>
            Define, bind and generate a new Vertex Array and return it ID.
            Add it vertex array id to clearing list.
            </summary>
            <returns>Vertex Array ID</returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Buffer(System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>
            Load a dimensional buffer with float array as data.
            Bind data and buffer then Define an array of generic vertex attribute data using the the location, a stride and an offset.
            Add buffer ID the <see cref="!:Loaded_VBO"/>.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
            <param name="stride">Stride of data attribute</param>
            <param name="offset">Offset of data attribute</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Indices(System.Int32[])">
            <summary>
            Load element buffer with a int array as data.
            Add element id to <see cref="!:Loaded_EBO"/> and return element id.
            </summary>
            <param name="data">Data to store.</param>
            <returns>Element Buffer ID</returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Texture2D(System.String,System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Load 2D texture. See static for more information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Texture2D(System.Byte[],System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Load 2D texture. See static for more information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.ClearId(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Clear and delete buffer with a specific index.
            </summary>
            <param name="vao">Vao ID to delete</param>
            <param name="vbo">Vbo ID to delete</param>
            <param name="ebo">Ebo ID to delete</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.ClearAll">
            <summary>
            Clear and delete all Vaos, Vbos and Ebos.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.EnableVertexArray(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Enable a vertex array using the location of this array.
            Define an array of generic vertex attribute data using a the location, a stride and an offset.
            The type of data is define as float.
            </summary>
            <param name="location">Index of vertex array</param>
            <param name="stride">Stride of data attribute</param>
            <param name="offset">Offset of data attribute</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.DisableVertexArray">
            <summary>
            Unbind current vertex array.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.WriteBuffer(System.UInt32,System.Single[])">
            <summary>
            Overwrite data to an array buffer using his ID.
            Use this to write vertices, texture coords or normals data.
            </summary>
            <param name="buffer">Buffer's ID</param>
            <param name="data">Data to write to the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.WriteIndices(System.UInt32,System.Int32[])">
            <summary>
            Overwrite data to an element array buffer using his ID.
            Use this to write indices.
            </summary>
            <param name="buffer">Buffer's ID</param>
            <param name="data">Indices data to write to the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindVertexArray">
            <summary>
            Define, bind and generate a new Vertex Array at an ID.
            Add it to vertex array clearing list.
            </summary>
            <returns>Vertex Array ID</returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindBuffer(System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>
            Load a generic buffer with float array as data.
            Bind data and buffer then Define an array of generic vertex attribute data using the the location, a stride and an offset.
            Add buffer ID to buffer list.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
            <param name="stride">Stride of data attribute</param>
            <param name="offset">Offset of data attribute</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Bind2DBuffer(System.Int32,System.Single[])">
            <summary>
            Load a 2D dimensional buffer with float array as data.
            Add buffer ID to buffer list.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.Bind3DBuffer(System.Int32,System.Single[])">
            <summary>
            Load a 3D dimensional buffer with float array as data.
            Add buffer ID to buffer list.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.Bind4DBuffer(System.Int32,System.Single[])">
            <summary>
            Load a 4D dimensional buffer with float array as data.
            Add buffer ID to buffer list.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindVertexBuffer(System.Int32,System.Single[])">
            <summary>
            Load a 8D dimensional buffer with float array as data. This buffer is designed
            to be used as a vertices array buffer to put vertices data into a buffer in order to draw it.
            Add buffer ID to buffer list.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindIndices(System.Int32[])">
            <summary>
            Load an element buffer with int array as data.
            Add buffer ID to element buffer list.
            </summary>
            <param name="data">Data to send width the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindTexture2D(System.String,System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Load a 2 dimensional texture buffer with an image load with a path.
            The location use in the shader and the stride of vertex data can be change but by default it's <see cref="F:Emission.Graphics.Renderer.SHADER_TEXTURE_COORDS_LOCATION"/>
            and <see cref="F:Emission.Graphics.Renderer.STRIDE"/>.
            Bind data and buffer then Define an array of generic vertex attribute data using the the location, a stride and an offset.
            </summary>
            <param name="path">Image's path</param>
            <param name="location">Location in shader layout</param>
            <param name="stride">Stride in vertex array</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindTexture2D(System.Byte[],System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Load a 2 dimensional texture buffer with an image load with a path.
            The location use in the shader and the stride of vertex data can be change but by default it's <see cref="F:Emission.Graphics.Renderer.SHADER_TEXTURE_COORDS_LOCATION"/>
            and <see cref="F:Emission.Graphics.Renderer.STRIDE"/>.
            Bind data and buffer then Define an array of generic vertex attribute data using the the location, a stride and an offset.
            </summary>
            <param name="data">Image's data as bytes</param>
            <param name="location">Location in shader layout</param>
            <param name="stride">Stride in vertex array</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Clear">
            <summary>
            Clear all buffers and clear buffers list.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.Clear(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Clear buffers at specifics IDs, remove them from the list.
            </summary>
            <param name="vao">Vertex Array ID</param>
            <param name="vbo">Vertex Buffer ID</param>
            <param name="ebo">Element Buffer ID</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.UseTransform(Emission.Mathematics.Transform)">
            <summary>
            Apply a transformation to the current shader.
            Use uniform variable <see cref="F:Emission.Graphics.Shading.Shader.UNIFORM_TRANSFORM"/>.
            </summary>
            <param name="transform">Transform to send to the shader.</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.UseProjection">
            <summary>
            Apply current camera View and Projection to the current shader.
            Use Uniforms variables <see cref="F:Emission.Graphics.Shading.Shader.UNIFORM_VIEW"/> and <see cref="F:Emission.Graphics.Shading.Shader.UNIFORM_PROJECTION"/>.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.BindTexture(Emission.Graphics.Shading.Texture)">
            <summary>
            Add texture to shader by using an image loaded by the relative path.
            Apply texture to a specific named texture sampler and with a unit.
            </summary>
            <param name="texture">Texture to use.</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.BindTexture(System.String,System.String,Emission.Graphics.Shading.TextureUnit)">
            <summary>
            Add texture to shader by using an image loaded by the relative path.
            Apply texture to a specific named texture sampler and with a unit.
            </summary>
            <param name="path">Path to image</param>
            <param name="name">Location name</param>
            <param name="unit">Texture Unit</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.BindTextures">
            <summary>
            Apply texture to object.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.UseTextures">
            <summary>
            Start and load texture in order to use them.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.BindDiffuseMap(System.String,Emission.Graphics.Shading.TextureUnit)">
            <summary>
            Define an image that define how light is diffuse on the object.
            </summary>
            <param name="path"></param>
            <param name="unit"></param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.BindSpecularMap(System.String,Emission.Graphics.Shading.TextureUnit)">
            <summary>
            Define an image that define how light is reflect on the object.
            </summary>
            <param name="path"></param>
            <param name="unit"></param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.UseUniform1f(System.String,System.Single)">
            <summary>
            Define a float value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.UseUniform1(System.String,System.Int32)">
            <summary>
            Define an int value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.UseUniformVec2(System.String,Emission.Mathematics.Vector2)">
            <summary>
            Define a vector 2D value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.UseUniformVec3(System.String,Emission.Mathematics.Vector3)">
            <summary>
            Define a vector 3D value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.UseUniformProjectionMat4(System.String,Emission.Mathematics.Matrix4)">
            <summary>
            Define a matrix 4 value to a uniform use to define a projection.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Material.UseUniformMat4(System.String,Emission.Mathematics.Matrix4)">
            <summary>
            Define a matrix 4 value to a uniform use to define a transposition.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.Start">
            <summary>
            Enable shader to be use.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.Stop">
            <summary>
            Disable shader to be use.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.Dispose">
            <summary>
            Destroy Shader.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.GetAttributeLocation(System.String)">
            <summary>
            Return attribute location use a name.
            </summary>
            <param name="name">Attribute's name</param>
            <returns>Attribute's location</returns>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.GetUniformLocation(System.String)">
            <summary>
            Return uniform location use a name.
            </summary>
            <param name="name">Uniform's name</param>
            <returns>Uniform's location</returns>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.UseUniform1f(System.String,System.Single)">
            <summary>
            Define a float value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.UseUniform1(System.String,System.Int32)">
            <summary>
            Define an int value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.UseUniformVec2(System.String,Emission.Mathematics.Vector2)">
            <summary>
            Define a vector 2D value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.UseUniformVec3(System.String,Emission.Mathematics.Vector3)">
            <summary>
            Define a vector 3D value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.UseUniformVec4(System.String,Emission.Mathematics.Vector4)">
            <summary>
            Define a vector 3D value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.UseUniformProjectionMat4(System.String,Emission.Mathematics.Matrix4)">
            <summary>
            Define a matrix 4 value to a uniform use to define a projection.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.UseUniformMat4(System.String,Emission.Mathematics.Matrix4)">
            <summary>
            Define a matrix 4 value to a uniform use to define a transposition.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.Load(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="vertex"></param>
            <param name="fragment"></param>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.LoadShader(System.Int32,Emission.Graphics.Shading.ShaderType,System.String)">
            <summary>
            OpenGL Loading of a shader.
            Type of shade is defined using <see cref="T:Emission.Graphics.Shading.ShaderType"/>.
            </summary>
            <param name="type">type of loading shader</param>
            <param name="content">shader string content</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.ParseShader(System.String)">
            <summary>
            Recreate full shader file using splited file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Shading.Shader.SplitShader(System.String)">
            <summary>
            Parse shader file in order to separate vertex part and fragment part use keywords
            'vertex:' and 'fragment:' or 'define:'.
            Read file using path.
            </summary>
            <param name="path">Path to shader file</param>
            <returns>Vertex and fragment shader content</returns>
        </member>
        <member name="P:Emission.Input.Any">
            <summary>
            Get if a key or a mouse button is pressed. Return a boolean.
            Check both variables, if any of these is true, it will return true.
            </summary>
        </member>
        <member name="P:Emission.Input.AnyKey">
            <summary>
            Get if a keyboard key is pressed. Return a boolean.
            Loop throw all active keys, if one of them is true, it will return true.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Emission.Input.CurrentKey" -->
        <member name="P:Emission.Input.AnyMouseButton">
            <summary>
            Get if a mouse button is pressed. Return a boolean.
            Loop throw all active buttons, if one of them is true, it will return true.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Emission.Input.CurrentButton" -->
        <member name="P:Emission.Input.MousePosition">
            <summary>
            Return _instance mouse position on the screen as a <see cref="T:Emission.Mathematics.Vector2"/>.
            </summary>
        </member>
        <member name="P:Emission.Input.LastMousePosition">
            <summary>
            Return value of <see cref="P:Emission.Input.MousePosition"/> before update.
            </summary>
        </member>
        <member name="P:Emission.Input.DeltaMousePosition">
            <summary>
            Return the result of the difference between <see cref="P:Emission.Input.MousePosition"/> and <see cref="P:Emission.Input.LastMousePosition"/>.
            Use to get mouse movement between two frames.
            </summary>
        </member>
        <member name="P:Emission.Input.Scroll">
            <summary>
            Return _instance mouse scroll value.
            </summary>
        </member>
        <member name="P:Emission.Input.Sensivity">
            <summary>
            Binding for mouse sensivity
            </summary>
        </member>
        <member name="T:Emission.InputMode">
            <summary>
                Strongly-typed values for getting/setting the input mode hints.
            </summary>
        </member>
        <member name="F:Emission.InputMode.Cursor">
            <summary>
                If specified, enables setting the mouse behavior.
                <para>See <see cref="!:CursorMode" /> for possible values.</para>
            </summary>
        </member>
        <member name="F:Emission.InputMode.StickyKeys">
            <summary>
                If specified, enables setting sticky keys, where <see cref="!:Glfw.GetKey" /> will return
                <see cref="F:Emission.InputState.Press" /> the first time you call it for a key that was pressed, even if that key has already
                been released.
            </summary>
        </member>
        <member name="F:Emission.InputMode.StickyMouseButton">
            <summary>
                If specified, enables setting sticky mouse buttons, where <see cref="!:Glfw.GetMouseButton" /> will return
                <see cref="F:Emission.InputState.Press" /> the first time you call it for a mouse button that was pressed, even if that mouse
                button has already been released.
            </summary>
        </member>
        <member name="F:Emission.InputMode.LockKeyMods">
            <summary>
                When this input mode is enabled, any callback that receives modifier bits will have the
                <see cref="!:ModifierKeys.CapsLock" /> bit set if caps lock was on when the event occurred and the
                <see cref="!:ModifierKeys.NumLock" /> bit set if num lock was on.
            </summary>
        </member>
        <member name="F:Emission.InputMode.RawMouseMotion">
            <summary>
                When the cursor is disabled, raw (unscaled and unaccelerated) mouse motion can be enabled if available.
                <seealso cref="!:Glfw.RawMouseMotionSupported" />
            </summary>
        </member>
        <member name="T:Emission.InputState">
            <summary>
                Describes the state of a button/key.
            </summary>
        </member>
        <member name="F:Emission.InputState.Release">
            <summary>
                The key or mouse button was released.
            </summary>
        </member>
        <member name="F:Emission.InputState.Press">
            <summary>
                The key or mouse button was pressed.
            </summary>
        </member>
        <member name="F:Emission.InputState.Repeat">
            <summary>
                The key was held down until it repeated.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.GamePadAxis">
            <summary>
                Represents a gamepad axis.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.GamePadButton">
            <summary>
                Represents gamepad buttons.
                <para>
                    Duplicate values convenience for providing naming conventions for common gamepads (PlayStation,
                    X-Box, etc).
                </para>
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.Hat">
            <summary>
                Describes joystick hat states.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Hat.Centered">
            <summary>
                Centered
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Hat.Up">
            <summary>
                Up
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Hat.Right">
            <summary>
                Right
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Hat.Down">
            <summary>
                Down
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Hat.Left">
            <summary>
                Left
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Hat.RightUp">
            <summary>
                Right and up
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Hat.RightDown">
            <summary>
                Right and down
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Hat.LeftUp">
            <summary>
                Left and up
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Hat.LeftDown">
            <summary>
                Left and down
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.Joystick">
            <summary>
                Strongly-typed values describing possible joysticks.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick1">
            <summary>
                Joystick 1
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick2">
            <summary>
                Joystick 2
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick3">
            <summary>
                Joystick 3
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick4">
            <summary>
                Joystick 4
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick5">
            <summary>
                Joystick 5
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick6">
            <summary>
                Joystick 6
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick7">
            <summary>
                Joystick 7
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick8">
            <summary>
                Joystick 8
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick9">
            <summary>
                Joystick 9
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick10">
            <summary>
                Joystick 10
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick11">
            <summary>
                Joystick 11
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick12">
            <summary>
                Joystick 12
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick13">
            <summary>
                Joystick 13
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick14">
            <summary>
                Joystick 14
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick15">
            <summary>
                Joystick 15
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Joystick.Joystick16">
            <summary>
                Joystick 16
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.ModifierKeys">
            <summary>
                Describes bitwise combination of modifier keys.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ModifierKeys.Shift">
            <summary>
                Either of the Shift keys.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ModifierKeys.Control">
            <summary>
                Either of the Ctrl keys.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ModifierKeys.Alt">
            <summary>
                Either of the Alt keys
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ModifierKeys.Super">
            <summary>
                The super key ("Windows" key on Windows)
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ModifierKeys.CapsLock">
            <summary>
                The caps-lock is enabled.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ModifierKeys.NumLock">
            <summary>
                The num-lock is enabled.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.ConnectionStatus">
            <summary>
            Strongly-typed values indicating connection status of joysticks, monitors, etc.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ConnectionStatus.Unknown">
            <summary>
            Unknown connection status.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ConnectionStatus.Connected">
            <summary>
            Device is currently connected and visible to GLFW.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ConnectionStatus.Disconnected">
            <summary>
            Device is disconnected and/or not visible to GLFW.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.Constants">
            <summary>
                Strongly-typed values for commonly used constants.
                <para>You are free to use the integer value instead of these constants.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Constants.Default">
            <summary>
                No preference or don't care, use default value.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Constants.False">
            <summary>
                Boolean false
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Constants.True">
            <summary>
                Boolean true
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.ContextAttributes">
            <summary>
            Used internally to consolidate strongly-typed values for getting/setting window attributes.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.CursorMode">
            <summary>
                Indicates the behavior of the mouse cursor.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.CursorMode.Normal">
            <summary>
                The cursor is visible and behaves normally.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.CursorMode.Hidden">
            <summary>
                The cursor is invisible when it is over the client area of the window but does not restrict the cursor from
                leaving.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.CursorMode.Disabled">
            <summary>
                Hides and grabs the cursor, providing virtual and unlimited cursor movement. This is useful for implementing for
                example 3D camera controls.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.CursorType">
            <summary>
                Strongly-typed values describing possible cursor shapes.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.CursorType.Arrow">
            <summary>
                The regular arrow cursor.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.CursorType.Beam">
            <summary>
                The text input I-beam cursor shape.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.CursorType.Crosshair">
            <summary>
                The crosshair shape.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.CursorType.Hand">
            <summary>
                The hand shape.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.CursorType.ResizeHorizontal">
            <summary>
                The horizontal resize arrow shape.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.CursorType.ResizeVertical">
            <summary>
                The vertical resize arrow shape.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.ErrorCallback">
            <summary>
                Function signature for receiving error callbacks.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">A pointer to the UTF-8 encoded (null-terminated) error message.</param>
        </member>
        <member name="T:Emission.Window.GLFW.SizeCallback">
            <summary>
                This is the function signature for window size callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="width">The new width, in screen coordinates, of the window.</param>
            <param name="height">The new height, in screen coordinates, of the window.</param>
        </member>
        <member name="T:Emission.Window.GLFW.PositionCallback">
            <summary>
                This is the function signature for cursor position callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="x">The new cursor x-coordinate, relative to the left edge of the client area.</param>
            <param name="y">The new cursor y-coordinate, relative to the left edge of the client area.</param>
        </member>
        <member name="T:Emission.Window.GLFW.FocusCallback">
            <summary>
                This is the function signature for window focus callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="focusing"><c>true</c> if window is gaining focus; otherise <c>false</c>.</param>
        </member>
        <member name="T:Emission.Window.GLFW.WindowCallback">
            <summary>
                Generic signature for window callbacks.
            </summary>
            <param name="window">The window handle.</param>
        </member>
        <member name="T:Emission.Window.GLFW.FileDropCallback">
            <summary>
                This is the function signature for file drop callbacks.
            </summary>
            <param name="window">The window that received the event.</param>
            <param name="count">The number of dropped files.</param>
            <param name="arrayPtr">Pointer to an array UTF-8 encoded file and/or directory path name pointers.</param>
        </member>
        <member name="T:Emission.Window.GLFW.MouseCallback">
            <summary>
                This is the function signature for cursor position callback functions.
            </summary>
            <param name="window">The window handle recieving the event.</param>
            <param name="x">The new cursor x-coordinate, relative to the left edge of the client area.</param>
            <param name="y">The new cursor y-coordinate, relative to the left edge of the client area.</param>
        </member>
        <member name="T:Emission.Window.GLFW.MouseEnterCallback">
            <summary>
                This is the function signature for cursor enter/leave callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="entering"><c>true</c> if cursor is entering the window client area; otherwise <c>false</c>.</param>
        </member>
        <member name="T:Emission.Window.GLFW.MouseButtonCallback">
            <summary>
                This is the function signature for mouse button callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="button">TThe mouse button that was pressed or released.</param>
            <param name="state">The state.</param>
            <param name="modifiers">Flags describing which modifier keys were held down.</param>
        </member>
        <member name="T:Emission.Window.GLFW.CharCallback">
            <summary>
                This is the function signature for Unicode character callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="codePoint">The Unicode code point of the character.</param>
        </member>
        <member name="T:Emission.Window.GLFW.CharModsCallback">
            <summary>
                This is the function signature for Unicode character callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="codePoint">The Unicode code point of the character.</param>
            <param name="mods">Bit field describing which modifier keys were held down.</param>
        </member>
        <member name="T:Emission.Window.GLFW.KeyCallback">
            <summary>
                This is the function signature for keyboard key callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="key">The keyboard key that was pressed or released.</param>
            <param name="scanCode">The system-specific scancode of the key.</param>
            <param name="state">The state of the key.</param>
            <param name="mods">	Bit field describing which modifier keys were held down.</param>
        </member>
        <member name="T:Emission.Window.GLFW.JoystickCallback">
            <summary>
                This is the function signature for joystick configuration callback functions.
            </summary>
            <param name="joystick">The joystick that was connected or disconnected.</param>
            <param name="status">The connection status.</param>
        </member>
        <member name="T:Emission.Window.GLFW.MonitorCallback">
            <summary>
                This is the function signature for monitor configuration callback functions.
            </summary>
            <param name="monitor">The monitor that was connected or disconnected.</param>
            <param name="status">The connection status.</param>
        </member>
        <member name="T:Emission.Window.GLFW.IconifyCallback">
            <summary>
                This is the function signature for window iconify/restore callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="focusing"><c>true</c> if window is iconified; otherwise <c>false</c> if restoring.</param>
        </member>
        <member name="T:Emission.Window.GLFW.WindowContentsScaleCallback">
            <summary>
                This is the function signature for window content scale callback functions.
            </summary>
            <param name="window">The window whose content scale changed.</param>
            <param name="xScale">The new x-axis content scale of the window.</param>
            <param name="yScale">The new y-axis content scale of the window.</param>
        </member>
        <member name="T:Emission.Window.GLFW.WindowMaximizedCallback">
            <summary>
                This is the function signature for window maximize/restore callback functions.
            </summary>
            <param name="window">The window that was maximized or restored.</param>
            <param name="maximized"><c>true</c> if the window was maximized, or <c>false</c> if it was restored.</param>
        </member>
        <member name="T:Emission.Window.GLFW.Exception">
            <summary>
            Base exception class for GLFW related errors.
            </summary>
        </member>
        <member name="M:Emission.Window.GLFW.Exception.GetErrorMessage(Emission.Window.GLFW.ErrorCode)">
            <summary>
                Generic error messages if only an error code is supplied as an argument to the constructor.
            </summary>
            <param name="code">The error code.</param>
            <returns>Error message.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Exception.#ctor(Emission.Window.GLFW.ErrorCode)">
            <summary>
                Initializes a new instance of the <see cref="T:Emission.Window.GLFW.Exception" /> class.
            </summary>
            <param name="error">The error code to create a generic message from.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Exception.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Emission.Window.GLFW.Exception" /> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:Emission.Window.GLFW.ErrorCode">
            <summary>
                Strongly-typed error codes for error handling.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.Unknown">
            <summary>
                An unknown or undefined error.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.None">
            <summary>
                No error has occurred.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.NotInitialized">
            <summary>
                This occurs if a GLFW function was called that must not be called unless the library is initialized.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.NoCurrentContext">
            <summary>
                This occurs if a GLFW function was called that needs and operates on the current OpenGL or OpenGL ES context but no
                context is current on the calling thread.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.InvalidEnum">
            <summary>
                One of the arguments to the function was an invalid enum value.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.InvalidValue">
            <summary>
                One of the arguments to the function was an invalid value, for example requesting a non-existent OpenGL or OpenGL
                ES version like 2.7.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.OutOfMemory">
            <summary>
                A memory allocation failed.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.ApiUnavailable">
            <summary>
                GLFW could not find support for the requested API on the system.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.VersionUnavailable">
            <summary>
                The requested OpenGL or OpenGL ES version (including any requested context or framebuffer hints) is not available
                on this machine.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.PlatformError">
            <summary>
                A platform-specific error occurred that does not match any of the more specific categories.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.FormatUnavailable">
            <summary>
                If emitted during window creation, the requested pixel format is not supported, else if emitted when querying the
                clipboard, the contents of the clipboard could not be converted to the requested format.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ErrorCode.NoWindowContext">
            <summary>
                A window that does not have an OpenGL or OpenGL ES context was passed to a function that requires it to have one.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.GamePadState">
            <summary>
                Represents the state of a gamepad.
            </summary>
        </member>
        <member name="M:Emission.Window.GLFW.GamePadState.GetButtonState(Emission.Window.GLFW.GamePadButton)">
            <summary>
                Gets the state of the specified <paramref name="button" />.
            </summary>
            <param name="button">The button to retrieve the state of.</param>
            <returns>The button state, either <see cref="F:Emission.InputState.Press" /> or <see cref="F:Emission.InputState.Release" />.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.GamePadState.GetAxis(Emission.Window.GLFW.GamePadAxis)">
            <summary>
                Gets the value of the specified <paramref name="axis" />.
            </summary>
            <param name="axis">The axis to retrieve the value of.</param>
            <returns>The axis value, in the range of <c>-1.0</c> and <c>1.0</c> inclusive.</returns>
        </member>
        <member name="T:Emission.Window.GLFW.GammaRamp">
            <summary>
                Describes the gamma ramp for a monitor.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.GammaRamp.Red">
            <summary>
                An array of value describing the response of the red channel.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.GammaRamp.Green">
            <summary>
                An array of value describing the response of the green channel.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.GammaRamp.Blue">
            <summary>
                An array of value describing the response of the blue channel.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.GammaRamp.Size">
            <summary>
                The number of elements in each array.
            </summary>
        </member>
        <member name="M:Emission.Window.GLFW.GammaRamp.#ctor(System.UInt16[],System.UInt16[],System.UInt16[])">
            <summary>
                Creates a new instance of a <see cref="T:Emission.Window.GLFW.GammaRamp" /> using the specified values.
                <para>WARNING: On some platforms (Windows), each value MUST be 256 in length.</para>
            </summary>
            <param name="red">An array of value describing the response of the red channel.</param>
            <param name="green">An array of value describing the response of the green channel.</param>
            <param name="blue">An array of value describing the response of the blue channel.</param>
        </member>
        <member name="T:Emission.Window.GLFW.GammaRampInternal">
            <summary>
                Used internally for marshalling
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ClientApi.None">
            <summary> No context </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ClientApi.OpenGL">
            <summary> Use OpenGL Api </summary>
        </member>
        <member name="T:Emission.Window.GLFW.ContextApi">
            <summary>
                Describes the API used for creating the OpenGL context.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ContextApi.Native">
            <summary>
                The native platform default.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ContextApi.Egl">
            <summary>
                EGL
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ContextApi.Mesa">
            <summary>
                OS Mesa
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.Vulkan">
            <summary>
                Implements the Vulkan specific functions of GLFW.
                <para>See http://www.glfw.org/docs/latest/vulkan_guide.html for detailed documentation.</para>
            </summary>
        </member>
        <member name="P:Emission.Window.GLFW.Vulkan.IsSupported">
            <summary>
                Gets whether the Vulkan loader has been found. This check is performed by <see cref="M:Emission.Window.GLFW.Glfw.Init" />.
            </summary>
            <value>
                <c>true</c> if Vulkan is supported; otherwise <c>false</c>.
            </value>
        </member>
        <member name="M:Emission.Window.GLFW.Vulkan.CreateWindowSurface(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt64@)">
            <summary>
                This function creates a Vulkan surface for the specified window.
            </summary>
            <param name="vulkan">A pointer to the Vulkan instance.</param>
            <param name="window">The window handle.</param>
            <param name="allocator">A pointer to the allocator to use, or <see cref="F:System.IntPtr.Zero" /> to use default allocator.</param>
            <param name="surface">The handle to the created Vulkan surface.</param>
            <returns>VK_SUCCESS if successful, or a Vulkan error code if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Vulkan.GetPhysicalDevicePresentationSupport(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
                This function returns whether the specified queue family of the specified physical device supports presentation to
                the platform GLFW was built for.
            </summary>
            <param name="instance">The instance that the physical device belongs to.</param>
            <param name="device">The physical device that the queue family belongs to.</param>
            <param name="family">The index of the queue family to query.</param>
            <returns><c>true</c> if the queue family supports presentation, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Vulkan.GetInstanceProcAddress(System.IntPtr,System.String)">
            <summary>
                This function returns the address of the specified Vulkan core or extension function for the specified instance. If
                instance is set to <see cref="F:System.IntPtr.Zero" /> it can return any function exported from the Vulkan loader.
                <para>
                    If Vulkan is not available on the machine, this function returns <see cref="F:System.IntPtr.Zero" /> and generates an
                    error. Use <see cref="P:Emission.Window.GLFW.Vulkan.IsSupported" /> to check whether Vulkan is available.
                </para>
            </summary>
            <param name="vulkan">The vulkan instance.</param>
            <param name="procName">Name of the function.</param>
            <returns>The address of the function, or <see cref="F:System.IntPtr.Zero" /> if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Vulkan.GetRequiredInstanceExtensions">
            <summary>
                This function returns an array of names of Vulkan instance extensions required by GLFW for creating Vulkan surfaces
                for GLFW windows. If successful, the list will always contains VK_KHR_surface, so if you don't require any
                additional extensions you can pass this list directly to the VkInstanceCreateInfo struct.
                <para>
                    If Vulkan is not available on the machine, this function returns generates an error, use
                    <see cref="P:Emission.Window.GLFW.Vulkan.IsSupported" /> to first check if supported.
                </para>
                <para>
                    If Vulkan is available but no set of extensions allowing window surface creation was found, this function
                    returns an empty array. You may still use Vulkan for off-screen rendering and compute work.
                </para>
            </summary>
            <returns>An array of extension names.</returns>
        </member>
        <member name="T:Emission.Window.GLFW.Glfw">
            <summary>
                The base class the vast majority of the GLFW functions, excluding only Vulkan and native platform specific
                functions.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Glfw.LIBRARY">
            <summary>
                The native library name,
                <para>For Unix users using an installed version of GLFW, this needs refactored to <c>glfw</c>.</para>
            </summary>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetError(System.String@)">
            <summary>
                Returns and clears the error code of the last error that occurred on the calling thread, and optionally
                a description of it.
                <para>
                    If no error has occurred since the last call, it returns <see cref="F:Emission.Window.GLFW.ErrorCode.None" /> and the
                    description pointer is set to <c>null</c>.
                </para>
            </summary>
            <param name="description">The description string, or <c>null</c> if there is no error.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetMonitorContentScale(System.IntPtr,System.Single@,System.Single@)">
            <summary>
                Retrieves the content scale for the specified monitor. The content scale is the ratio between the
                current DPI and the platform's default DPI.
                <para>
                    This is especially important for text and any UI elements. If the pixel dimensions of your UI scaled by
                    this look appropriate on your machine then it should appear at a reasonable size on other machines
                    regardless of their DPI and scaling settings. This relies on the system DPI and scaling settings being
                    somewhat correct.
                </para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <param name="xScale">The scale on the x-axis.</param>
            <param name="yScale">The scale on the y-axis.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetMonitorUserPointer(System.IntPtr)">
            <summary>
                Returns the current value of the user-defined pointer of the specified <paramref name="monitor" />.
            </summary>
            <param name="monitor">The monitor whose pointer to return.</param>
            <returns>The user-pointer, or <see cref="F:System.IntPtr.Zero" /> if none is defined.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetMonitorUserPointer(System.IntPtr,System.IntPtr)">
            <summary>
                This function sets the user-defined pointer of the specified <paramref name="monitor" />.
                <para>The current value is retained until the monitor is disconnected.</para>
            </summary>
            <param name="monitor">The monitor whose pointer to set.</param>
            <param name="pointer">The user-defined pointer value.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetWindowOpacity(System.IntPtr)">
            <summary>
                Returns the opacity of the window, including any decorations.
            </summary>
            <param name="window">The window to query.</param>
            <returns>The opacity value of the specified window, a value between <c>0.0</c> and <c>1.0</c> inclusive.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowOpacity(System.IntPtr,System.Single)">
            <summary>
                Sets the opacity of the window, including any decorations.
                <para>
                    The opacity (or alpha) value is a positive finite number between zero and one, where zero is fully
                    transparent and one is fully opaque.
                </para>
            </summary>
            <param name="window">The window to set the opacity for.</param>
            <param name="opacity">The desired opacity of the specified window.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHintString(Emission.Window.GLFW.WindowHint,System.Byte[])">
            <summary>
                Sets hints for the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />. The hints, once set, retain their values until
                changed by a call to this function or <see cref="M:Emission.Window.GLFW.Glfw.DefaultWindowHints" />, or until the library is terminated.
                <para>
                    Some hints are platform specific. These may be set on any platform but they will only affect their
                    specific platform. Other platforms will ignore them. Setting these hints requires no platform specific
                    headers or functions.
                </para>
            </summary>
            <param name="windowHint">The window hit to set.</param>
            <param name="value">The new value of the window hint.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHintStringUTF8(Emission.Window.GLFW.WindowHint,System.String)">
            <summary>
                Helper function to call <see cref="M:Emission.Window.GLFW.Glfw.WindowHintString(Emission.Window.GLFW.WindowHint,System.Byte[])" /> with UTF-8 encoding.
            </summary>
            <param name="windowHint">The window hit to set.</param>
            <param name="value">The new value of the window hint.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHintStringASCII(Emission.Window.GLFW.WindowHint,System.String)">
            <summary>
                Helper function to call <see cref="M:Emission.Window.GLFW.Glfw.WindowHintString(Emission.Window.GLFW.WindowHint,System.Byte[])" /> with ASCII encoding.
            </summary>
            <param name="windowHint">The window hit to set.</param>
            <param name="value">The new value of the window hint.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetWindowContentScale(System.IntPtr,System.Single@,System.Single@)">
            <summary>
                Retrieves the content scale for the specified window. The content scale is the ratio between the current DPI and
                the platform's default DPI. This is especially important for text and any UI elements. If the pixel dimensions of
                your UI scaled by this look appropriate on your machine then it should appear at a reasonable size on other
                machines regardless of their DPI and scaling settings. This relies on the system DPI and scaling settings being
                somewhat correct.
                <para>
                    On systems where each monitors can have its own content scale, the window content scale will depend on which
                    monitor the system considers the window to be on.
                </para>
            </summary>
            <param name="window">The window to query.</param>
            <param name="xScale">The content scale on the x-axis.</param>
            <param name="yScale">The content scale on the y-axis.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.RequestWindowAttention(System.IntPtr)">
            <summary>
                Requests user attention to the specified <paramref name="window" />. On platforms where this is not supported,
                attention is
                requested to the application as a whole.
                <para>
                    Once the user has given attention, usually by focusing the window or application, the system will end the
                    request automatically.
                </para>
            </summary>
            <param name="window">The window to request user attention to.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.RawMouseMotionSupported">
            <summary>
                This function returns whether raw mouse motion is supported on the current system.
                <para>
                    This status does not change after GLFW has been initialized so you only need to check this once. If you
                    attempt to enable raw motion on a system that does not support it, an error will be emitted.
                </para>
            </summary>
            <returns><c>true</c> if raw mouse motion is supported on the current machine, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowMaximizeCallback(System.IntPtr,Emission.Window.GLFW.WindowMaximizedCallback)">
            <summary>
                Sets the maximization callback of the specified <paramref name="window,," /> which is called when the window is
                maximized or restored.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="cb">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowContentScaleCallback(System.IntPtr,Emission.Window.GLFW.WindowContentsScaleCallback)">
            <summary>
                Sets the window content scale callback of the specified window, which is called when the content scale of the
                specified window changes.
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="cb">The new callback, or <c>null</c> to remove the currently set callback</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetKeyScanCode(Emission.Keys)">
            <summary>
                Returns the platform-specific scan-code of the specified key.
                <para>If the key is <see cref="F:Emission.Keys.Unknown" /> or does not exist on the keyboard this method will return -1.</para>
            </summary>
            <param name="key">The named key to query.</param>
            <returns>The platform-specific scan-code for the key, or -1 if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowAttribute(System.IntPtr,Emission.Window.GLFW.WindowAttribute,System.Boolean)">
            <summary>
                Sets the value of an attribute of the specified window.
            </summary>
            <param name="window">
                The window to set the attribute for
                <para>Valid attributes include:</para>
                <para>
                    <see cref="F:Emission.Window.GLFW.WindowAttribute.Decorated" />
                </para>
                <para>
                    <see cref="F:Emission.Window.GLFW.WindowAttribute.Resizable" />
                </para>
                <para>
                    <see cref="F:Emission.Window.GLFW.WindowAttribute.Floating" />
                </para>
                <para>
                    <see cref="F:Emission.Window.GLFW.WindowAttribute.AutoIconify" />
                </para>
                <para>
                    <see cref="F:Emission.Window.GLFW.WindowAttribute.Focused" />
                </para>
            </param>
            <param name="attr">A supported window attribute.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetJoystickHats(System.Int32)">
            <summary>
                Returns the state of all hats of the specified joystick as a bitmask.
            </summary>
            <param name="joystickId">The joystick to query.</param>
            <returns>A bitmask enumeration containing the state of the joystick hats.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetJoystickGuid(System.Int32)">
            <summary>
                Returns the SDL compatible GUID, as a hexadecimal string, of the specified joystick.
                <para>
                    The GUID is what connects a joystick to a gamepad mapping. A connected joystick will always have a GUID even
                    if there is no gamepad mapping assigned to it.
                </para>
            </summary>
            <param name="joystickId">The joystick to query.</param>
            <returns>The GUID of the joystick, or <c>null</c> if the joystick is not present or an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetJoystickUserPointer(System.Int32)">
            <summary>
                This function returns the current value of the user-defined pointer of the specified joystick.
            </summary>
            <param name="joystickId">The joystick whose pointer to return.</param>
            <returns>The user-defined pointer, or <see cref="F:System.IntPtr.Zero" /> if never defined.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetJoystickUserPointer(System.Int32,System.IntPtr)">
            <summary>
                This function sets the user-defined pointer of the specified joystick.
                <para>The current value is retained until the joystick is disconnected.</para>
            </summary>
            <param name="joystickId">The joystick whose pointer to set.</param>
            <param name="pointer">The new value.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.JoystickIsGamepad(System.Int32)">
            <summary>
                Returns whether the specified joystick is both present and has a gamepad mapping.
            </summary>
            <param name="joystickId">The joystick to query.</param>
            <returns><c>true</c> if a joystick is both present and has a gamepad mapping, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.UpdateGamepadMappings(System.String)">
            <summary>
                Parses the specified string and updates the internal list with any gamepad mappings it finds.
                <para>
                    This string may contain either a single gamepad mapping or many mappings separated by newlines. The parser
                    supports the full format of the SDL <c>gamecontrollerdb.txt</c> source file including empty lines and comments.
                </para>
            </summary>
            <param name="mappings">The string containing the gamepad mappings.</param>
            <returns><c>true</c> if successful, or <c>false</c> if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetGamepadName(System.Int32)">
            <summary>
                Returns the human-readable name of the gamepad from the gamepad mapping assigned to the specified joystick.
            </summary>
            <param name="gamepadId">The joystick to query.</param>
            <returns>
                The name of the gamepad, or <c>null</c> if the joystick is not present, does not have a mapping or an error
                occurred.
            </returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetGamepadState(System.Int32,Emission.Window.GLFW.GamePadState@)">
            <summary>
                Retrieves the state of the specified joystick remapped to an Xbox-like gamepad.
            </summary>
            <param name="id">The joystick to query.</param>
            <param name="state">The gamepad input state of the joystick.</param>
            <returns>
                <c>true</c> if successful, or <c>false</c> if no joystick is connected, it has no gamepad mapping or an error
                occurred.
            </returns>
        </member>
        <member name="P:Emission.Window.GLFW.Glfw.CurrentContext">
            <summary>
                Gets the window whose OpenGL or OpenGL ES context is current on the calling thread, or <see cref="!:Window.None" />
                if no context is current.
            </summary>
            <value>
                The current context.
            </value>
        </member>
        <member name="P:Emission.Window.GLFW.Glfw.Time">
            <summary>
                Gets or sets the value of the GLFW timer.
                <para>
                    The resolution of the timer is system dependent, but is usually on the order of a few micro- or nanoseconds.
                    It uses the highest-resolution monotonic time source on each supported platform.
                </para>
            </summary>
            <value>
                The time.
            </value>
        </member>
        <member name="P:Emission.Window.GLFW.Glfw.TimerFrequency">
            <summary>
                Gets the frequency, in Hz, of the raw timer.
            </summary>
            <value>
                The frequency of the timer, in Hz, or zero if an error occurred.
            </value>
        </member>
        <member name="P:Emission.Window.GLFW.Glfw.TimerValue">
            <summary>
                Gets the current value of the raw timer, measured in 1 / frequency seconds.
            </summary>
            <value>
                The timer value.
            </value>
        </member>
        <member name="P:Emission.Window.GLFW.Glfw.Version">
            <summary>
                Gets the version of the native GLFW library.
            </summary>
            <value>
                The version.
            </value>
        </member>
        <member name="P:Emission.Window.GLFW.Glfw.VersionString">
            <summary>
                Gets the compile-time generated version string of the GLFW library binary.
                <para>It describes the version, platform, compiler and any platform-specific compile-time options.</para>
            </summary>
            <value>
                The version string.
            </value>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.InitHint(Emission.Window.GLFW.WindowHint,System.Boolean)">
            <summary>
                This function sets hints for the next initialization of GLFW.
                <para>
                    The values you set hints to are never reset by GLFW, but they only take effect during initialization.
                    Once GLFW has been initialized, any values you set will be ignored until the library is terminated and
                    initialized again.>.
                </para>
            </summary>
            <param name="windowHint">
                The hint, valid values are <see cref="F:Emission.Window.GLFW.WindowHint.JoystickHatButtons" />,
                <see cref="F:Emission.Window.GLFW.WindowHint.CocoaMenuBar" />, and <see cref="F:Emission.Window.GLFW.WindowHint.CocoaChDirResources" />.
            </param>
            <param name="value">The value of the hint.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.Init">
            <summary>
                This function initializes the GLFW library. Before most GLFW functions can be used, GLFW must be initialized, and
                before an application terminates GLFW should be terminated in order to free any resources allocated during or after
                initialization.
                <para>
                    If this function fails, it calls <see cref="M:Emission.Window.GLFW.Glfw.Terminate" /> before returning. If it succeeds, you should call
                    <see cref="M:Emission.Window.GLFW.Glfw.Terminate" /> before the application exits
                </para>
                <para>
                    Additional calls to this function after successful initialization but before termination will return
                    <c>true</c> immediately.
                </para>
            </summary>
            <returns><c>true</c> if successful, or <c>false</c> if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.Terminate">
            <summary>
                This function destroys all remaining windows and cursors, restores any modified gamma ramps and frees any other
                allocated resources. Once this function is called, you must again call <see cref="M:Emission.Window.GLFW.Glfw.Init" /> successfully before you
                will be able to use most GLFW functions.
                If GLFW has been successfully initialized, this function should be called before the application exits. If
                initialization fails, there is no need to call this function, as it is called by <see cref="M:Emission.Window.GLFW.Glfw.Init" /> before it
                returns failure.
            </summary>
            <note type="warning">
                The contexts of any remaining windows must not be current on any other thread when this function
                is called.
            </note>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetErrorCallback(Emission.Window.GLFW.ErrorCallback)">
            <summary>
                Sets the error callback, which is called with an error code and a human-readable description each
                time a GLFW error occurs.
            </summary>
            <param name="errorHandler">The callback function, or <c>null</c> to unbind this callback.</param>
            <returns>The previously set callback function, or <c>null</c> if no callback was already set.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.DestroyWindow(System.IntPtr)">
            <summary>
                This function destroys the specified window and its context. On calling this function, no further callbacks will be
                called for that window.
                <para>If the context of the specified window is current on the main thread, it is detached before being destroyed.</para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.ShowWindow(System.IntPtr)">
            <summary>
                This function makes the specified window visible if it was previously hidden. If the window is already visible or
                is in full screen mode, this function does nothing.
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.HideWindow(System.IntPtr)">
            <summary>
                This function hides the specified window if it was previously visible. If the window is already hidden or is in
                full screen mode, this function does nothing.
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetWindowPosition(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
                This function retrieves the position, in screen coordinates, of the upper-left corner of the client area of the
                specified window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="x">The x-coordinate of the upper-left corner of the client area.</param>
            <param name="y">The y-coordinate of the upper-left corner of the client area.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowPosition(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Sets the position, in screen coordinates, of the upper-left corner of the client area of the
                specified windowed mode window.
                <para>If the window is a full screen window, this function does nothing.</para>
            </summary>
            <note type="important">
                Do not use this function to move an already visible window unless you have very good reasons for
                doing so, as it will confuse and annoy the user.
            </note>
            <param name="window">A window instance.</param>
            <param name="x">The x-coordinate of the upper-left corner of the client area.</param>
            <param name="y">The y-coordinate of the upper-left corner of the client area.</param>
            <remarks>
                The window manager may put limits on what positions are allowed. GLFW cannot and should not override these
                limits.
            </remarks>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetWindowSize(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
                This function retrieves the size, in screen coordinates, of the client area of the specified window.
                <para>
                    If you wish to retrieve the size of the framebuffer of the window in pixels, use
                    <see cref="M:Emission.Window.GLFW.Glfw.GetFramebufferSize(System.IntPtr,System.Int32@,System.Int32@)" />.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="width">The width, in screen coordinates.</param>
            <param name="height">The height, in screen coordinates.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowSize(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Sets the size, in screen coordinates, of the client area of the specified window.
                <para>
                    For full screen windows, this function updates the resolution of its desired video mode and switches to the
                    video mode closest to it, without affecting the window's context. As the context is unaffected, the bit depths
                    of the framebuffer remain unchanged.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="width">The desired width, in screen coordinates, of the window client area.</param>
            <param name="height">The desired height, in screen coordinates, of the window client area.</param>
            <remarks>The window manager may put limits on what sizes are allowed. GLFW cannot and should not override these limits.</remarks>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetFramebufferSize(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
                This function retrieves the size, in pixels, of the framebuffer of the specified window.
                <para>If you wish to retrieve the size of the window in screen coordinates, use <see cref="M:Emission.Window.GLFW.Glfw.GetWindowSize(System.IntPtr,System.Int32@,System.Int32@)" />.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="width">The width, in pixels, of the framebuffer.</param>
            <param name="height">The height, in pixels, of the framebuffer.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowPositionCallback(System.IntPtr,Emission.Window.GLFW.PositionCallback)">
            <summary>
                Sets the position callback of the specified window, which is called when the window is moved.
                <para>The callback is provided with the screen position of the upper-left corner of the client area of the window.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="positionCallback">The position callback to be invoked on position changes.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowSizeCallback(System.IntPtr,Emission.Window.GLFW.SizeCallback)">
            <summary>
                Sets the size callback of the specified window, which is called when the window is resized.
                <para>The callback is provided with the size, in screen coordinates, of the client area of the window.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="sizeCallback">The size callback to be invoked on size changes.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowTitle(System.IntPtr,System.Byte[])">
            <summary>
                Sets the window title, encoded as UTF-8, of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="title">The title as an array of UTF-8 encoded bytes.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.FocusWindow(System.IntPtr)">
            <summary>
                This function brings the specified window to front and sets input focus. The window should already be visible and
                not iconified.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowFocusCallback(System.IntPtr,Emission.Window.GLFW.FocusCallback)">
            <summary>
                Sets the focus callback of the specified window, which is called when the window gains or loses input
                focus.
                <para>
                    After the focus callback is called for a window that lost input focus, synthetic key and mouse button release
                    events will be generated for all such that had been pressed.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="focusCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetVersion(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                This function retrieves the major, minor and revision numbers of the GLFW library.
                <para>
                    It is intended for when you are using GLFW as a shared library and want to ensure that you are using the
                    minimum required version.
                </para>
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="revision">The revision.</param>
            <seealso cref="P:Emission.Window.GLFW.Glfw.Version" />
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetVersionString">
            <summary>
                Gets the compile-time generated version string of the GLFW library binary.
                <para>It describes the version, platform, compiler and any platform-specific compile-time options.</para>
            </summary>
            <returns>A pointer to the null-terminated UTF-8 encoded version string.</returns>
            <seealso cref="P:Emission.Window.GLFW.Glfw.VersionString" />
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetWindowFrameSize(System.IntPtr,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                This function retrieves the size, in screen coordinates, of each edge of the frame of the specified window.
                <para>
                    This size includes the title bar, if the window has one. The size of the frame may vary depending on the
                    window-related hints used to create it.
                </para>
                <para>
                    Because this function retrieves the size of each window frame edge and not the offset along a particular
                    coordinate axis, the retrieved values will always be zero or positive.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="left">The size, in screen coordinates, of the left edge of the window frame</param>
            <param name="top">The size, in screen coordinates, of the top edge of the window frame</param>
            <param name="right">The size, in screen coordinates, of the right edge of the window frame.</param>
            <param name="bottom">The size, in screen coordinates, of the bottom edge of the window frame</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.MaximizeWindow(System.IntPtr)">
            <summary>
                This function maximizes the specified window if it was previously not maximized. If the window is already
                maximized, this function does nothing.
                <para>If the specified window is a full screen window, this function does nothing.</para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.IconifyWindow(System.IntPtr)">
            <summary>
                This function iconifies (minimizes) the specified window if it was previously restored.
                <para>If the window is already iconified, this function does nothing.</para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.RestoreWindow(System.IntPtr)">
            <summary>
                This function restores the specified window if it was previously iconified (minimized) or maximized.
                <para>If the window is already restored, this function does nothing.</para>
                <para>
                    If the specified window is a full screen window, the resolution chosen for the window is restored on the
                    selected monitor.
                </para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.MakeContextCurrent(System.IntPtr)">
            <summary>
                This function makes the OpenGL or OpenGL ES context of the specified window current on the calling thread.
                <para>
                    A context can only be made current on a single thread at a time and each thread can have only a single
                    current context at a time.
                </para>
                <para>By default, making a context non-current implicitly forces a pipeline flush.</para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SwapBuffers(System.IntPtr)">
            <summary>
                This function swaps the front and back buffers of the specified window when rendering with OpenGL or OpenGL ES.
                <para>
                    If the swap interval is greater than zero, the GPU driver waits the specified number of screen updates before
                    swapping the buffers.
                </para>
                <para>This function does not apply to Vulkan.</para>
            </summary>
            <param name="window">A window instance.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SwapInterval(System.Int32)">
            <summary>
                Sets the swap interval for the current OpenGL or OpenGL ES context, i.e. the number of screen updates
                to wait from the time <see cref="M:Emission.Window.GLFW.Glfw.SwapBuffers(System.IntPtr)" /> was called before swapping the buffers and returning.
                <para>This is sometimes called vertical synchronization, vertical retrace synchronization or just vsync.</para>
                <para>
                    A context must be current on the calling thread. Calling this function without a current context will cause
                    an exception.
                </para>
                <para>
                    This function does not apply to Vulkan. If you are rendering with Vulkan, see the present mode of your
                    swapchain instead.
                </para>
            </summary>
            <param name="interval">
                The minimum number of screen updates to wait for until the buffers are swapped by
                <see cref="M:Emission.Window.GLFW.Glfw.SwapBuffers(System.IntPtr)" />.
            </param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetExtensionSupported(System.Byte[])">
            <summary>
                Gets whether the specified API extension is supported by the current OpenGL or OpenGL ES context.
                <para>It searches both for client API extension and context creation API extensions.</para>
            </summary>
            <param name="extension">The extension name as an array of ASCII encoded bytes.</param>
            <returns><c>true</c> if the extension is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.DefaultWindowHints">
            <summary>
                This function resets all window hints to their default values.
            </summary>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowShouldClose(System.IntPtr)">
            <summary>
                Gets the value of the close flag of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns><c>true</c> if close flag is present; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowShouldClose(System.IntPtr,System.Boolean)">
            <summary>
                Sets the value of the close flag of the specified window.
                <para>This can be used to override the user's attempt to close the window, or to signal that it should be closed.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="close"><c>true</c> to set close flag, or <c>false</c> to cancel flag.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowIcon(System.IntPtr,System.Int32,Emission.IO.Icon[])">
            <summary>
                Sets the icon of the specified window. If passed an array of candidate images, those of or closest to
                the sizes desired by the system are selected. If no images are specified, the window reverts to its default icon.
                <para>
                    The desired image sizes varies depending on platform and system settings. The selected images will be
                    rescaled as needed. Good sizes include 16x16, 32x32 and 48x48.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="count">The number of images in <paramref name="images" />.</param>
            <param name="images">An array of icon images.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WaitEvents">
            <summary>
                This function puts the calling thread to sleep until at least one event is available in the event queue. Once one
                or more events are available, it behaves exactly like glfwPollEvents, i.e. the events in the queue are processed
                and the function then returns immediately. Processing events will cause the window and input callbacks associated
                with those events to be called.
                <para>
                    Since not all events are associated with callbacks, this function may return without a callback having been
                    called even if you are monitoring all callbacks.
                </para>
                <para>
                    On some platforms, a window move, resize or menu operation will cause event processing to block. This is due
                    to how event processing is designed on those platforms. You can use the window refresh callback to redraw the
                    contents of your window when necessary during such operations.
                </para>
            </summary>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.PollEvents">
            <summary>
                This function processes only those events that are already in the event queue and then returns immediately.
                Processing events will cause the window and input callbacks associated with those events to be called.
                <para>
                    On some platforms, a window move, resize or menu operation will cause event processing to block. This is due
                    to how event processing is designed on those platforms. You can use the window refresh callback to redraw the
                    contents of your window when necessary during such operations.
                </para>
                <para>
                    On some platforms, certain events are sent directly to the application without going through the event queue,
                    causing callbacks to be called outside of a call to one of the event processing functions.
                </para>
            </summary>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.PostEmptyEvent">
            <summary>
                This function posts an empty event from the current thread to the event queue, causing <see cref="M:Emission.Window.GLFW.Glfw.WaitEvents" /> or
                <see cref="M:Emission.Window.GLFW.Glfw.WaitEventsTimeout(System.Double)" /> to return.
            </summary>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WaitEventsTimeout(System.Double)">
            <summary>
                This function puts the calling thread to sleep until at least one event is available in the event queue, or until
                the specified timeout is reached. If one or more events are available, it behaves exactly like
                <see cref="M:Emission.Window.GLFW.Glfw.PollEvents" />, i.e. the events in the queue are processed and the function then returns immediately.
                Processing events will cause the window and input callbacks associated with those events to be called.
                <para>The timeout value must be a positive finite number.</para>
                <para>
                    Since not all events are associated with callbacks, this function may return without a callback having been
                    called even if you are monitoring all callbacks.
                </para>
                <para>
                    On some platforms, a window move, resize or menu operation will cause event processing to block. This is due
                    to how event processing is designed on those platforms. You can use the window refresh callback to redraw the
                    contents of your window when necessary during such operations.
                </para>
            </summary>
            <param name="timeout">The maximum amount of time, in seconds, to wait.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetCloseCallback(System.IntPtr,Emission.Window.GLFW.WindowCallback)">
            <summary>
                Sets the close callback of the specified window, which is called when the user attempts to close the
                window, for example by clicking the close widget in the title bar.
            </summary>
            <param name="window">A window instance.</param>
            <param name="closeCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetWindowMonitor(System.IntPtr)">
            <summary>
                Gets the handle of the monitor that the specified window is in full screen on.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The monitor, or <see cref="F:Emission.Monitor.None" /> if the window is in windowed mode or an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowMonitor(System.IntPtr,Emission.Monitor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the monitor that the window uses for full screen mode or, if the monitor is
                <see cref="F:Emission.Monitor.None" />, makes it windowed mode.
                <para>
                    When setting a monitor, this function updates the width, height and refresh rate of the desired video mode
                    and switches to the video mode closest to it. The window position is ignored when setting a monitor.
                </para>
                <para>
                    When the monitor is <see cref="F:Emission.Monitor.None" />, the position, width and height are used to place the window
                    client area. The refresh rate is ignored when no monitor is specified.
                </para>
                <para>
                    If you only wish to update the resolution of a full screen window or the size of a windowed mode window, use
                    <see cref="M:Emission.Window.GLFW.Glfw.SetWindowSize(System.IntPtr,System.Int32,System.Int32)" />.
                </para>
                <para>
                    When a window transitions from full screen to windowed mode, this function restores any previous window
                    settings such as whether it is decorated, floating, resizable, has size or aspect ratio limits, etc..
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="monitor">The desired monitor, or <see cref="F:Emission.Monitor.None" /> to set windowed mode.</param>
            <param name="x">The desired x-coordinate of the upper-left corner of the client area.</param>
            <param name="y">The desired y-coordinate of the upper-left corner of the client area.</param>
            <param name="width">The desired width, in screen coordinates, of the client area or video mode.</param>
            <param name="height">The desired height, in screen coordinates, of the client area or video mode.</param>
            <param name="refreshRate">The desired refresh rate, in Hz, of the video mode, or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetGammaRamp(Emission.Monitor,Emission.Window.GLFW.GammaRamp)">
            <summary>
                Sets the current gamma ramp for the specified monitor.
                <para>
                    The original gamma ramp for that monitor is saved by GLFW the first time this function is called and is
                    restored by <see cref="M:Emission.Window.GLFW.Glfw.Terminate" />.
                </para>
                <para>WARNING: Gamma ramps with sizes other than 256 are not supported on some platforms (Windows).</para>
            </summary>
            <param name="monitor">The monitor whose gamma ramp to set.</param>
            <param name="gammaRamp">The gamma ramp to use.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetGamma(Emission.Monitor,System.Single)">
            <summary>
                This function generates a 256-element gamma ramp from the specified exponent and then calls
                <see cref="M:Emission.Window.GLFW.Glfw.SetGammaRamp(Emission.Monitor,Emission.Window.GLFW.GammaRamp)" /> with it.
                <para>The value must be a finite number greater than zero.</para>
            </summary>
            <param name="monitor">The monitor whose gamma ramp to set.</param>
            <param name="gamma">The desired exponent.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetDropCallback(System.IntPtr,Emission.Window.GLFW.FileDropCallback)">
            <summary>
                Sets the file drop callback of the specified window, which is called when one or more dragged files
                are dropped on the window.
                <para>
                    Because the path array and its strings may have been generated specifically for that event, they are not
                    guaranteed to be valid after the callback has returned. If you wish to use them after the callback returns, you
                    need to make a deep copy.
                </para>
            </summary>
            <param name="window">The window whose callback to set.</param>
            <param name="dropCallback">The new file drop callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.CreateCursor(Emission.IO.Icon,System.Int32,System.Int32)">
            <summary>
                Creates a new custom cursor image that can be set for a window with glfwSetCursor.
                <para>
                    The cursor can be destroyed with <see cref="M:Emission.Window.GLFW.Glfw.DestroyCursor(Emission.Window.Cursor)" />. Any remaining cursors are destroyed by
                    <see cref="M:Emission.Window.GLFW.Glfw.Terminate" />.
                </para>
                <para>
                    The pixels are 32-bit, little-endian, non-premultiplied RGBA, i.e. eight bits per channel. They are arranged
                    canonically as packed sequential rows, starting from the top-left corner.
                </para>
                <para>
                    The cursor hotspot is specified in pixels, relative to the upper-left corner of the cursor image. Like all
                    other coordinate systems in GLFW, the X-axis points to the right and the Y-axis points down.
                </para>
            </summary>
            <param name="icon">The image.</param>
            <param name="xHotspot">The x hotspot.</param>
            <param name="yHotspot">The y hotspot.</param>
            <returns>The created cursor.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.DestroyCursor(Emission.Window.Cursor)">
            <summary>
                This function destroys a cursor previously created with <see cref="M:Emission.Window.GLFW.Glfw.CreateCursor(Emission.IO.Icon,System.Int32,System.Int32)" />. Any remaining cursors will be
                destroyed by <see cref="M:Emission.Window.GLFW.Glfw.Terminate" />.
            </summary>
            <param name="cursor">The cursor object to destroy.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetCursor(System.IntPtr,Emission.Window.Cursor)">
            <summary>
                Sets the cursor image to be used when the cursor is over the client area of the specified window.
                <para>The set cursor will only be visible when the cursor mode of the window is <see cref="F:Emission.Window.GLFW.CursorMode.Normal" />.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="cursor">The cursor to set, or <see cref="F:Emission.Window.Cursor.None" /> to switch back to the default arrow cursor.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.CreateStandardCursor(Emission.Window.GLFW.CursorType)">
            <summary>
                Returns a cursor with a standard shape, that can be set for a window with <see cref="M:Emission.Window.GLFW.Glfw.SetCursor(System.IntPtr,Emission.Window.Cursor)" />.
            </summary>
            <param name="type">The type of cursor to create.</param>
            <returns>A new cursor ready to use or <see cref="F:Emission.Window.Cursor.None" /> if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetCursorPosition(System.IntPtr,System.Double@,System.Double@)">
            <summary>
                Gets the position of the cursor, in screen coordinates, relative to the upper-left corner of the
                client area of the specified window
                <para>
                    If the cursor is disabled then the cursor position is unbounded and limited only by the minimum and maximum
                    values of a double.
                </para>
                <para>
                    The coordinate can be converted to their integer equivalents with the floor function. Casting directly to an
                    integer type works for positive coordinates, but fails for negative ones.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="x">The cursor x-coordinate, relative to the left edge of the client area.</param>
            <param name="y">The cursor y-coordinate, relative to the left edge of the client area.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetCursorPosition(System.IntPtr,System.Double,System.Double)">
            <summary>
                Sets the position, in screen coordinates, of the cursor relative to the upper-left corner of the
                client area of the specified window. The window must have input focus. If the window does not have input focus when
                this function is called, it fails silently.
                <para>
                    If the cursor mode is disabled then the cursor position is unconstrained and limited only by the minimum and
                    maximum values of a <see cref="T:System.Double" />.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="x">The desired x-coordinate, relative to the left edge of the client area.</param>
            <param name="y">The desired y-coordinate, relative to the left edge of the client area.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetCursorPositionCallback(System.IntPtr,Emission.Window.GLFW.MouseCallback)">
            <summary>
                Sets the cursor position callback of the specified window, which is called when the cursor is moved.
                <para>
                    The callback is provided with the position, in screen coordinates, relative to the upper-left corner of the
                    client area of the window.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="mouseCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or<c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetCursorEnterCallback(System.IntPtr,Emission.Window.GLFW.MouseEnterCallback)">
            <summary>
                Sets the cursor boundary crossing callback of the specified window, which is called when the cursor
                enters or leaves the client area of the window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="mouseCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetMouseButtonCallback(System.IntPtr,Emission.Window.GLFW.MouseButtonCallback)">
            <summary>
                Sets the mouse button callback of the specified window, which is called when a mouse button is
                pressed or released.
                <para>
                    When a window loses input focus, it will generate synthetic mouse button release events for all pressed mouse
                    buttons. You can tell these events from user-generated events by the fact that the synthetic ones are generated
                    after the focus loss event has been processed, i.e. after the window focus callback has been called.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="mouseCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetScrollCallback(System.IntPtr,Emission.Window.GLFW.MouseCallback)">
            <summary>
                Sets the scroll callback of the specified window, which is called when a scrolling device is used,
                such as a mouse wheel or scrolling area of a touchpad.
                <para>The scroll callback receives all scrolling input, like that from a mouse wheel or a touchpad scrolling area.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="mouseCallback">	The new scroll callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetMouseButton(System.IntPtr,Emission.MouseButton)">
            <summary>
                Gets the last state reported for the specified mouse button to the specified window.
                <para>
                    If the <see cref="F:Emission.InputMode.StickyMouseButton" /> input mode is enabled, this function returns
                    <see cref="F:Emission.InputState.Press" /> the first time you call it for a mouse button that was pressed, even if that
                    mouse button has already been released.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="button">The desired mouse button.</param>
            <returns>The input state of the <paramref name="button" />.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowUserPointer(System.IntPtr,System.IntPtr)">
            <summary>
                Sets the user-defined pointer of the specified window. The current value is retained until the window
                is destroyed. The initial value is <see cref="F:System.IntPtr.Zero" />.
            </summary>
            <param name="window">A window instance.</param>
            <param name="userPointer">The user pointer value.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetWindowUserPointer(System.IntPtr)">
            <summary>
                Gets the current value of the user-defined pointer of the specified window. The initial value is
                <see cref="F:System.IntPtr.Zero" />.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The user-defined pointer.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowSizeLimits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the size limits of the client area of the specified window. If the window is full screen, the
                size limits only take effect once it is made windowed. If the window is not resizable, this function does nothing.
                <para>The size limits are applied immediately to a windowed mode window and may cause it to be resized.</para>
                <para>
                    The maximum dimensions must be greater than or equal to the minimum dimensions and all must be greater than
                    or equal to zero.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="minWidth">The minimum width of the client area.</param>
            <param name="minHeight">The minimum height of the client area.</param>
            <param name="maxWidth">The maximum width of the client area.</param>
            <param name="maxHeight">The maximum height of the client area.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowAspectRatio(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Sets the required aspect ratio of the client area of the specified window. If the window is full
                screen, the aspect ratio only takes effect once it is made windowed. If the window is not resizable, this function
                does nothing.
                <para>
                    The aspect ratio is specified as a numerator and a denominator and both values must be greater than zero. For
                    example, the common 16:9 aspect ratio is specified as 16 and 9, respectively.
                </para>
                <para>
                    If the numerator and denominator is set to <see cref="F:Emission.Window.GLFW.Constants.Default" /> then the aspect ratio limit is
                    disabled.
                </para>
                <para>The aspect ratio is applied immediately to a windowed mode window and may cause it to be resized.</para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="numerator">The numerator of the desired aspect ratio.</param>
            <param name="denominator">The denominator of the desired aspect ratio.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetMonitorPhysicalSize(Emission.Monitor,System.Int32@,System.Int32@)">
            <summary>
                Gets the size, in millimeters, of the display area of the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <param name="width">The width, in millimeters, of the monitor's display area.</param>
            <param name="height">The height, in millimeters, of the monitor's display area.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetMonitorPosition(Emission.Monitor,System.Int32@,System.Int32@)">
            <summary>
                Gets the position, in screen coordinates, of the upper-left corner of the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <param name="x">The monitor x-coordinate.</param>
            <param name="y">The monitor y-coordinate.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetCharCallback(System.IntPtr,Emission.Window.GLFW.CharCallback)">
            <summary>
                Sets the character callback of the specified window, which is called when a Unicode character is
                input.
                <para>
                    The character callback is intended for Unicode text input. As it deals with characters, it is keyboard layout
                    dependent, whereas the key callback is not. Characters do not map 1:1 to physical keys, as a key may produce
                    zero, one or more characters. If you want to know whether a specific physical key was pressed or released, see
                    the key callback instead.
                </para>
                <para>
                    The character callback behaves as system text input normally does and will not be called if modifier keys are
                    held down that would prevent normal text input on that platform, for example a Super (Command) key on OS X or
                    Alt key on Windows. There is a character with modifiers callback that receives these events.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="charCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetCharModsCallback(System.IntPtr,Emission.Window.GLFW.CharModsCallback)">
            <summary>
                Sets the character with modifiers callback of the specified window, which is called when a Unicode
                character is input regardless of what modifier keys are used.
                <para>
                    The character with modifiers callback is intended for implementing custom Unicode character input. For
                    regular Unicode text input, see the character callback. Like the character callback, the character with
                    modifiers callback deals with characters and is keyboard layout dependent. Characters do not map 1:1 to
                    physical keys, as a key may produce zero, one or more characters. If you want to know whether a specific
                    physical key was pressed or released, see the key callback instead.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="charCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetKey(System.IntPtr,Emission.Keys)">
            <summary>
                Gets the last state reported for the specified key to the specified window.
                <para>The higher-level action <see cref="F:Emission.InputState.Repeat" /> is only reported to the key callback.</para>
                <para>
                    If the sticky keys input mode is enabled, this function returns <see cref="F:Emission.InputState.Press" /> the first
                    time you call it for a key that was pressed, even if that key has already been released.
                </para>
                <para>
                    The key functions deal with physical keys, with key tokens named after their use on the standard US keyboard
                    layout. If you want to input text, use the Unicode character callback instead.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="key">The key to query.</param>
            <returns>Either <see cref="F:Emission.InputState.Press" /> or <see cref="F:Emission.InputState.Release" />.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetFramebufferSizeCallback(System.IntPtr,Emission.Window.GLFW.SizeCallback)">
            <summary>
                Sets the framebuffer resize callback of the specified window, which is called when the framebuffer of
                the specified window is resized.
            </summary>
            <param name="window">A window instance.</param>
            <param name="sizeCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowRefreshCallback(System.IntPtr,Emission.Window.GLFW.WindowCallback)">
            <summary>
                Sets the refresh callback of the specified window, which is called when the client area of the window
                needs to be redrawn, for example if the window has been exposed after having been covered by another window.
                <para>
                    On compositing window systems such as Aero, Compiz or Aqua, where the window contents are saved off-screen,
                    this callback may be called only very infrequently or never at all.
                </para>
            </summary>
            <param name="window">A window instance.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetKeyCallback(System.IntPtr,Emission.Window.GLFW.KeyCallback)">
            <summary>
                Sets the key callback of the specified window, which is called when a key is pressed, repeated or
                released.
                <para>
                    The key functions deal with physical keys, with layout independent key tokens named after their values in the
                    standard US keyboard layout. If you want to input text, use the character callback instead.
                </para>
                <para>
                    When a window loses input focus, it will generate synthetic key release events for all pressed keys. You can
                    tell these events from user-generated events by the fact that the synthetic ones are generated after the focus
                    loss event has been processed, i.e. after the window focus callback has been called.
                </para>
                <para>
                    The scancode of a key is specific to that platform or sometimes even to that machine. Scancodes are intended
                    to allow users to bind keys that don't have a GLFW key token. Such keys have key set to
                    <see cref="F:Emission.Keys.Unknown" />, their state is not saved and so it cannot be queried with <see cref="M:Emission.Window.GLFW.Glfw.GetKey(System.IntPtr,Emission.Keys)" />.
                </para>
                <para>Sometimes GLFW needs to generate synthetic key events, in which case the scancode may be zero.</para>
            </summary>
            <param name="window">The new key callback, or <c>null</c> to remove the currently set callback.</param>
            <param name="keyCallback">The key callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.JoystickPresent(Emission.Window.GLFW.Joystick)">
            <summary>
                Gets whether the specified joystick is present.
            </summary>
            <param name="joystick">The joystick to query.</param>
            <returns><c>true</c> if the joystick is present, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetJoystickCallback(Emission.Window.GLFW.JoystickCallback)">
            <summary>
                Sets the joystick configuration callback, or removes the currently set callback.
                <para>This is called when a joystick is connected to or disconnected from the system.</para>
            </summary>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetMonitorCallback(Emission.Window.GLFW.MonitorCallback)">
            <summary>
                Sets the monitor configuration callback, or removes the currently set callback. This is called when a
                monitor is connected to or disconnected from the system.
            </summary>
            <param name="monitorCallback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowIconifyCallback(System.IntPtr,Emission.Window.GLFW.IconifyCallback)">
            <summary>
                Sets the iconification callback of the specified window, which is called when the window is iconified
                or restored.
            </summary>
            <param name="window">A window instance.</param>
            <param name="callback">The new callback, or <c>null</c> to remove the currently set callback.</param>
            <returns>The previously set callback, or <c>null</c> if no callback was set or the library had not been initialized.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetInputMode(System.IntPtr,Emission.InputMode,System.Int32)">
            <summary>
                Sets an input mode option for the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="mode">The mode to set a new value for.</param>
            <param name="value">The new value of the specified input mode.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetInputMode(System.IntPtr,Emission.InputMode)">
            <summary>
                Gets the value of an input option for the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="mode">The mode to query.</param>
            <returns>Dependent on mode being queried.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetMonitorWorkArea(System.IntPtr,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Returns the position, in screen coordinates, of the upper-left corner of the work area of the specified
                monitor along with the work area size in screen coordinates.
                <para>
                    The work area is defined as the area of the monitor not occluded by the operating system task bar
                    where present. If no task bar exists then the work area is the monitor resolution in screen
                    coordinates.
                </para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="width">The monitor width.</param>
            <param name="height">The monitor height.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,System.Int32)">
            <summary>
                Sets hints for the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,System.Int32)" /> or <see cref="M:Emission.Window.GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />.
                </para>
            </summary>
            <param name="windowHint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetWindowAttribute(System.IntPtr,System.Int32)">
            <summary>
                Gets the value of the specified window attribute.
            </summary>
            <param name="window">A window instance.</param>
            <param name="attribute">The attribute to retrieve.</param>
            <returns>The value of the <paramref name="attribute" />.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.String,Emission.Monitor,System.IntPtr)">
            <summary>
                This function creates a window and its associated OpenGL or OpenGL ES context. Most of the options controlling how
                the window and its context should be created are specified with window hints.
            </summary>
            <param name="width">The desired width, in screen coordinates, of the window. This must be greater than zero.</param>
            <param name="height">The desired height, in screen coordinates, of the window. This must be greater than zero.</param>
            <param name="title">The initial window title.</param>
            <param name="monitor">The monitor to use for full screen mode, or <see cref="F:Emission.Monitor.None" /> for windowed mode.</param>
            <param name="share">
                A window instance whose context to share resources with, or <see cref="!:Window.None" /> to not share
                resources..
            </param>
            <returns>The created window, or <see cref="!:Window.None" /> if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetClientApi(System.IntPtr)">
            <summary>
                Gets the client API.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The client API.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetClipboardString(System.IntPtr)">
            <summary>
                Gets the contents of the system clipboard, if it contains or is convertible to a UTF-8 encoded
                string.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The contents of the clipboard as a UTF-8 encoded string, or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetContextCreationApi(System.IntPtr)">
            <summary>
                Gets the API used to create the context of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The API used to create the context.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetContextVersion(System.IntPtr)">
            <summary>
                Gets the context version of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>The context version.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetExtensionSupported(System.String)">
            <summary>
                Gets whether the specified API extension is supported by the current OpenGL or OpenGL ES context.
                <para>It searches both for client API extension and context creation API extensions.</para>
            </summary>
            <param name="extension">The extension name.</param>
            <returns><c>true</c> if the extension is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetGammaRamp(Emission.Monitor)">
            <summary>
                Gets the current gamma ramp of the specified monitor.
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The current gamma ramp, or empty structure if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetIsDebugContext(System.IntPtr)">
            <summary>
                Gets value indicating if specified window is using a debug context.
            </summary>
            <param name="window">A window instance.</param>
            <returns><c>true</c> if window context is debug context, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetIsForwardCompatible(System.IntPtr)">
            <summary>
                Gets value indicating if specified window is using a forward compatible context.
            </summary>
            <param name="window">A window instance.</param>
            <returns><c>true</c> if window context is forward compatible, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetJoystickAxes(Emission.Window.GLFW.Joystick)">
            <summary>
                Gets the values of all axes of the specified joystick. Each element in the array is a value
                between -1.0 and 1.0.
                <para>
                    Querying a joystick slot with no device present is not an error, but will return an empty array. Call
                    <see cref="M:Emission.Window.GLFW.Glfw.JoystickPresent(Emission.Window.GLFW.Joystick)" /> to check device presence.
                </para>
            </summary>
            <param name="joystick">The joystick to query.</param>
            <returns>An array of axes values.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetJoystickButtons(Emission.Window.GLFW.Joystick)">
            <summary>
                Gets the state of all buttons of the specified joystick.
            </summary>
            <param name="joystick">The joystick to query.</param>
            <returns>An array of values, either <see cref="F:Emission.InputState.Press" /> and <see cref="F:Emission.InputState.Release" />.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetJoystickName(Emission.Window.GLFW.Joystick)">
            <summary>
                Gets the name of the specified joystick.
                <para>
                    Querying a joystick slot with no device present is not an error. <see cref="M:Emission.Window.GLFW.Glfw.JoystickPresent(Emission.Window.GLFW.Joystick)" /> to check
                    device presence.
                </para>
            </summary>
            <param name="joystick">The joystick to query.</param>
            <returns>The name of the joystick, or <c>null</c> if the joystick is not present or an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetKeyName(Emission.Keys,System.Int32)">
            <summary>
                Gets the localized name of the specified printable key. This is intended for displaying key
                bindings to the user.
                <para>
                    If the key is <see cref="F:Emission.Keys.Unknown" />, the scancode is used instead, otherwise the scancode is ignored.
                    If a non-printable key or (if the key is <see cref="F:Emission.Keys.Unknown" />) a scancode that maps to a non-printable
                    key is specified, this function returns NULL.
                </para>
            </summary>
            <param name="key">The key to query.</param>
            <param name="scanCode">The scancode of the key to query.</param>
            <returns>The localized name of the key.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetMonitorName(Emission.Monitor)">
            <summary>
                Gets a human-readable name, encoded as UTF-8, of the specified monitor.
                <para>
                    The name typically reflects the make and model of the monitor and is not guaranteed to be unique among the
                    connected monitors.
                </para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The name of the monitor, or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetProcAddress(System.String)">
            <summary>
                Gets the address of the specified OpenGL or OpenGL ES core or extension function, if it is
                supported by the current context.
                This function does not apply to Vulkan. If you are rendering with Vulkan, use
                <see cref="M:Emission.Window.GLFW.Vulkan.GetInstanceProcAddress(System.IntPtr,System.Byte[])" /> instead.
            </summary>
            <param name="procName">Name of the function.</param>
            <returns>The address of the function, or <see cref="F:System.IntPtr.Zero" /> if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetProfile(System.IntPtr)">
            <summary>
                Gets the profile of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>Profile of the window.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetRobustness(System.IntPtr)">
            <summary>
                Gets the robustness value of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <returns>Current set value of the robustness.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetVideoMode(Emission.Monitor)">
            <summary>
                Gets the current video mode of the specified monitor.
                <para>
                    If you have created a full screen window for that monitor, the return value will depend on whether that
                    window is iconified.
                </para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The current mode of the monitor, or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetVideoModes(Emission.Monitor)">
            <summary>
                Gets an array of all video modes supported by the specified monitor.
                <para>
                    The returned array is sorted in ascending order, first by color bit depth (the sum of all channel depths) and
                    then by resolution area (the product of width and height).
                </para>
            </summary>
            <param name="monitor">The monitor to query.</param>
            <returns>The array of video modes.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.GetWindowAttribute(System.IntPtr,Emission.Window.GLFW.WindowAttribute)">
            <summary>
                Gets the value of an attribute of the specified window or its OpenGL or OpenGL ES context.
            </summary>
            <param name="window">A window instance.</param>
            <param name="attribute">The window attribute whose value to return.</param>
            <returns>The value of the attribute, or zero if an error occurred.</returns>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetClipboardString(System.IntPtr,System.String)">
            <summary>
                Sets the system clipboard to the specified string.
            </summary>
            <param name="window">A window instance.</param>
            <param name="str">The string to set to the clipboard.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.SetWindowTitle(System.IntPtr,System.String)">
            <summary>
                Sets the window title, encoded as UTF-8, of the specified window.
            </summary>
            <param name="window">A window instance.</param>
            <param name="title">The title to set.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,System.Boolean)">
            <summary>
                Sets hints for the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,System.Int32)" /> or <see cref="M:Emission.Window.GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />.
                </para>
            </summary>
            <param name="windowHint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,Emission.Window.GLFW.ClientApi)">
            <summary>
                Sets hints for the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,System.Int32)" /> or <see cref="M:Emission.Window.GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />.
                </para>
            </summary>
            <param name="windowHint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,Emission.Window.GLFW.Constants)">
            <summary>
                Sets hints for the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,System.Int32)" /> or <see cref="M:Emission.Window.GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />.
                </para>
            </summary>
            <param name="windowHint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,Emission.Window.GLFW.ContextApi)">
            <summary>
                Sets hints for the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,System.Int32)" /> or <see cref="M:Emission.Window.GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />.
                </para>
            </summary>
            <param name="windowHint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,Emission.Window.GLFW.Robustness)">
            <summary>
                Sets hints for the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,System.Int32)" /> or <see cref="M:Emission.Window.GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />.
                </para>
            </summary>
            <param name="windowHint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,Emission.Window.GLFW.Profile)">
            <summary>
                Sets hints for the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,System.Int32)" /> or <see cref="M:Emission.Window.GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />.
                </para>
            </summary>
            <param name="windowHint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,Emission.Window.GLFW.ReleaseBehavior)">
            <summary>
                Sets hints for the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />. The hints, once set, retain their values
                until changed by a call to <see cref="M:Emission.Window.GLFW.Glfw.WindowHint(Emission.Window.GLFW.WindowHint,System.Int32)" /> or <see cref="M:Emission.Window.GLFW.Glfw.DefaultWindowHints" />, or until the
                library is
                terminated.
                <para>
                    This function does not check whether the specified hint values are valid. If you set hints to invalid values
                    this will instead be reported by the next call to <see cref="M:Emission.Window.GLFW.Glfw.CreateWindow(System.Int32,System.Int32,System.Byte[],Emission.Monitor,System.IntPtr)" />.
                </para>
            </summary>
            <param name="windowHint">The hint.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Emission.Window.GLFW.Profile">
            <summary>
                Strongly-typed values used for getting/setting window hints.
                <para>If OpenGL ES is requested, this hint is ignored.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Profile.Any">
            <summary>
                Indicates no preference on profile.
                <para>If requesting an OpenGL version below 3.2, this profile must be used.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Profile.Core">
            <summary>
                Indicates OpenGL Core profile.
                <para>Only if requested OpenGL is greater than 3.2.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Profile.Compatibility">
            <summary>
                Indicates OpenGL Compatibility profile.
                <para>Only if requested OpenGL is greater than 3.2.</para>
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.ReleaseBehavior">
            <summary>
                Describes the release behavior to be used by the context.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ReleaseBehavior.Any">
            <summary>
                The default behavior of the context creation API will be used.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ReleaseBehavior.Flush">
            <summary>
                The pipeline will be flushed whenever the context is released from being the current one.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.ReleaseBehavior.None">
            <summary>
                The pipeline will not be flushed on release.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.Robustness">
            <summary>
                Describes the robustness strategy to be used by the context.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Robustness.None">
            <summary>
                Disabled/no strategy (default)
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Robustness.NoResetNotification">
            <summary>
                No notification.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.Robustness.LoseContextOnReset">
            <summary>
                The context is lost on reset, use glGetGraphicsResetStatus for more information.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.VideoMode">
            <summary>
                Structure that describes a single video mode.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.VideoMode.Width">
            <summary>
                The width, in screen coordinates, of the video mode.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.VideoMode.Height">
            <summary>
                The height, in screen coordinates, of the video mode.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.VideoMode.RedBits">
            <summary>
                The bit depth of the red channel of the video mode.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.VideoMode.GreenBits">
            <summary>
                The bit depth of the green channel of the video mode.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.VideoMode.BlueBits">
            <summary>
                The bit depth of the blue channel of the video mode.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.VideoMode.RefreshRate">
            <summary>
                The refresh rate, in Hz, of the video mode.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.WindowAttribute">
            <summary>
                Strongly-typed values used for getting/setting window hints.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowAttribute.Focused">
            <summary>
                Indicates whether the windowed mode window will be given input focus when created.
                <para>This hint is ignored for full screen and initially hidden windows.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowAttribute.AutoIconify">
            <summary>
                Indicates whether the full screen window will automatically iconify and restore the previous video mode on input
                focus loss.
                <para>This hint is ignored for windowed mode windows.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowAttribute.Maximized">
            <summary>
                Indicates whether the windowed mode window will be maximized when created.
                <para>This hint is ignored for full screen windows.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowAttribute.Visible">
            <summary>
                Indicates whether the windowed mode window will be initially visible.
                <para>This hint is ignored for full screen windows.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowAttribute.Resizable">
            <summary>
                Indicates whether the windowed mode window will be resizable by the <i>user</i>.
                <para>The window will still be resizable using the <see cref="M:Emission.Window.GLFW.Glfw.SetWindowSize(System.IntPtr,System.Int32,System.Int32)" /> function.</para>
                <para>This hint is ignored for full screen windows.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowAttribute.Decorated">
            <summary>
                Indicates whether the windowed mode window will have window decorations such as a border, a close widget, etc.
                <para>An undecorated window may still allow the user to generate close events on some platforms.</para>
                <para>This hint is ignored for full screen windows.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowAttribute.Floating">
            <summary>
                Indicates whether the windowed mode window will be floating above other regular windows, also called topmost or
                always-on-top.
                <para>This is intended primarily for debugging purposes and cannot be used to implement proper full screen windows.</para>
                <para>This hint is ignored for full screen windows.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowAttribute.MouseHover">
            <summary>
                Indicates whether the cursor is currently directly over the content area of the window, with no other
                windows between.
            </summary>
        </member>
        <member name="T:Emission.Window.GLFW.WindowHint">
            <summary>
                Strongly-typed values for setting window hints.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.Focused">
            <summary>
                Specifies whether the windowed mode window will be given input focus when created. This hint is ignored for full
                screen and initially hidden windows.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.Resizable">
            <summary>
                Specifies whether the windowed mode window will be resizable by the user. The window will still be resizable
                programmatically. This hint is ignored for full screen windows.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.Visible">
            <summary>
                Specifies whether the windowed mode window will be initially visible.This hint is ignored for full screen windows.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.Decorated">
            <summary>
                Specifies whether the windowed mode window will have window decorations such as a border, a close widget, etc.An
                undecorated window may still allow the user to generate close events on some platforms.This hint is ignored for
                full screen windows.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.AutoIconify">
            <summary>
                Specifies whether the full screen window will automatically iconify and restore the previous video mode on input
                focus loss. This hint is ignored for windowed mode windows.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.Floating">
            <summary>
                Specifies whether the windowed mode window will be floating above other regular windows, also called topmost or
                always-on-top.This is intended primarily for debugging purposes and cannot be used to implement proper full screen
                windows. This hint is ignored for full screen windows.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.Maximized">
            <summary>
                Specifies whether the windowed mode window will be maximized when created. This hint is ignored for full screen
                windows.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.RedBits">
            <summary>
                Specifies the desired bit depth of the red component for default framebuffer. <see cref="F:Emission.Window.GLFW.Constants.Default" />
                means
                the application has no preference.
                <para>Default Value: <c>8</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.GreenBits">
            <summary>
                Specifies the desired bit depth of the green component for default framebuffer. <see cref="F:Emission.Window.GLFW.Constants.Default" />
                means
                the application has no preference.
                <para>Default Value: <c>8</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.BlueBits">
            <summary>
                Specifies the desired bit depth of the blue component for default framebuffer. <see cref="F:Emission.Window.GLFW.Constants.Default" />
                means
                the application has no preference.
                <para>Default Value: <c>8</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.AlphaBits">
            <summary>
                Specifies the desired bit depth of the alpha component for default framebuffer. <see cref="F:Emission.Window.GLFW.Constants.Default" />
                means
                the application has no preference.
                <para>Default Value: <c>8</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.DepthBits">
            <summary>
                Specifies the desired bit depth of for default framebuffer. <see cref="F:Emission.Window.GLFW.Constants.Default" />"/> means the
                application
                has no preference.
                <para>Default Value: <c>24</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.StencilBits">
            <summary>
                Specifies the desired stencil bits for default framebuffer. <see cref="F:Emission.Window.GLFW.Constants.Default" /> means the application
                has
                no preference.
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.AccumRedBits">
            <summary>
                Specify the desired bit depths of the red component of the accumulation buffer. <see cref="F:Emission.Window.GLFW.Constants.Default" />
                means
                the application has no preference.
                <para>Accumulation buffers are a legacy OpenGL feature and should not be used in new code.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.AccumGreenBits">
            <summary>
                Specify the desired bit depths of the green component of the accumulation buffer. <see cref="F:Emission.Window.GLFW.Constants.Default" />
                means the application has no preference.
                <para>Accumulation buffers are a legacy OpenGL feature and should not be used in new code.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.AccumBlueBits">
            <summary>
                Specify the desired bit depths of the blue component of the accumulation buffer. <see cref="F:Emission.Window.GLFW.Constants.Default" />
                means the application has no preference.
                <para>Accumulation buffers are a legacy OpenGL feature and should not be used in new code.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.AccumAlphaBits">
            <summary>
                Specify the desired bit depths of the alpha component of the accumulation buffer.
                <para><see cref="F:Emission.Window.GLFW.Constants.Default" /> means the application has no preference.</para>
                <para>Accumulation buffers are a legacy OpenGL feature and should not be used in new code.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.AuxBuffers">
            <summary>
                Specifies the desired number of auxiliary buffers.<see cref="F:Emission.Window.GLFW.Constants.Default" /> means the application has no
                preference.
                <para>Auxiliary buffers are a legacy OpenGL feature and should not be used in new code.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.Stereo">
            <summary>
                Specifies whether to use stereoscopic rendering.
                <para>This is a hard constraint.</para>
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.Samples">
            <summary>
                Specifies the desired number of samples to use for multisampling.Zero disables multisampling.
                <para><see cref="F:Emission.Window.GLFW.Constants.Default" /> means the application has no preference.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.SrgbCapable">
            <summary>
                Specifies whether the framebuffer should be sRGB capable. If supported, a created OpenGL context will support the
                GL_FRAMEBUFFER_SRGB enable, also called GL_FRAMEBUFFER_SRGB_EXT) for controlling sRGB rendering and a created
                OpenGL ES context will always have sRGB rendering enabled.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.Doublebuffer">
            <summary>
                Specifies whether the framebuffer should be double buffered.You nearly always want to use double buffering.
                <para>This is a hard constraint.</para>
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.True" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.RefreshRate">
            <summary>
                Specifies the desired refresh rate for full screen windows.
                <para>If set to <see cref="F:Emission.Window.GLFW.Constants.Default" />, the highest available refresh rate will be used.</para>
                <para>This hint is ignored for windowed mode windows.</para>
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.Default" /></para>
                <para>Possible Values: <c>0</c> to <see cref="F:System.Int32.MaxValue" /> or <see cref="F:Emission.Window.GLFW.Constants.Default" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.ClientApi">
            <summary>
                Specifies which client API to create the context for.
                <para>This is a hard constraint.</para>
                <para>Default Value: <see cref="F:Emission.Window.GLFW.ClientApi.OpenGL" /></para>
                <para>Possible Values: Any of <see cref="T:Emission.Window.GLFW.ClientApi" /> values.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.ContextCreationApi">
            <summary>
                Specifies which context creation API to use to create the context.
                <para>If no client API is requested, this hint is ignored.</para>
                <para>This is a hard constraint. </para>
                <para>Default Value: <see cref="F:Emission.Window.GLFW.ContextApi.Native" /></para>
                <para>Possible Values: Any of <see cref="T:Emission.Window.GLFW.ContextApi" /> values.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.ContextVersionMajor">
            <summary>
                Specify the client API major version that the created context must be compatible with.
                <para>The exact behavior of this hint depends on the requested client API, see remarks for details.</para>
                <para>Default Value: <c>1</c></para>
                <para>Possible Values: Any valid major version of the chosen client API</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.ContextVersionMinor">
            <summary>
                Specify the client API minor version that the created context must be compatible with.
                <para>The exact behavior of this hint depends on the requested client API, see remarks for details.</para>
                <para>Default Value: <c>0</c></para>
                <para>Possible Values: Any valid minor version of the chosen client API</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.ContextRobustness">
            <summary>
                Specifies the robustness strategy to be used by the context.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Robustness.None" /></para>
                <para>Possible Values: Any of <see cref="T:Emission.Window.GLFW.Robustness" /> values</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.OpenglForwardCompatible">
            <summary>
                Specifies whether the OpenGL context should be forward-compatible, i.e. one where all functionality deprecated in
                the requested version of OpenGL is removed.
                <para>This must only be used if the requested OpenGL version is 3.0 or above.</para>
                <para>If OpenGL ES is requested, this hint is ignored</para>
                <para>Forward-compatibility is described in detail in the OpenGL Reference Manual.</para>
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.OpenglDebugContext">
            <summary>
                Specifies whether to create a debug OpenGL context, which may have additional error and performance issue reporting
                functionality.
                <para>If OpenGL ES is requested, this hint is ignored.</para>
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.OpenglProfile">
            <summary>
                Specifies which OpenGL profile to create the context for.
                <para>If requesting an OpenGL version below <c>3.2</c>, <see cref="F:Emission.Window.GLFW.Profile.Any" />  must be used.</para>
                <para>If OpenGL ES is requested, this hint is ignored.</para>
                <para>OpenGL profiles are described in detail in the OpenGL Reference Manual.</para>
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Profile.Any" /></para>
                <para>Possible Values: Any of <see cref="T:Emission.Window.GLFW.Profile" /> values</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.ContextReleaseBehavior">
            <summary>
                Specifies the release behavior to be used by the context.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.ReleaseBehavior.Any" /></para>
                <para>Possible Values: Any of <see cref="T:Emission.Window.GLFW.ReleaseBehavior" /> values</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.ContextNoError">
            <summary>
                Specifies whether errors should be generated by the context. If enabled, situations that would have generated
                errors instead cause undefined behavior.
                <para>Default Value: <see cref="F:Emission.Window.GLFW.Constants.False" /></para>
                <para>Possible Values: <see cref="F:Emission.Window.GLFW.Constants.True" /> or <see cref="F:Emission.Window.GLFW.Constants.False" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.JoystickHatButtons">
            <summary>
                Specifies whether to also expose joystick hats as buttons, for compatibility with earlier versions of
                GLFW (less than 3.3) that did not have <see cref="M:Emission.Window.GLFW.Glfw.GetJoystickHats(System.Int32)" />.
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.CocoaChDirResources">
            <summary>
                Specifies whether to set the current directory to the application to the Contents/Resources
                subdirectory of the application's bundle, if present.
                <para>macOS ONLY!</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.CocoaMenuBar">
            <summary>
                Specifies whether to create a basic menu bar, either from a nib or manually, when the first window is
                created, which is when AppKit is initialized.
                <para>macOS ONLY!</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.CenterCursor">
            <summary>
                Specifies whether the cursor should be centered over newly created full screen windows.
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
                <para>This hint is ignored for windowed mode windows.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.TransparentFramebuffer">
            <summary>
                Specifies whether the window framebuffer will be transparent.
                <para>
                    If enabled and supported by the system, the window framebuffer alpha channel will be used to combine
                    the framebuffer with the background. This does not affect window decorations.
                </para>
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.FocusOnShow">
            <summary>
                Specifies whether the window will be given input focus when <see cref="M:Emission.Window.GLFW.Glfw.ShowWindow(System.IntPtr)" /> is called.
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.ScaleToMonitor">
            <summary>
                Specifies whether the window content area should be resized based on the monitor content scale of any
                monitor it is placed on. This includes the initial placement when the window is created.
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
                <para>
                    This hint only has an effect on platforms where screen coordinates and pixels always map 1:1 such as
                    Windows and X11. On platforms like macOS the resolution of the framebuffer is changed independently
                    of the window size.
                </para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.CocoaRetinaFrameBuffer">
            <summary>
                Specifies whether to use full resolution framebuffers on Retina displays.
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
                <para>This is ignored on other platforms.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.CocoaFrameName">
            <summary>
                Specifies the UTF-8 encoded name to use for auto-saving the window frame, or if empty disables frame
                auto-saving for the window.
                <para>macOs only, this is ignored on other platforms.</para>
                <para>This is set with <see cref="M:Emission.Window.GLFW.Glfw.WindowHintString(Emission.Window.GLFW.WindowHint,System.Byte[])" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.CocoaGraphicsSwitching">
            <summary>
                Specifies whether to in Automatic Graphics Switching, i.e. to allow the system to choose the integrated
                GPU for the OpenGL context and move it between GPUs if necessary or whether to force it to always run on
                the discrete GPU.
                <para>This only affects systems with both integrated and discrete GPUs, ignored on other platforms.</para>
                <para>Possible values are <c>true</c> and <c>false</c>.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.X11ClassName">
            <summary>
                Specifies the desired ASCII encoded class parts of the ICCCM <c>WM_CLASS</c> window property.
                <para>Set with <see cref="M:Emission.Window.GLFW.Glfw.WindowHintString(Emission.Window.GLFW.WindowHint,System.Byte[])" />.</para>
            </summary>
        </member>
        <member name="F:Emission.Window.GLFW.WindowHint.X11InstanceName">
            <summary>
                Specifies the desired ASCII encoded instance parts of the ICCCM <c>WM_CLASS</c> window property.
                <para>Set with <see cref="M:Emission.Window.GLFW.Glfw.WindowHintString(Emission.Window.GLFW.WindowHint,System.Byte[])" />.</para>
            </summary>
        </member>
        <member name="T:Emission.Window.Cursor">
            <summary>
                Wrapper around a handle for a window cursor object.
            </summary>
            <seealso cref="T:Emission.Window.Cursor" />
        </member>
        <member name="P:Emission.Window.Window.Handle">
            <summary>
            Pointer to Glfw Window object. Represent window. Public get and can be only set class constructor.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Parameters">
            <summary>
            Structure that contains all information to generate window.
            Information cannot be change, so it can be used to get starting value for the width or the title for example.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.WindowAspect">
            <summary>
            Return, as float value, the relationship between the width and the height of the screen.
            Calculate with <see cref="F:Emission.Window.Window._lastWinSize"/>.
            Cannot be set, readonly.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.WindowPosition">
            <summary>
            Use a Vector2 with int values to get window's position in computer screen space.
            Can be set or get.
            Call <see cref="M:Emission.Window.GLFW.Glfw.SetWindowPosition(System.IntPtr,System.Int32,System.Int32)"/> to define position.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.WindowSize">
            <summary>
            Use a Vector2 with int values to get Window current size in pixels.
            Can be set or get.
            Call <see cref="M:Emission.Window.GLFW.Glfw.SetWindowSize(System.IntPtr,System.Int32,System.Int32)"/> to define size.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Maximized">
            <summary>
            Return a boolean when the window is maximized on the current monitor.
            Can be set or get.
            When is set, it maximized the window when value is true and restore his size when it's false.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Minimized">
            <summary>
            Return a boolean when the window is minimized on the current monitor.
            Can be set or get.
            When is set, it minimized the window when value is true and restore his size when it's false.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Title">
            <summary>
            Return or set window's title. Use private variable <see cref="F:Emission.Window.Window._title"/> to save current title.
            When the title need to change, it define the private variable and then change title using
            <see cref="M:Emission.Window.GLFW.Glfw.SetWindowTitle(System.IntPtr,System.Byte[])"/>.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Visible">
            <summary>
            Return if the window is visible or not. Use attribute to get the value.
            If visibility need the be set, if it's true, the window will be show, otherwise the window will be hide.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Focus">
            <summary>
            Warper for <see cref="M:Emission.Window.GLFW.Glfw.GetWindowAttribute(System.IntPtr,System.Int32)"/> with <see cref="F:Emission.Window.GLFW.WindowAttribute.Focused"/> while
            returning value and <see cref="M:Emission.Window.GLFW.Glfw.FocusWindow(System.IntPtr)"/> when value is set.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.ShouldClose">
            <summary>
            Warper for <see cref="M:Emission.Window.GLFW.Glfw.WindowShouldClose(System.IntPtr)"/> while returning value
            and <see cref="M:Emission.Window.GLFW.Glfw.SetWindowShouldClose(System.IntPtr,System.Boolean)"/> when value is set.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Opacity">
            <summary>
            Gets or sets the opacity of the window in the range of 0.0f and 1.0f.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.ClearColor">
            <summary>
            Gets the clear color of the window.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Viewport">
            <summary>
            Viewport of the window.
            Countains WindowSize and Window Position
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Behaviour">
            <summary>
            Engine Behaviour of the Window.
            </summary>
        </member>
        <member name="F:Emission.Keys.Unknown">
            <summary>
            An unknown key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Space">
            <summary>
            The spacebar key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Apostrophe">
            <summary>
            The apostrophe key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Comma">
            <summary>
            The comma key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Minus">
            <summary>
            The minus key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Period">
            <summary>
            The period key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Slash">
            <summary>
            The slash key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Semicolon">
            <summary>
            The semicolon key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Equal">
            <summary>
            The equal key.
            </summary>
        </member>
        <member name="F:Emission.Keys.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:Emission.Keys.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:Emission.Keys.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:Emission.Keys.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:Emission.Keys.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:Emission.Keys.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:Emission.Keys.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:Emission.Keys.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:Emission.Keys.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:Emission.Keys.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:Emission.Keys.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:Emission.Keys.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:Emission.Keys.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:Emission.Keys.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:Emission.Keys.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:Emission.Keys.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:Emission.Keys.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:Emission.Keys.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:Emission.Keys.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:Emission.Keys.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:Emission.Keys.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:Emission.Keys.LeftBracket">
            <summary>
            The left bracket(opening bracket) key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Backslash">
            <summary>
            The backslash.
            </summary>
        </member>
        <member name="F:Emission.Keys.RightBracket">
            <summary>
            The right bracket(closing bracket) key.
            </summary>
        </member>
        <member name="F:Emission.Keys.GraveAccent">
            <summary>
            The grave accent key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Escape">
            <summary>
            The escape key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Enter">
            <summary>
            The enter key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Tab">
            <summary>
            The tab key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Backspace">
            <summary>
            The backspace key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Insert">
            <summary>
            The insert key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Delete">
            <summary>
            The delete key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Right">
            <summary>
            The right arrow key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Left">
            <summary>
            The left arrow key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Down">
            <summary>
            The down arrow key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Up">
            <summary>
            The up arrow key.
            </summary>
        </member>
        <member name="F:Emission.Keys.PageUp">
            <summary>
            The page up key.
            </summary>
        </member>
        <member name="F:Emission.Keys.PageDown">
            <summary>
            The page down key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Home">
            <summary>
            The home key.
            </summary>
        </member>
        <member name="F:Emission.Keys.End">
            <summary>
            The end key.
            </summary>
        </member>
        <member name="F:Emission.Keys.CapsLock">
            <summary>
            The caps lock key.
            </summary>
        </member>
        <member name="F:Emission.Keys.ScrollLock">
            <summary>
            The scroll lock key.
            </summary>
        </member>
        <member name="F:Emission.Keys.NumLock">
            <summary>
            The num lock key.
            </summary>
        </member>
        <member name="F:Emission.Keys.PrintScreen">
            <summary>
            The print screen key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Pause">
            <summary>
            The pause key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F13">
            <summary>
            The F13 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F14">
            <summary>
            The F14 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F15">
            <summary>
            The F15 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F16">
            <summary>
            The F16 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F17">
            <summary>
            The F17 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F18">
            <summary>
            The F18 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F19">
            <summary>
            The F19 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F20">
            <summary>
            The F20 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F21">
            <summary>
            The F21 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F22">
            <summary>
            The F22 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F23">
            <summary>
            The F23 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F24">
            <summary>
            The F24 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F25">
            <summary>
            The F25 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad0">
            <summary>
            The 0 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad1">
            <summary>
            The 1 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad2">
            <summary>
            The 2 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad3">
            <summary>
            The 3 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad4">
            <summary>
            The 4 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad5">
            <summary>
            The 5 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad6">
            <summary>
            The 6 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad7">
            <summary>
            The 7 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad8">
            <summary>
            The 8 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad9">
            <summary>
            The 9 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadDecimal">
            <summary>
            The decimal key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadDivide">
            <summary>
            The divide key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadMultiply">
            <summary>
            The multiply key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadSubtract">
            <summary>
            The subtract key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadAdd">
            <summary>
            The add key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadEnter">
            <summary>
            The enter key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadEqual">
            <summary>
            The equal key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.LeftShift">
            <summary>
            The left shift key.
            </summary>
        </member>
        <member name="F:Emission.Keys.LeftControl">
            <summary>
            The left control key.
            </summary>
        </member>
        <member name="F:Emission.Keys.LeftAlt">
            <summary>
            The left alt key.
            </summary>
        </member>
        <member name="F:Emission.Keys.LeftSuper">
            <summary>
            The left super key.
            </summary>
        </member>
        <member name="F:Emission.Keys.RightShift">
            <summary>
            The right shift key.
            </summary>
        </member>
        <member name="F:Emission.Keys.RightControl">
            <summary>
            The right control key.
            </summary>
        </member>
        <member name="F:Emission.Keys.RightAlt">
            <summary>
            The right alt key.
            </summary>
        </member>
        <member name="F:Emission.Keys.RightSuper">
            <summary>
            The right super key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Menu">
            <summary>
            The menu key.
            </summary>
        </member>
        <member name="F:Emission.Keys.LastKey">
            <summary>
            The last valid key in this enum.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Unknown">
            <summary>
            An unknown button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button1">
            <summary>
                The first button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button2">
            <summary>
                The second button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button3">
            <summary>
                The third button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button4">
            <summary>
                The fourth button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button5">
            <summary>
                The fifth button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button6">
            <summary>
                The sixth button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button7">
            <summary>
                The seventh button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button8">
            <summary>
                The eighth button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Left">
            <summary>
                The left mouse button. This corresponds to <see cref="F:Emission.MouseButton.Button1"/>.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Right">
            <summary>
                The right mouse button. This corresponds to <see cref="F:Emission.MouseButton.Button2"/>.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Middle">
            <summary>
                The middle mouse button. This corresponds to <see cref="F:Emission.MouseButton.Button3"/>.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Last">
            <summary>
                The highest mouse button available.
            </summary>
        </member>
        <member name="F:Emission.Monitor.None">
            <summary>
            Represent a null monitor
            </summary>
        </member>
        <member name="P:Emission.Monitor.PrimaryMonitor">
            <summary>
            Get Current monitor.
            </summary>
        </member>
        <member name="P:Emission.Monitor.Monitors">
            <summary>
            Get an array of all recognize monitors.
            </summary>
        </member>
        <member name="P:Emission.Monitor.Name">
            <summary>
            Return the name of the monitor.
            </summary>
        </member>
        <member name="P:Emission.Monitor.WorkArea">
            <summary>
            Get a <see cref="T:Emission.Mathematics.Rectangle"/> that represent the position and the size with the monitor.
            </summary>
        </member>
        <member name="P:Emission.Monitor.ContentScale">
            <summary>
            Retrieves the content scale for the specified monitor.
            The content scale is the ratio between the current DPI and the platform's default DPI.
            </summary>
        </member>
        <member name="P:Emission.Monitor.UserPointer">
            <summary>
            Returns the current value of the user-defined pointer of the specified monitor.
            The user-pointer, or <see cref="F:System.IntPtr.Zero"/> if none is defined.
            </summary>
        </member>
        <member name="M:Emission.Time.GlfwTime">
            <summary>
            Return current time by using <see cref="T:Emission.Time"/>. return a double so it can be change as
            a float easily.
            </summary>
        </member>
        <member name="P:Emission.Time.DeltaTime">
            <summary>
            Return delta time use to define movements by time.
            </summary>
        </member>
        <member name="P:Emission.Time.Fps">
            <summary>
            Return current <see cref="N:Emission.Window"/>'s fps.
            </summary>
        </member>
        <member name="M:Emission.Time.NanoTime">
            <summary>
            Return the current time in nano second.
            Equivalent to System.nanoTime() in Java.
            </summary>
            <returns>Current time</returns>
        </member>
        <member name="M:Emission.Time.MsTime">
            <summary>
            Return the current time in milliseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emission.Time.SetDeltaTime(System.Double)">
            <summary>
            Static function used to define current <see cref="P:Emission.Time.DeltaTime"/>.
            </summary>
            <param name="time">New Delta Time value</param>
        </member>
        <member name="M:Emission.Time.SetFps(System.Int32)">
            <summary>
            Static function used to define current framerate (<see cref="P:Emission.Time.Fps"/>).
            </summary>
            <param name="fps">New FPS value</param>
        </member>
        <member name="T:Emission.Errors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emission.Errors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emission.Errors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emission.Errors.EmissionEventException">
            <summary>
              Looks up a localized string similar to Emission Event Error.
            </summary>
        </member>
        <member name="P:Emission.Errors.EmissionGlfwException">
            <summary>
              Looks up a localized string similar to Emission GLFW Error.
            </summary>
        </member>
        <member name="P:Emission.Errors.EmissionIOException">
            <summary>
              Looks up a localized string similar to Emission I/O Error.
            </summary>
        </member>
        <member name="P:Emission.Errors.EmissionOpenGlException">
            <summary>
              Looks up a localized string similar to Emission OpenGL Error.
            </summary>
        </member>
        <member name="P:Emission.Errors.EmissionTextureException">
            <summary>
              Looks up a localized string similar to Emission Texture Error.
            </summary>
        </member>
        <member name="T:System.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Strings.ApiUnavailable">
            <summary>
              Looks up a localized string similar to GLFW could not find support for the requested API on the system..
            </summary>
        </member>
        <member name="P:System.Strings.FormatUnavailable">
            <summary>
              Looks up a localized string similar to The requested pixel format is not supported or contents of the clipboard could not be converted to the requested format..
            </summary>
        </member>
        <member name="P:System.Strings.InvalidEnum">
            <summary>
              Looks up a localized string similar to One of the arguments to the function was an invalid enum value..
            </summary>
        </member>
        <member name="P:System.Strings.InvalidValue">
            <summary>
              Looks up a localized string similar to One of the arguments to the function was an invalid value..
            </summary>
        </member>
        <member name="P:System.Strings.NoCurrentContext">
            <summary>
              Looks up a localized string similar to A called that needs and operates on the current OpenGL or OpenGL ES context but no context is current on the calling thread.
            </summary>
        </member>
        <member name="P:System.Strings.NotInitialized">
            <summary>
              Looks up a localized string similar to GLFW not yet initialized..
            </summary>
        </member>
        <member name="P:System.Strings.NoWindowContext">
            <summary>
              Looks up a localized string similar to A window that does not have an OpenGL or OpenGL ES context was passed to a function that requires it to have one..
            </summary>
        </member>
        <member name="P:System.Strings.OutOfMemory">
            <summary>
              Looks up a localized string similar to A memory allocation failed..
            </summary>
        </member>
        <member name="P:System.Strings.PlatformError">
            <summary>
              Looks up a localized string similar to A platform-specific error occurred.
            </summary>
        </member>
        <member name="P:System.Strings.UnknownError">
            <summary>
              Looks up a localized string similar to An unknown error has occurred..
            </summary>
        </member>
        <member name="P:System.Strings.VersionUnavailable">
            <summary>
              Looks up a localized string similar to The requested OpenGL or OpenGL ES version (including any requested context or framebuffer hints) is not available on this machine..
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so checking for <c>null</c> is required before its usage.
            </summary>
            <example>
                <code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element can never be <c>null</c>.
            </summary>
            <example>
                <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
                Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can never be null.
            </summary>
            <example>
                <code>
            public void Foo([ItemNotNull]List&lt;string&gt; books)
            {
              foreach (var book in books) {
                if (book != null) // Warning: Expression is always true
                 Console.WriteLine(book.ToUpper());
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
                Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can be null.
            </summary>
            <example>
                <code>
            public void Foo([ItemCanBeNull]List&lt;string&gt; books)
            {
              foreach (var book in books)
              {
                // Warning: Possible 'System.NullReferenceException'
                Console.WriteLine(book.ToUpper());
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by the format pattern and (optional) arguments.
                The parameter, which contains the format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
                Specifies which parameter of an annotated method should be treated as the format string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
                Use this annotation to specify a type that contains static or const fields
                with values for the annotated property/field/parameter.
                The specified type will be used to improve completion suggestions.
            </summary>
            <example>
                <code>
            namespace TestNamespace
            {
              public class Constants
              {
                public static int INT_CONST = 1;
                public const string STRING_CONST = "1";
              }
            
              public class Class1
              {
                [ValueProvider("TestNamespace.Constants")] public int myField;
                public void Foo([ValueProvider("TestNamespace.Constants")] string str) { }
            
                public void Test()
                {
                  Foo(/*try completion here*/);//
                  myField = /*try completion here*/
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be a string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
            <example>
                <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
                is used to notify that some property value changed.
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
            public class Foo : INotifyPropertyChanged {
              public event PropertyChangedEventHandler PropertyChanged;
            
              [NotifyPropertyChangedInvocator]
              protected virtual void NotifyChanged(string propertyName) { ... }
            
              string _name;
            
              public string Name {
                get { return _name; }
                set { _name = value; NotifyChanged("LastName"); /* Warning */ }
              }
            }
            </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output.
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If the method has a single input parameter, its name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for the method output
                means that the method doesn't return normally (throws or terminates the process).<br />
                Value <c>canbenull</c> is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
                with rows separated by semicolon. There is no notion of order rows, all rows are checked
                for applicability and applied per each program state tracked by the analysis engine.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("null &lt;= param:null")] // reverse condition syntax
            public string GetName(string surname)
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data)
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
                Indicates whether the marked element should be localized.
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
                so this symbol will not be reported as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
                Can be applied to attributes, type parameters, and parameters of a type assignable from <see cref="T:System.Type" />
                .
                When applied to an attribute, the decorated attribute behaves the same as <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
                When applied to a type parameter or to a parameter of type <see cref="T:System.Type" />,  indicates that the
                corresponding type
                is used implicitly.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseKindFlags">
            <summary>
                Specify the details of implicitly used symbol when it is marked
                with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered to be used implicitly when marked
                with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API
                which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
                If the parameter is a delegate, indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example>
                <code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
                Indicates that the return value of the method invocation must be used.
            </summary>
            <remarks>
                Methods decorated with this attribute (in contrast to pure methods) might change state,
                but make no sense without using their return value. <br />
                Similarly to <see cref="T:JetBrains.Annotations.PureAttribute" />, this attribute
                will help detecting usages of the method when the return value in not used.
                Additionally, you can optionally specify a custom message, which will be used when showing warnings, e.g.
                <code>[MustUseReturnValue("Use the return value to...")]</code>.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
                Indicates the type member or parameter of some type, that should be used instead of all other ways
                to get the value of that type. This annotation is useful when you have some "context" value evaluated
                and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example>
                <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder within a web project.
                Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
                An extension method marked with this attribute is processed by code completion
                as a 'Source Template'. When the extension method is completed over some expression, its source code
                is automatically expanded like a template at call site.
            </summary>
            <remarks>
                Template method body can contain valid source code and/or special comments starting with '$'.
                Text inside these comments is added as source code when the template is applied. Template parameters
                can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
                Use the <see cref="T:JetBrains.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
            <example>
                In this example, the 'forEach' method is a source template available over all values
                of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
                <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
                Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
                You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
                is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
                template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
                for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
            <example>
                Applying the attribute on a source template method:
                <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
                Applying the attribute on a template method parameter:
                <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
                Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
                parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
                Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
                If the target parameter is used several times in the template, only one occurrence becomes editable;
                other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
                use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
                Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
                <see cref="T:JetBrains.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
                an MVC controller. If applied to a method, the MVC controller name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC Master. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC model type. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
                partial view. If applied to a method, the MVC partial view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name.
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that the marked parameter or method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
                Indicates how method, constructor invocation, or property access
                over collection type affects the contents of the collection.
                Use <see cref="P:JetBrains.Annotations.CollectionAccessAttribute.CollectionAccessType" /> to specify the access type.
            </summary>
            <remarks>
                Using this attribute only makes sense if all collection methods are marked with this attribute.
            </remarks>
            <example>
                <code>
            public class MyStringCollection : List&lt;string&gt;
            {
              [CollectionAccess(CollectionAccessType.Read)]
              public string GetFirstString()
              {
                return this.ElementAt(0);
              }
            }
            class Test
            {
              public void Foo()
              {
                // Warning: Contents of the collection is never updated
                var col = new MyStringCollection();
                string x = col.GetFirstString();
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessType">
            <summary>
                Provides a value for the <see cref="T:JetBrains.Annotations.CollectionAccessAttribute" /> to define
                how the collection method invocation affects the contents of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
                Indicates that the marked method is assertion method, i.e. it halts the control flow if
                one of the conditions is satisfied. To set the condition, mark one of the parameters with
                <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
                Indicates the condition parameter of the assertion method. The method itself should be
                marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
                the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
                Specifies assertion type. If the assertion method argument satisfies the condition,
                then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
                Indicates that the marked method unconditionally terminates control flow execution.
                For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
                Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
                .Where). This annotation allows inference of [InstantHandle] annotation for parameters
                of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
                Indicates that IEnumerable passed as a parameter is not enumerated.
                Use this annotation to suppress the 'Possible multiple enumeration of IEnumerable' inspection.
            </summary>
            <example>
                <code>
            static void ThrowIfNull&lt;T&gt;([NoEnumeration] T v, string n) where T : class
            {
              // custom check for null but no enumeration
            }
            
            void Foo(IEnumerable&lt;string&gt; values)
            {
              ThrowIfNull(values, nameof(values));
              var x = values.ToList(); // No warnings about multiple enumeration
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
                Indicates that the marked parameter is a regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
                Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
                The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
                as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
                is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
                enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
                Property should have the tree ancestor of the <c>ItemsControl</c> type or
                marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
        </member>
    </members>
</doc>
