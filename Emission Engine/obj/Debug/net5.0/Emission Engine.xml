<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emission Engine</name>
    </assembly>
    <members>
        <member name="M:Emission.IO.GameDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Define current working directory.
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Emission.IO.GameDirectory.GetCurrentDirectory">
            <summary>
            Return current working directory.
            </summary>
        </member>
        <member name="M:Emission.IO.GameDirectory.GetDirectoryNameOffset(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns the directory portion of a file path. The returned value is empty
            if the specified path is null, empty, or a root.
            </summary>
        </member>
        <member name="M:Emission.IO.GameDirectory.IsDirectorySeparator(System.Char)">
            <summary>
            Return true if the given character is a directory separator.
            </summary>
        </member>
        <member name="F:Emission.IO.Icon.Width">
            <summary>
            The height, in pixels, of this image.
            </summary>
        </member>
        <member name="F:Emission.IO.Icon.Height">
            <summary>
            The width, in pixels, of this image.
            </summary>
        </member>
        <member name="F:Emission.IO.Icon.Pixels">
            <summary>
            Pointer to the RGBA pixel data of this image, arranged left-to-right, top-to-bottom.
            </summary>
        </member>
        <member name="F:Emission.IO.Icon.Data">
            <summary>
            Array of byte that represent the RGBA image.
            </summary>
        </member>
        <member name="F:Emission.IO.Sprite.Width">
            <summary>
            The height, in pixels, of this image.
            </summary>
        </member>
        <member name="F:Emission.IO.Sprite.Height">
            <summary>
            The width, in pixels, of this image.
            </summary>
        </member>
        <member name="P:Emission.IO.Sprite.Size">
            <summary>
            Create a rectangle from <see cref="F:Emission.IO.Sprite.Width"/> and <see cref="F:Emission.IO.Sprite.Height"/> of the sprite.
            </summary>
        </member>
        <member name="P:Emission.IO.Sprite.Path">
            <summary>
            Path use to load the sprite.
            </summary>
        </member>
        <member name="P:Emission.IO.Sprite.Bytes">
            <summary>
            Byte array in RGBA that define the sprite.
            </summary>
        </member>
        <member name="P:Emission.IO.Sprite.ColorComponents">
            <summary>
            Define color channel of the sprite.
            </summary>
        </member>
        <member name="F:Emission.Mathematics.MathHelper.Pi">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, Ï€.
            </summary>
        </member>
        <member name="F:Emission.Mathematics.MathHelper.Epsilon">
            <summary>
            Represents the smallest positive value that is greater than zero.
            </summary>
        </member>
        <member name="F:Emission.Mathematics.MathHelper.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix3.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix3.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix3.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix3.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix3.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix3.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix3.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix3.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix3.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.FromEulerAnglesXYZ(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation matrix from a set of euler angles.
            </summary>
            <param name="x">Rotation angle about the x-axis, in radians.</param>
            <param name="y">Rotation angle about the y-axis, in radians.</param>
            <param name="z">Rotation angle about the z-axis, in radians.</param>
            <returns>The rotation matrix</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.FromEulerAnglesXYZ(Emission.Mathematics.Vector3)">
            <summary>
            Creates a rotation matrix from a set of euler angles.
            </summary>
            <param name="angles">Vector containing the rotation angles about the x, y, z axes, in radians.</param>
            <returns>The rotation matrix</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.FromRotationX(System.Single)">
            <summary>
            Creates a rotation matrix for a rotation about the x-axis.
            </summary>
            <param name="radians">Rotation angle in radians.</param>
            <returns>The rotation matrix</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.FromRotationY(System.Single)">
            <summary>
            Creates a rotation matrix for a rotation about the y-axis.
            </summary>
            <param name="radians">Rotation angle in radians.</param>
            <returns>The rotation matrix</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.FromRotationZ(System.Single)">
            <summary>
            Creates a rotation matrix for a rotation about the z-axis.
            </summary>
            <param name="radians">Rotation angle in radians.</param>
            <returns>The rotation matrix</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.FromAngleAxis(System.Single,Emission.Mathematics.Vector3)">
            <summary>
            Creates a rotation matrix for a rotation about an arbitrary axis.
            </summary>
            <param name="radians">Rotation angle, in radians</param>
            <param name="axis">Rotation axis, which should be a normalized vector.</param>
            <returns>The rotation matrix</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.FromScaling(Emission.Mathematics.Vector3)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scaling">Scaling vector</param>
            <returns>The scaling vector</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.FromToMatrix(Emission.Mathematics.Vector3,Emission.Mathematics.Vector3)">
            <summary>
            Creates a rotation matrix that rotates a vector called "from" into another
            vector called "to". Based on an algorithm by Tomas Moller and John Hudges:
            <para>
            "Efficiently Building a Matrix to Rotate One Vector to Another"         
            Journal of Graphics Tools, 4(4):1-4, 1999
            </para>
            </summary>
            <param name="from">Starting vector</param>
            <param name="to">Ending vector</param>
            <returns>Rotation matrix to rotate from the start to end.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.op_Equality(Emission.Mathematics.Matrix3,Emission.Mathematics.Matrix3)">
            <summary>
            Tests equality between two matrices.
            </summary>
            <param name="a">First matrix</param>
            <param name="b">Second matrix</param>
            <returns>True if the matrices are equal, false otherwise</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.op_Inequality(Emission.Mathematics.Matrix3,Emission.Mathematics.Matrix3)">
            <summary>
            Tests inequality between two matrices.
            </summary>
            <param name="a">First matrix</param>
            <param name="b">Second matrix</param>
            <returns>True if the matrices are not equal, false otherwise</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.op_Multiply(Emission.Mathematics.Matrix3,Emission.Mathematics.Matrix3)">
            <summary>
            Performs matrix multiplication.Multiplication order is B x A. That way, SRT concatenations
            are left to right.
            </summary>
            <param name="a">First matrix</param>
            <param name="b">Second matrix</param>
            <returns>Multiplied matrix</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix3.op_Implicit(Emission.Mathematics.Matrix4)~Emission.Mathematics.Matrix3">
            <summary>
            Implicit conversion from a 4x4 matrix to a 3x3 matrix.
            </summary>
            <param name="mat">4x4 matrix</param>
            <returns>3x3 matrix</returns>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:Emission.Mathematics.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.Invert(Emission.Mathematics.Matrix4)">
            <summary>
            Calculate the inverse of a matrix4.
            If the matrix cannot be inverted, then it will throw a new <see cref="T:System.InvalidOperationException"/> error.
            </summary>
            <param name="matrix4">Matrix4 to invert</param>
            <returns>An inverted matrix4</returns>
            <exception cref="T:System.InvalidOperationException">If the matrix cannot be inverted</exception>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.FromQuaternion(Emission.Mathematics.Quaternion)">
            <summary>
            Create a new Matrix 4 from a Quaternion.
            </summary>
            <param name="quaternion">Quaternion use to create the matrix</param>
            <returns>A new Matrix4</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.Scale(System.Single)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.Scale(Emission.Mathematics.Vector3)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.Translation(Emission.Mathematics.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">X, Y and Z coordinates as a <see cref="T:Emission.Mathematics.Vector3"/> offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>When the method completes, contains the created rotation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>When the method completes, contains the created rotation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>When the method completes, contains the created rotation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.RotationQuaternion(Emission.Mathematics.Quaternion)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="quaternion">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.RotationAxis(Emission.Mathematics.Vector3@,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitrary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>When the method completes, contains the created rotation matrix.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.PerspectiveProjection(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="nearPlane">Minimum z-value of the viewing volume.</param>
            <param name="farPlane">Maximum z-value of the viewing volume.</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.PerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a customized perpective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume</param>
            <param name="right">Maximum x-value of the viewing volume</param>
            <param name="bottom">Minimum y-value of the viewing volume</param>
            <param name="top">Maximum y-value of the viewing volume</param>
            <param name="nearPlane">Minimum z-value of the viewing volume</param>
            <param name="farPlane">Maximum z-value of the viewing volume</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.OrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Creates an orthographic projection matrix.</summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="nearPlane">The near edge of the projection volume.</param>
            <param name="farPlane">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:Emission.Mathematics.Matrix4.LookAt(Emission.Mathematics.Vector3,Emission.Mathematics.Vector3,Emission.Mathematics.Vector3)">
            <summary>Build a world space to camera space matrix.</summary>
            <param name="eye">Viewer in world space.</param>
            <param name="target">Target position in world space.</param>
            <param name="yUnit">Up vector in world space (should not be parallel to the camera direction, that is target - eye).</param>
            <returns>A Matrix4 that transforms world space to camera space.</returns>
        </member>
        <member name="T:Emission.Mathematics.Ray">
            <summary>
            Defines a 3D ray with a point of origin and a direction.
            </summary>
        </member>
        <member name="F:Emission.Mathematics.Ray.Position">
            <summary>
            Origin of the Ray in space.
            </summary>
        </member>
        <member name="F:Emission.Mathematics.Ray.Direction">
            <summary>
            Direction of the Ray.
            </summary>
        </member>
        <member name="M:Emission.Mathematics.Ray.#ctor(Emission.Mathematics.Vector3,Emission.Mathematics.Vector3)">
            <summary>
            Constructs a new Ray.
            </summary>
            <param name="position">Origin of the ray.</param>
            <param name="direction">Direction of the ray.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.Glfw">
            <summary>
            The base class the vast majority of the GLFW functions.
            </summary>
        </member>
        <member name="T:Emission.Natives.GLFW.ErrorCallback">
            <summary>
                Function signature for receiving error callbacks.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">A pointer to the UTF-8 encoded (null-terminated) error message.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.SizeCallback">
            <summary>
                This is the function signature for window size callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="width">The new width, in screen coordinates, of the window.</param>
            <param name="height">The new height, in screen coordinates, of the window.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.PositionCallback">
            <summary>
                This is the function signature for cursor position callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="x">The new cursor x-coordinate, relative to the left edge of the client area.</param>
            <param name="y">The new cursor y-coordinate, relative to the left edge of the client area.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.FocusCallback">
            <summary>
                This is the function signature for window focus callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="focusing"><c>true</c> if window is gaining focus; otherise <c>false</c>.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.WindowCallback">
            <summary>
                Generic signature for window callbacks.
            </summary>
            <param name="window">The window handle.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.FileDropCallback">
            <summary>
                This is the function signature for file drop callbacks.
            </summary>
            <param name="window">The window that received the event.</param>
            <param name="count">The number of dropped files.</param>
            <param name="arrayPtr">Pointer to an array UTF-8 encoded file and/or directory path name pointers.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.MouseCallback">
            <summary>
                This is the function signature for cursor position callback functions.
            </summary>
            <param name="window">The window handle recieving the event.</param>
            <param name="x">The new cursor x-coordinate, relative to the left edge of the client area.</param>
            <param name="y">The new cursor y-coordinate, relative to the left edge of the client area.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.MouseEnterCallback">
            <summary>
                This is the function signature for cursor enter/leave callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="entering"><c>true</c> if cursor is entering the window client area; otherwise <c>false</c>.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.MouseButtonCallback">
            <summary>
                This is the function signature for mouse button callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="button">TThe mouse button that was pressed or released.</param>
            <param name="state">The state.</param>
            <param name="modifiers">Flags describing which modifier keys were held down.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.CharCallback">
            <summary>
                This is the function signature for Unicode character callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="codePoint">The Unicode code point of the character.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.CharModsCallback">
            <summary>
                This is the function signature for Unicode character callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="codePoint">The Unicode code point of the character.</param>
            <param name="mods">Bit field describing which modifier keys were held down.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.KeyCallback">
            <summary>
                This is the function signature for keyboard key callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="key">The keyboard key that was pressed or released.</param>
            <param name="scanCode">The system-specific scancode of the key.</param>
            <param name="state">The state of the key.</param>
            <param name="mods">	Bit field describing which modifier keys were held down.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.JoystickCallback">
            <summary>
                This is the function signature for joystick configuration callback functions.
            </summary>
            <param name="joystick">The joystick that was connected or disconnected.</param>
            <param name="status">The connection status.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.MonitorCallback">
            <summary>
                This is the function signature for monitor configuration callback functions.
            </summary>
            <param name="monitor">The monitor that was connected or disconnected.</param>
            <param name="status">The connection status.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.IconifyCallback">
            <summary>
                This is the function signature for window iconify/restore callback functions.
            </summary>
            <param name="window">The window handle.</param>
            <param name="focusing"><c>true</c> if window is iconified; otherwise <c>false</c> if restoring.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.WindowContentsScaleCallback">
            <summary>
                This is the function signature for window content scale callback functions.
            </summary>
            <param name="window">The window whose content scale changed.</param>
            <param name="xScale">The new x-axis content scale of the window.</param>
            <param name="yScale">The new y-axis content scale of the window.</param>
        </member>
        <member name="T:Emission.Natives.GLFW.WindowMaximizedCallback">
            <summary>
                This is the function signature for window maximize/restore callback functions.
            </summary>
            <param name="window">The window that was maximized or restored.</param>
            <param name="maximized"><c>true</c> if the window was maximized, or <c>false</c> if it was restored.</param>
        </member>
        <member name="F:Emission.Graphics.Renderer.SHADER_TEXTURE_COORDS_LOCATION">
            <summary>
            Constant integer that represent texture coords location in shader layout.
            </summary>
        </member>
        <member name="F:Emission.Graphics.Renderer.STRIDE">
            <summary>
            Number of value in each vertex array.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.HasInstance">
            <summary>
            Check if a current instance of a Renderer already exists.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.Initialize">
            <summary>
            Initialize renderer's functionalities and opengl.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.VertexArray">
            <summary>
            Define, bind and generate a new Vertex Array and return it ID.
            Add it vertex array id to clearing list.
            </summary>
            <returns>Vertex Array ID</returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Buffer(System.Int32,System.IntPtr)">
            <summary>
            Load and Create a new buffer.
            </summary>
            <param name="size"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Buffer(System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>
            Load a dimensional buffer with float array as data.
            Bind data and buffer then Define an array of generic vertex attribute data using the the location, a stride and an offset.
            Add buffer ID the <see cref="F:Emission.Graphics.Renderer._loadedVbo"/>.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
            <param name="stride">Stride of data attribute</param>
            <param name="offset">Offset of data attribute</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.BufferStruct``1(``0[])">
            <summary>
            Load a buffer based on a struct.
            </summary>
            <param name="data">Struct data to push to the buffer.</param>
            <typeparam name="T">Struct type to push to the buffer.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Indices(System.UInt32[])">
            <summary>
            Load element buffer with a int array as data.
            Add element id to <see cref="!:Loaded_EBO"/> and return element id.
            </summary>
            <param name="data">Data to store.</param>
            <returns>Element Buffer ID</returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Texture2D(System.String,System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Load 2D texture. See static for more information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Texture2D(System.Byte[],System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Load 2D texture. See static for more information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Texture2D(System.Void*,System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Load 2D texture. See static for more information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.ClearId(Emission.Graphics.VertexArrayBuffer,Emission.Graphics.VertexBufferObject,Emission.Graphics.ElementBufferObject)">
            <summary>
            Clear and delete buffer with a specific index.
            </summary>
            <param name="vao">Vao ID to delete</param>
            <param name="vbo">Vbo ID to delete</param>
            <param name="ebo">Ebo ID to delete</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.ClearAll">
            <summary>
            Clear and delete all Vaos, Vbos and Ebos.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.EnableVertexArrayAttrib(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Enable a vertex array using the location of this array.
            Define an array of generic vertex attribute data using a the location, a stride and an offset.
            The type of data is define as float.
            </summary>
            <param name="location">Index of vertex array</param>
            <param name="stride">Stride of data attribute</param>
            <param name="offset">Offset of data attribute</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.DisableVertexArray">
            <summary>
            Unbind current vertex array.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.WriteBuffer(Emission.Graphics.VertexBufferObject,System.Single[])">
            <summary>
            Overwrite data to an array buffer using VertexBufferObject.
            Use this to write vertices, texture coords or normals data.
            </summary>
            <param name="buffer">Buffer's ID</param>
            <param name="data">Data to write to the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.WriteBuffer``1(Emission.Graphics.VertexBufferObject,``0[])">
            <summary>
            Overwrite data to an array buffer using VertexBufferObject.
            </summary>
            <param name="buffer"></param>
            <param name="data"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Emission.Graphics.Renderer.WriteIndices(Emission.Graphics.ElementBufferObject,System.UInt32[])">
            <summary>
            Overwrite data to an element array buffer using his ID.
            Use this to write indices.
            </summary>
            <param name="ebo"></param>
            <param name="data">Indices data to write to the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindVertexArray">
            <summary>
            Define, bind and generate a new Vertex Array at an ID.
            Add it to vertex array clearing list.
            </summary>
            <returns>Vertex Array ID</returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindBuffer(System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>
            Load a generic buffer with float array as data.
            Bind data and buffer then Define an array of generic vertex attribute data using the the location, a stride and an offset.
            Add buffer ID to buffer list.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
            <param name="stride">Stride of data attribute</param>
            <param name="offset">Offset of data attribute</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindBuffer(System.Int32,System.IntPtr)">
            <summary>
            Load and create a new buffer using a size and data to bind.
            Add buffer ID to buffer list.
            </summary>
            <param name="size"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Bind2DBuffer(System.Int32,System.Single[])">
            <summary>
            Load a 2D dimensional buffer with float array as data.
            Add buffer ID to buffer list.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.Bind3DBuffer(System.Int32,System.Single[])">
            <summary>
            Load a 3D dimensional buffer with float array as data.
            Add buffer ID to buffer list.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.Bind4DBuffer(System.Int32,System.Single[])">
            <summary>
            Load a 4D dimensional buffer with float array as data.
            Add buffer ID to buffer list.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindVertexBuffer(System.Int32,System.Single[])">
            <summary>
            Load a 8D dimensional buffer with float array as data. This buffer is designed
            to be used as a vertices array buffer to put vertices data into a buffer in order to draw it.
            Add buffer ID to buffer list.
            </summary>
            <param name="location">Location of the buffer.</param>
            <param name="data">Data to send width the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindStructBuffer``1(``0[])">
            <summary>
            Load a <see cref="!:struct"/> array as buffer.
            Add buffer ID to buffer list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindIndices(System.UInt32[])">
            <summary>
            Load an element buffer with int array as data.
            Add buffer ID to element buffer list.
            </summary>
            <param name="data">Data to send width the buffer.</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindTexture2D(System.String,System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Load a 2 dimensional texture buffer with an image load with a path.
            The location use in the shader and the stride of vertex data can be change but by default it's <see cref="F:Emission.Graphics.Renderer.SHADER_TEXTURE_COORDS_LOCATION"/>
            and <see cref="F:Emission.Graphics.Renderer.STRIDE"/>.
            Bind data and buffer then Define an array of generic vertex attribute data using the the location, a stride and an offset.
            </summary>
            <param name="path">Image's path</param>
            <param name="location">Location in shader layout</param>
            <param name="stride">Stride in vertex array</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindTexture2D(System.IntPtr,System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Load a 2 dimensional texture buffer with an image load with a path.
            The location use in the shader and the stride of vertex data can be change but by default it's <see cref="F:Emission.Graphics.Renderer.SHADER_TEXTURE_COORDS_LOCATION"/>
            and <see cref="F:Emission.Graphics.Renderer.STRIDE"/>.
            Bind data and buffer then Define an array of generic vertex attribute data using the the location, a stride and an offset.
            </summary>
            <param name="data">Pointer to image's data</param>
            <param name="location">Location in shader layout</param>
            <param name="stride">Stride in vertex array</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.BindTexture2D(System.Byte[],System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Load a 2 dimensional texture buffer with an image load with a path.
            The location use in the shader and the stride of vertex data can be change but by default it's <see cref="F:Emission.Graphics.Renderer.SHADER_TEXTURE_COORDS_LOCATION"/>
            and <see cref="F:Emission.Graphics.Renderer.STRIDE"/>.
            Bind data and buffer then Define an array of generic vertex attribute data using the the location, a stride and an offset.
            </summary>
            <param name="data">Image's data as bytes</param>
            <param name="location">Location in shader layout</param>
            <param name="stride">Stride in vertex array</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Graphics.Renderer.Clear">
            <summary>
            Clear all buffers and clear buffers list.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.Clear(Emission.Graphics.VertexArrayBuffer,Emission.Graphics.VertexBufferObject,Emission.Graphics.ElementBufferObject)">
            <summary>
            Clear buffers at specifics IDs, remove them from the list.
            </summary>
            <param name="vao">Vertex Array ID</param>
            <param name="vbo">Vertex Buffer ID</param>
            <param name="ebo">Element Buffer ID</param>
        </member>
        <member name="M:Emission.Graphics.Renderer.SetDrawUsage(System.UInt32)">
            <summary>
            Specifies the expected usage pattern of the renderer.
            The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY
            </summary>
        </member>
        <member name="M:Emission.Graphics.Renderer.GetDrawUsage">
            <summary>
            Return the expected usage pattern of the renderer.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Shader.Initialize(Emission.Graphics.ShaderStruct)">
            <summary>
            Initialize a shader from a <seealso cref="!:ShaderLoader.ShaderStruct"/>.
            Create program ID, load vertex shader, fragment shader and geometry shader.
            </summary>
            <param name="shader"></param>
        </member>
        <member name="M:Emission.Graphics.Shader.Start">
            <summary>
            Enable shader to be use.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Shader.Stop">
            <summary>
            Disable shader to be use.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Shader.Dispose">
            <summary>
            Destroy Shader.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Shader.GetAttributeLocation(System.String)">
            <summary>
            Return attribute location use a name.
            </summary>
            <param name="name">Attribute's name</param>
            <returns>Attribute's location</returns>
        </member>
        <member name="M:Emission.Graphics.Shader.GetUniformLocation(System.String)">
            <summary>
            Return uniform location use a name.
            </summary>
            <param name="name">Uniform's name</param>
            <returns>Uniform's location</returns>
        </member>
        <member name="M:Emission.Graphics.Shader.UseUniform1f(System.String,System.Single)">
            <summary>
            Define a float value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shader.UseUniform1(System.String,System.Int32)">
            <summary>
            Define an int value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shader.UseUniformVec2(System.String,Emission.Mathematics.Vector2)">
            <summary>
            Define a vector 2D value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shader.UseUniformVec3(System.String,Emission.Mathematics.Vector3)">
            <summary>
            Define a vector 3D value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shader.UseUniformVec4(System.String,Emission.Mathematics.Vector4)">
            <summary>
            Define a vector 3D value to a uniform.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shader.UseUniformProjectionMat4(System.String,Emission.Mathematics.Matrix4)">
            <summary>
            Define a matrix 4 value to a uniform use to define a projection.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.Shader.UseUniformMat4(System.String,Emission.Mathematics.Matrix4)">
            <summary>
            Define a matrix 4 value to a uniform use to define a transposition.
            </summary>
            <param name="name">Name of uniform</param>
            <param name="value">New value of uniform</param>
        </member>
        <member name="M:Emission.Graphics.ShaderLoader.LoadShader(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a <see cref="T:Emission.Graphics.ShaderStruct"/> from an array of line.
            </summary>
            <param name="data">Data to parse.</param>
            <returns>Shader parsed content.</returns>
        </member>
        <member name="M:Emission.Graphics.ShaderLoader.CompileShader(System.UInt32,System.String@)">
            <summary>
            Compile Shader using OpenGL.
            </summary>
            <param name="type">Shader type to compile</param>
            <param name="data">Shader data to compile</param>
            <returns></returns>
            <exception cref="T:Emission.EmissionException"></exception>
        </member>
        <member name="M:Emission.Graphics.Texture.Bind">
            <summary>
            Load texture data into OpenGl.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Texture.Use">
            <summary>
            Make texture active for rendering.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Texture.Close">
            <summary>
            Make texture inactive for rendering.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Texture.Dispose">
            <summary>
            Delete texture from OpenGl.
            </summary>
        </member>
        <member name="M:Emission.Graphics.Texture.TextureWrapping(System.Int32)">
            <summary>
            Define texture's wrap mode.
            </summary>
            <param name="wrap">OpenGl wrap mode.</param>
        </member>
        <member name="M:Emission.Graphics.Texture.TextureBorderColor(Emission.Mathematics.Vector4)">
            <summary>
            Define texture's border color.
            </summary>
            <param name="color">Color</param>
        </member>
        <member name="M:Emission.Graphics.Texture.TextureFilter(System.Int32,System.Int32)">
            <summary>
            Define texture's filter.
            </summary>
            <param name="minFilter"></param>
            <param name="magFilter"></param>
        </member>
        <member name="P:Emission.Input.Any">
            <summary>
            Get if a key or a mouse button is pressed. Return a boolean.
            Check both variables, if any of these is true, it will return true.
            </summary>
        </member>
        <member name="P:Emission.Input.AnyKey">
            <summary>
            Get if a keyboard key is pressed. Return a boolean.
            Loop throw all active keys, if one of them is true, it will return true.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Emission.Input.CurrentKey" -->
        <member name="P:Emission.Input.AnyMouseButton">
            <summary>
            Get if a mouse button is pressed. Return a boolean.
            Loop throw all active buttons, if one of them is true, it will return true.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Emission.Input.CurrentButton" -->
        <member name="P:Emission.Input.MousePosition">
            <summary>
            Return _instance mouse position on the screen as a <see cref="T:Emission.Mathematics.Vector2"/>.
            </summary>
        </member>
        <member name="P:Emission.Input.LastMousePosition">
            <summary>
            Return value of <see cref="P:Emission.Input.MousePosition"/> before update.
            </summary>
        </member>
        <member name="P:Emission.Input.DeltaMousePosition">
            <summary>
            Return the result of the difference between <see cref="P:Emission.Input.MousePosition"/> and <see cref="P:Emission.Input.LastMousePosition"/>.
            Use to get mouse movement between two frames.
            </summary>
        </member>
        <member name="P:Emission.Input.Scroll">
            <summary>
            Return _instance mouse scroll value.
            </summary>
        </member>
        <member name="P:Emission.Input.Sensivity">
            <summary>
            Binding for mouse sensivity
            </summary>
        </member>
        <member name="T:Emission.InputMode">
            <summary>
                Strongly-typed values for getting/setting the input mode hints.
            </summary>
        </member>
        <member name="F:Emission.InputMode.Cursor">
            <summary>
                If specified, enables setting the mouse behavior.
                <para>See <see cref="!:CursorMode" /> for possible values.</para>
            </summary>
        </member>
        <member name="F:Emission.InputMode.StickyKeys">
            <summary>
                If specified, enables setting sticky keys, where <see cref="!:Glfw.GetKey" /> will return
                <see cref="F:Emission.InputState.Press" /> the first time you call it for a key that was pressed, even if that key has already
                been released.
            </summary>
        </member>
        <member name="F:Emission.InputMode.StickyMouseButton">
            <summary>
                If specified, enables setting sticky mouse buttons, where <see cref="!:Glfw.GetMouseButton" /> will return
                <see cref="F:Emission.InputState.Press" /> the first time you call it for a mouse button that was pressed, even if that mouse
                button has already been released.
            </summary>
        </member>
        <member name="F:Emission.InputMode.LockKeyMods">
            <summary>
                When this input mode is enabled, any callback that receives modifier bits will have the
                <see cref="F:Emission.ModifierKeys.CapsLock" /> bit set if caps lock was on when the event occurred and the
                <see cref="F:Emission.ModifierKeys.NumLock" /> bit set if num lock was on.
            </summary>
        </member>
        <member name="F:Emission.InputMode.RawMouseMotion">
            <summary>
                When the cursor is disabled, raw (unscaled and unaccelerated) mouse motion can be enabled if available.
                <seealso cref="!:Glfw.RawMouseMotionSupported" />
            </summary>
        </member>
        <member name="T:Emission.InputState">
            <summary>
                Describes the state of a button/key.
            </summary>
        </member>
        <member name="F:Emission.InputState.Release">
            <summary>
                The key or mouse button was released.
            </summary>
        </member>
        <member name="F:Emission.InputState.Press">
            <summary>
                The key or mouse button was pressed.
            </summary>
        </member>
        <member name="F:Emission.InputState.Repeat">
            <summary>
                The key was held down until it repeated.
            </summary>
        </member>
        <member name="T:Emission.GamePadAxis">
            <summary>
                Represents a gamepad axis.
            </summary>
        </member>
        <member name="T:Emission.GamePadButton">
            <summary>
                Represents gamepad buttons.
                <para>
                    Duplicate values convenience for providing naming conventions for common gamepads (PlayStation,
                    X-Box, etc).
                </para>
            </summary>
        </member>
        <member name="T:Emission.Hat">
            <summary>
                Describes joystick hat states.
            </summary>
        </member>
        <member name="F:Emission.Hat.Centered">
            <summary>
                Centered
            </summary>
        </member>
        <member name="F:Emission.Hat.Up">
            <summary>
                Up
            </summary>
        </member>
        <member name="F:Emission.Hat.Right">
            <summary>
                Right
            </summary>
        </member>
        <member name="F:Emission.Hat.Down">
            <summary>
                Down
            </summary>
        </member>
        <member name="F:Emission.Hat.Left">
            <summary>
                Left
            </summary>
        </member>
        <member name="F:Emission.Hat.RightUp">
            <summary>
                Right and up
            </summary>
        </member>
        <member name="F:Emission.Hat.RightDown">
            <summary>
                Right and down
            </summary>
        </member>
        <member name="F:Emission.Hat.LeftUp">
            <summary>
                Left and up
            </summary>
        </member>
        <member name="F:Emission.Hat.LeftDown">
            <summary>
                Left and down
            </summary>
        </member>
        <member name="T:Emission.Joystick">
            <summary>
                Strongly-typed values describing possible joysticks.
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick1">
            <summary>
                Joystick 1
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick2">
            <summary>
                Joystick 2
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick3">
            <summary>
                Joystick 3
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick4">
            <summary>
                Joystick 4
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick5">
            <summary>
                Joystick 5
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick6">
            <summary>
                Joystick 6
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick7">
            <summary>
                Joystick 7
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick8">
            <summary>
                Joystick 8
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick9">
            <summary>
                Joystick 9
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick10">
            <summary>
                Joystick 10
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick11">
            <summary>
                Joystick 11
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick12">
            <summary>
                Joystick 12
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick13">
            <summary>
                Joystick 13
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick14">
            <summary>
                Joystick 14
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick15">
            <summary>
                Joystick 15
            </summary>
        </member>
        <member name="F:Emission.Joystick.Joystick16">
            <summary>
                Joystick 16
            </summary>
        </member>
        <member name="F:Emission.Keys.Unknown">
            <summary>
            An unknown key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Space">
            <summary>
            The spacebar key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Apostrophe">
            <summary>
            The apostrophe key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Comma">
            <summary>
            The comma key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Minus">
            <summary>
            The minus key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Period">
            <summary>
            The period key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Slash">
            <summary>
            The slash key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Semicolon">
            <summary>
            The semicolon key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Equal">
            <summary>
            The equal key.
            </summary>
        </member>
        <member name="F:Emission.Keys.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:Emission.Keys.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:Emission.Keys.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:Emission.Keys.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:Emission.Keys.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:Emission.Keys.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:Emission.Keys.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:Emission.Keys.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:Emission.Keys.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:Emission.Keys.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:Emission.Keys.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:Emission.Keys.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:Emission.Keys.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:Emission.Keys.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:Emission.Keys.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:Emission.Keys.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:Emission.Keys.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:Emission.Keys.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:Emission.Keys.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:Emission.Keys.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:Emission.Keys.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:Emission.Keys.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:Emission.Keys.LeftBracket">
            <summary>
            The left bracket(opening bracket) key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Backslash">
            <summary>
            The backslash.
            </summary>
        </member>
        <member name="F:Emission.Keys.RightBracket">
            <summary>
            The right bracket(closing bracket) key.
            </summary>
        </member>
        <member name="F:Emission.Keys.GraveAccent">
            <summary>
            The grave accent key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Escape">
            <summary>
            The escape key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Enter">
            <summary>
            The enter key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Tab">
            <summary>
            The tab key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Backspace">
            <summary>
            The backspace key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Insert">
            <summary>
            The insert key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Delete">
            <summary>
            The delete key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Right">
            <summary>
            The right arrow key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Left">
            <summary>
            The left arrow key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Down">
            <summary>
            The down arrow key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Up">
            <summary>
            The up arrow key.
            </summary>
        </member>
        <member name="F:Emission.Keys.PageUp">
            <summary>
            The page up key.
            </summary>
        </member>
        <member name="F:Emission.Keys.PageDown">
            <summary>
            The page down key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Home">
            <summary>
            The home key.
            </summary>
        </member>
        <member name="F:Emission.Keys.End">
            <summary>
            The end key.
            </summary>
        </member>
        <member name="F:Emission.Keys.CapsLock">
            <summary>
            The caps lock key.
            </summary>
        </member>
        <member name="F:Emission.Keys.ScrollLock">
            <summary>
            The scroll lock key.
            </summary>
        </member>
        <member name="F:Emission.Keys.NumLock">
            <summary>
            The num lock key.
            </summary>
        </member>
        <member name="F:Emission.Keys.PrintScreen">
            <summary>
            The print screen key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Pause">
            <summary>
            The pause key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F13">
            <summary>
            The F13 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F14">
            <summary>
            The F14 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F15">
            <summary>
            The F15 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F16">
            <summary>
            The F16 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F17">
            <summary>
            The F17 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F18">
            <summary>
            The F18 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F19">
            <summary>
            The F19 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F20">
            <summary>
            The F20 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F21">
            <summary>
            The F21 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F22">
            <summary>
            The F22 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F23">
            <summary>
            The F23 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F24">
            <summary>
            The F24 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.F25">
            <summary>
            The F25 key.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad0">
            <summary>
            The 0 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad1">
            <summary>
            The 1 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad2">
            <summary>
            The 2 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad3">
            <summary>
            The 3 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad4">
            <summary>
            The 4 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad5">
            <summary>
            The 5 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad6">
            <summary>
            The 6 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad7">
            <summary>
            The 7 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad8">
            <summary>
            The 8 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPad9">
            <summary>
            The 9 key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadDecimal">
            <summary>
            The decimal key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadDivide">
            <summary>
            The divide key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadMultiply">
            <summary>
            The multiply key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadSubtract">
            <summary>
            The subtract key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadAdd">
            <summary>
            The add key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadEnter">
            <summary>
            The enter key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.KeyPadEqual">
            <summary>
            The equal key on the key pad.
            </summary>
        </member>
        <member name="F:Emission.Keys.LeftShift">
            <summary>
            The left shift key.
            </summary>
        </member>
        <member name="F:Emission.Keys.LeftControl">
            <summary>
            The left control key.
            </summary>
        </member>
        <member name="F:Emission.Keys.LeftAlt">
            <summary>
            The left alt key.
            </summary>
        </member>
        <member name="F:Emission.Keys.LeftSuper">
            <summary>
            The left super key.
            </summary>
        </member>
        <member name="F:Emission.Keys.RightShift">
            <summary>
            The right shift key.
            </summary>
        </member>
        <member name="F:Emission.Keys.RightControl">
            <summary>
            The right control key.
            </summary>
        </member>
        <member name="F:Emission.Keys.RightAlt">
            <summary>
            The right alt key.
            </summary>
        </member>
        <member name="F:Emission.Keys.RightSuper">
            <summary>
            The right super key.
            </summary>
        </member>
        <member name="F:Emission.Keys.Menu">
            <summary>
            The menu key.
            </summary>
        </member>
        <member name="F:Emission.Keys.LastKey">
            <summary>
            The last valid key in this enum.
            </summary>
        </member>
        <member name="T:Emission.ModifierKeys">
            <summary>
                Describes bitwise combination of modifier keys.
            </summary>
        </member>
        <member name="F:Emission.ModifierKeys.Shift">
            <summary>
                Either of the Shift keys.
            </summary>
        </member>
        <member name="F:Emission.ModifierKeys.Control">
            <summary>
                Either of the Ctrl keys.
            </summary>
        </member>
        <member name="F:Emission.ModifierKeys.Alt">
            <summary>
                Either of the Alt keys
            </summary>
        </member>
        <member name="F:Emission.ModifierKeys.Super">
            <summary>
                The super key ("Windows" key on Windows)
            </summary>
        </member>
        <member name="F:Emission.ModifierKeys.CapsLock">
            <summary>
                The caps-lock is enabled.
            </summary>
        </member>
        <member name="F:Emission.ModifierKeys.NumLock">
            <summary>
                The num-lock is enabled.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Unknown">
            <summary>
            An unknown button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button1">
            <summary>
                The first button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button2">
            <summary>
                The second button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button3">
            <summary>
                The third button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button4">
            <summary>
                The fourth button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button5">
            <summary>
                The fifth button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button6">
            <summary>
                The sixth button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button7">
            <summary>
                The seventh button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Button8">
            <summary>
                The eighth button.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Left">
            <summary>
                The left mouse button. This corresponds to <see cref="F:Emission.MouseButton.Button1"/>.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Right">
            <summary>
                The right mouse button. This corresponds to <see cref="F:Emission.MouseButton.Button2"/>.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Middle">
            <summary>
                The middle mouse button. This corresponds to <see cref="F:Emission.MouseButton.Button3"/>.
            </summary>
        </member>
        <member name="F:Emission.MouseButton.Last">
            <summary>
                The highest mouse button available.
            </summary>
        </member>
        <member name="M:Emission.Page.PageManager.FindPage(System.String)">
            <summary>
            Return a page using his name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Emission.Page.PageManager.EnablePage(Emission.Page.Page)">
            <summary>
            Activate a page. 
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Emission.Page.PageManager.DisablePage(Emission.Page.Page)">
            <summary>
            Desactivate a page.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Emission.Page.PageManager.Enable(Emission.Page.Page)">
            <summary>
            Enable a new page with all visible pages.
            </summary>
            <param name="page">Page to enable</param>
        </member>
        <member name="M:Emission.Page.PageManager.Invoke(Emission.Page.Page)">
            <summary>
            Enable a new page and disable all loaded pages.
            </summary>
            <param name="page">Page to enable</param>
        </member>
        <member name="M:Emission.Page.PageManager.Find(System.String)">
            <summary>
            Try to find a page in active pages. 
            Return null if the page is not in active pages.
            </summary>
            <param name="name">Page's name.</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Page.PageManager.IsPageActive(System.String)">
            <summary>
            Check if a page is active or not. Return true if active, false otherwise.
            </summary>
            <param name="name">Page's name</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Page.PageManager.IsPageActive(Emission.Page.Page)">
            <summary>
            Check if a page is active or not. Return true if active, false otherwise.
            </summary>
            <param name="page">Page to check</param>
            <returns></returns>
        </member>
        <member name="M:Emission.Page.PageManager.Disable(Emission.Page.Page)">
            <summary>
            Disable an active page.
            </summary>
            <param name="page">Page to disable</param>
        </member>
        <member name="M:Emission.Page.PageManager.DisableAll">
            <summary>
            Disable all loaded pages.
            </summary>
        </member>
        <member name="M:Emission.UI.ImGuiController.Render">
            <summary>
            Renders the ImGui draw list data.
            </summary>
        </member>
        <member name="M:Emission.UI.ImGuiController.Update">
            <summary>
            Updates ImGui input and IO configuration state.
            </summary>
        </member>
        <member name="M:Emission.UI.ImGuiController.SetPerFrameImGuiData(System.Single)">
            <summary>
            Sets per-frame data based on the associated window.
            This is called by Update(float).
            </summary>
        </member>
        <member name="M:Emission.MemoryHelper.ReadStream(System.IO.Stream,System.Int32)">
            <summary>
            Reads a stream until the end is reached into a byte array.
            </summary>
            <param name="stream">Stream to read</param>
            <param name="size">Initial buffer size</param>
        </member>
        <member name="T:Emission.Window.Cursor">
            <summary>
            Wrapper around a handle for a window cursor object.
            </summary>
            <seealso cref="T:Emission.Window.Cursor" />
        </member>
        <member name="F:Emission.Window.Monitor.None">
            <summary>
            Represent a null monitor
            </summary>
        </member>
        <member name="P:Emission.Window.Monitor.PrimaryMonitor">
            <summary>
            Get Current monitor.
            </summary>
        </member>
        <member name="P:Emission.Window.Monitor.Monitors">
            <summary>
            Get an array of all recognize monitors.
            </summary>
        </member>
        <member name="P:Emission.Window.Monitor.Name">
            <summary>
            Return the name of the monitor.
            </summary>
        </member>
        <member name="P:Emission.Window.Monitor.WorkArea">
            <summary>
            Get a <see cref="T:Emission.Mathematics.Rectangle"/> that represent the position and the size with the monitor.
            </summary>
        </member>
        <member name="P:Emission.Window.Monitor.ContentScale">
            <summary>
            Retrieves the content scale for the specified monitor.
            The content scale is the ratio between the current DPI and the platform's default DPI.
            </summary>
        </member>
        <member name="P:Emission.Window.Monitor.UserPointer">
            <summary>
            Returns the current value of the user-defined pointer of the specified monitor.
            The user-pointer, or <see cref="F:System.IntPtr.Zero"/> if none is defined.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Handle">
            <summary>
            Pointer to Glfw Window object. Represent window. Public get and can be only set class constructor.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Config">
            <summary>
            Structure that contains all information to generate window.
            Information cannot be change, so it can be used to get starting value for the width or the title for example.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.WindowAspect">
            <summary>
            Return, as float value, the relationship between the width and the height of the screen.
            Calculate with <see cref="F:Emission.Window.Window._lastWinSize"/>.
            Cannot be set, readonly.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.WindowPosition">
            <summary>
            Use a Vector2 with int values to get window's position in computer screen space.
            Can be set or get.
            Call <see cref="!:Glfw.SetWindowPosition"/> to define position.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.WindowSize">
            <summary>
            Use a Vector2 with int values to get Window current size in pixels.
            Can be set or get.
            Call <see cref="!:Glfw.SetWindowSize"/> to define size.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Maximized">
            <summary>
            Return a boolean when the window is maximized on the current monitor.
            Can be set or get.
            When is set, it maximized the window when value is true and restore his size when it's false.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Minimized">
            <summary>
            Return a boolean when the window is minimized on the current monitor.
            Can be set or get.
            When is set, it minimized the window when value is true and restore his size when it's false.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Title">
            <summary>
            Return or set window's title. Use private variable <see cref="F:Emission.Window.Window._title"/> to save current title.
            When the title need to change, it define the private variable and then change title using
            <see cref="!:Glfw.SetWindowTitle(IntPtr, byte[])"/>.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Visible">
            <summary>
            Return if the window is visible or not. Use attribute to get the value.
            If visibility need the be set, if it's true, the window will be show, otherwise the window will be hide.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Focus">
            <summary>
            Warper for <see cref="!:Glfw.GetWindowAttribute(System.IntPtr,int)"/> with <see cref="!:WindowAttribute.Focused"/> while
            returning value and <see cref="!:Glfw.FocusWindow"/> when value is set.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.ShouldClose">
            <summary>
            Warper for <see cref="!:Glfw.WindowShouldClose"/> while returning value
            and <see cref="!:Glfw.SetWindowShouldClose"/> when value is set.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Opacity">
            <summary>
            Gets or sets the opacity of the window in the range of 0.0f and 1.0f.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.ClearColor">
            <summary>
            Get the color use to clear the window.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.WindowIcon">
            <summary>
            Get Window's Icon.
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Viewport">
            <summary>
            Viewport of the window.
            Contains WindowSize and Window Position
            </summary>
        </member>
        <member name="P:Emission.Window.Window.Behaviour">
            <summary>
            Engine Behaviour of the Window.
            </summary>
        </member>
        <member name="M:Emission.Window.Window.Initialize">
            <summary>
            Initialize Window.
            Enable OpenGl, initialize Event Delegates and Glfw inputs.
            </summary>
        </member>
        <member name="M:Emission.Window.Window.Start">
            <summary>
            Enable window.
            </summary>
        </member>
        <member name="M:Emission.Window.Window.Update">
            <summary>
            Update window.
            </summary>
        </member>
        <member name="M:Emission.Window.Window.Render">
            <summary>
            Clear window color.
            </summary>
        </member>
        <member name="M:Emission.Window.Window.Swap">
            <summary>
            Swap Glfw buffers.
            </summary>
        </member>
        <member name="M:Emission.Window.Window.AssignContext">
            <summary>
            Make current thread as Glfw Context. Load OpenGl Context.
            </summary>
        </member>
        <member name="M:Emission.Window.Window.Stop">
            <summary>
            Dispose window.
            </summary>
        </member>
        <member name="M:Emission.Window.Window.Dispose">
            <summary>
            Destroy and terminate window.
            </summary>
        </member>
        <member name="T:Emission.EmissionErrors">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Emission.EmissionErrors.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Emission.EmissionErrors.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Emission.EmissionErrors.EmissionAssimpException">
            <summary>
              Looks up a localized string similar to Emission ASSIMP Error.
            </summary>
        </member>
        <member name="P:Emission.EmissionErrors.EmissionEventException">
            <summary>
              Looks up a localized string similar to Emission Event Error.
            </summary>
        </member>
        <member name="P:Emission.EmissionErrors.EmissionGlfwException">
            <summary>
              Looks up a localized string similar to Emission GLFW Error.
            </summary>
        </member>
        <member name="P:Emission.EmissionErrors.EmissionIOException">
            <summary>
              Looks up a localized string similar to Emission I/O Error.
            </summary>
        </member>
        <member name="P:Emission.EmissionErrors.EmissionOpenGlException">
            <summary>
              Looks up a localized string similar to Emission OpenGL Error.
            </summary>
        </member>
        <member name="P:Emission.EmissionErrors.EmissionPageException">
            <summary>
              Looks up a localized string similar to Emission Page Error.
            </summary>
        </member>
        <member name="P:Emission.EmissionErrors.EmissionTextureException">
            <summary>
              Looks up a localized string similar to Emission Texture Error.
            </summary>
        </member>
        <member name="M:Emission.Time.GlfwTime">
            <summary>
            Return current time by using <see cref="T:Emission.Time"/>. return a double so it can be change as
            a float easily.
            </summary>
        </member>
        <member name="P:Emission.Time.FrameTime">
            <summary>
            Return the time at the beginning of the frame.
            </summary>
        </member>
        <member name="P:Emission.Time.DeltaTime">
            <summary>
            Return delta time use to define movements by time.
            </summary>
        </member>
        <member name="P:Emission.Time.Fps">
            <summary>
            Return current <see cref="N:Emission.Window"/>'s fps.
            </summary>
        </member>
        <member name="M:Emission.Time.NanoTime">
            <summary>
            Return the current time in nano second.
            Equivalent to System.nanoTime() in Java.
            </summary>
            <returns>Current time</returns>
        </member>
        <member name="M:Emission.Time.MsTime">
            <summary>
            Return the current time in milliseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emission.Time.SetDeltaTime(System.Double)">
            <summary>
            Static function used to define current <see cref="P:Emission.Time.DeltaTime"/>.
            </summary>
            <param name="time">New Delta Time value</param>
        </member>
        <member name="M:Emission.Time.SetFps(System.Int32)">
            <summary>
            Static function used to define current framerate (<see cref="P:Emission.Time.Fps"/>).
            </summary>
            <param name="fps">New FPS value</param>
        </member>
        <member name="T:System.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Strings.ApiUnavailable">
            <summary>
              Looks up a localized string similar to GLFW could not find support for the requested API on the system..
            </summary>
        </member>
        <member name="P:System.Strings.FormatUnavailable">
            <summary>
              Looks up a localized string similar to The requested pixel format is not supported or contents of the clipboard could not be converted to the requested format..
            </summary>
        </member>
        <member name="P:System.Strings.InvalidEnum">
            <summary>
              Looks up a localized string similar to One of the arguments to the function was an invalid enum value..
            </summary>
        </member>
        <member name="P:System.Strings.InvalidValue">
            <summary>
              Looks up a localized string similar to One of the arguments to the function was an invalid value..
            </summary>
        </member>
        <member name="P:System.Strings.NoCurrentContext">
            <summary>
              Looks up a localized string similar to A called that needs and operates on the current OpenGL or OpenGL ES context but no context is current on the calling thread.
            </summary>
        </member>
        <member name="P:System.Strings.NotInitialized">
            <summary>
              Looks up a localized string similar to GLFW not yet initialized..
            </summary>
        </member>
        <member name="P:System.Strings.NoWindowContext">
            <summary>
              Looks up a localized string similar to A window that does not have an OpenGL or OpenGL ES context was passed to a function that requires it to have one..
            </summary>
        </member>
        <member name="P:System.Strings.OutOfMemory">
            <summary>
              Looks up a localized string similar to A memory allocation failed..
            </summary>
        </member>
        <member name="P:System.Strings.PlatformError">
            <summary>
              Looks up a localized string similar to A platform-specific error occurred.
            </summary>
        </member>
        <member name="P:System.Strings.UnknownError">
            <summary>
              Looks up a localized string similar to An unknown error has occurred..
            </summary>
        </member>
        <member name="P:System.Strings.VersionUnavailable">
            <summary>
              Looks up a localized string similar to The requested OpenGL or OpenGL ES version (including any requested context or framebuffer hints) is not available on this machine..
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so checking for <c>null</c> is required before its usage.
            </summary>
            <example>
                <code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element can never be <c>null</c>.
            </summary>
            <example>
                <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
                Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can never be null.
            </summary>
            <example>
                <code>
            internal void Foo([ItemNotNull]List&lt;string&gt; books)
            {
              foreach (var book in books) {
                if (book != null) // Warning: Expression is always true
                 Console.WriteLine(book.ToUpper());
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
                Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can be null.
            </summary>
            <example>
                <code>
            internal void Foo([ItemCanBeNull]List&lt;string&gt; books)
            {
              foreach (var book in books)
              {
                // Warning: Possible 'System.NullReferenceException'
                Console.WriteLine(book.ToUpper());
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by the format pattern and (optional) arguments.
                The parameter, which contains the format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
                Specifies which parameter of an annotated method should be treated as the format string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
                Use this annotation to specify a type that contains static or const fields
                with values for the annotated property/field/parameter.
                The specified type will be used to improve completion suggestions.
            </summary>
            <example>
                <code>
            namespace TestNamespace
            {
              internal class Constants
              {
                internal static int INT_CONST = 1;
                internal const string STRING_CONST = "1";
              }
            
              internal class Class1
              {
                [ValueProvider("TestNamespace.Constants")] internal int myField;
                internal void Foo([ValueProvider("TestNamespace.Constants")] string str) { }
            
                internal void Test()
                {
                  Foo(/*try completion here*/);//
                  myField = /*try completion here*/
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be a string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
            <example>
                <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
                is used to notify that some property value changed.
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
            internal class Foo : INotifyPropertyChanged {
              internal event PropertyChangedEventHandler PropertyChanged;
            
              [NotifyPropertyChangedInvocator]
              protected virtual void NotifyChanged(string propertyName) { ... }
            
              string _name;
            
              internal string Name {
                get { return _name; }
                set { _name = value; NotifyChanged("LastName"); /* Warning */ }
              }
            }
            </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output.
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If the method has a single input parameter, its name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for the method output
                means that the method doesn't return normally (throws or terminates the process).<br />
                Value <c>canbenull</c> is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
                with rows separated by semicolon. There is no notion of order rows, all rows are checked
                for applicability and applied per each program state tracked by the analysis engine.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; halt")]
            internal void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("null &lt;= param:null")] // reverse condition syntax
            internal string GetName(string surname)
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null =&gt; true")]
            internal bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            internal object Transform(object data)
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            internal bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
                Indicates whether the marked element should be localized.
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
                so this symbol will not be reported as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
                Can be applied to attributes, type parameters, and parameters of a type assignable from <see cref="T:System.Type" />
                .
                When applied to an attribute, the decorated attribute behaves the same as <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
                When applied to a type parameter or to a parameter of type <see cref="T:System.Type" />,  indicates that the
                corresponding type
                is used implicitly.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseKindFlags">
            <summary>
                Specify the details of implicitly used symbol when it is marked
                with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered to be used implicitly when marked
                with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.internalAPIAttribute">
            <summary>
                This attribute is intended to mark internally available API
                which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
                If the parameter is a delegate, indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example>
                <code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
                Indicates that the return value of the method invocation must be used.
            </summary>
            <remarks>
                Methods decorated with this attribute (in contrast to pure methods) might change state,
                but make no sense without using their return value. <br />
                Similarly to <see cref="T:JetBrains.Annotations.PureAttribute" />, this attribute
                will help detecting usages of the method when the return value in not used.
                Additionally, you can optionally specify a custom message, which will be used when showing warnings, e.g.
                <code>[MustUseReturnValue("Use the return value to...")]</code>.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
                Indicates the type member or parameter of some type, that should be used instead of all other ways
                to get the value of that type. This annotation is useful when you have some "context" value evaluated
                and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example>
                <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder within a web project.
                Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
                An extension method marked with this attribute is processed by code completion
                as a 'Source Template'. When the extension method is completed over some expression, its source code
                is automatically expanded like a template at call site.
            </summary>
            <remarks>
                Template method body can contain valid source code and/or special comments starting with '$'.
                Text inside these comments is added as source code when the template is applied. Template parameters
                can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
                Use the <see cref="T:JetBrains.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
            <example>
                In this example, the 'forEach' method is a source template available over all values
                of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
                <code>
            [SourceTemplate]
            internal static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
                Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
                You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
                is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
                template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
                for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
            <example>
                Applying the attribute on a source template method:
                <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            internal static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
                Applying the attribute on a template method parameter:
                <code>
            [SourceTemplate]
            internal static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
                Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
                parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
                Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
                If the target parameter is used several times in the template, only one occurrence becomes editable;
                other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
                use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
                Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
                <see cref="T:JetBrains.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
                an MVC controller. If applied to a method, the MVC controller name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC Master. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC model type. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
                partial view. If applied to a method, the MVC partial view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that the marked parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name.
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            internal ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that the marked parameter or method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
                Indicates how method, constructor invocation, or property access
                over collection type affects the contents of the collection.
                Use <see cref="P:JetBrains.Annotations.CollectionAccessAttribute.CollectionAccessType" /> to specify the access type.
            </summary>
            <remarks>
                Using this attribute only makes sense if all collection methods are marked with this attribute.
            </remarks>
            <example>
                <code>
            internal class MyStringCollection : List&lt;string&gt;
            {
              [CollectionAccess(CollectionAccessType.Read)]
              internal string GetFirstString()
              {
                return this.ElementAt(0);
              }
            }
            class Test
            {
              internal void Foo()
              {
                // Warning: Contents of the collection is never updated
                var col = new MyStringCollection();
                string x = col.GetFirstString();
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessType">
            <summary>
                Provides a value for the <see cref="T:JetBrains.Annotations.CollectionAccessAttribute" /> to define
                how the collection method invocation affects the contents of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
                Indicates that the marked method is assertion method, i.e. it halts the control flow if
                one of the conditions is satisfied. To set the condition, mark one of the parameters with
                <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
                Indicates the condition parameter of the assertion method. The method itself should be
                marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
                the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
                Specifies assertion type. If the assertion method argument satisfies the condition,
                then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
                Indicates that the marked method unconditionally terminates control flow execution.
                For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
                Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
                .Where). This annotation allows inference of [InstantHandle] annotation for parameters
                of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
                Indicates that IEnumerable passed as a parameter is not enumerated.
                Use this annotation to suppress the 'Possible multiple enumeration of IEnumerable' inspection.
            </summary>
            <example>
                <code>
            static void ThrowIfNull&lt;T&gt;([NoEnumeration] T v, string n) where T : class
            {
              // custom check for null but no enumeration
            }
            
            void Foo(IEnumerable&lt;string&gt; values)
            {
              ThrowIfNull(values, nameof(values));
              var x = values.ToList(); // No warnings about multiple enumeration
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
                Indicates that the marked parameter is a regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
                Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
                The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
                as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
                is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
                enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
                Property should have the tree ancestor of the <c>ItemsControl</c> type or
                marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
        </member>
    </members>
</doc>
